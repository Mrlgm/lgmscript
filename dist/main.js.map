{"version":3,"file":"main.js","mappings":"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","sources":["webpack://lgmscript/./node_modules/antlr4/src/antlr4/BufferedTokenStream.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/CharStreams.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/CommonTokenFactory.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/CommonTokenStream.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/FileStream.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/InputStream.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/IntervalSet.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/LL1Analyzer.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/Lexer.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/Parser.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/ParserRuleContext.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/PredictionContext.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/Recognizer.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/RuleContext.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/Token.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/Utils.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATN.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNConfig.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNState.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ATNType.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/LexerAction.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/PredictionMode.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/SemanticContext.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/Transition.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/atn/index.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/dfa/DFA.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/dfa/DFAState.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/dfa/index.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/error/ErrorListener.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/error/Errors.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/error/index.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/index.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/polyfills/codepointat.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/tree/Tree.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/tree/Trees.js","webpack://lgmscript/./node_modules/antlr4/src/antlr4/tree/index.js","webpack://lgmscript/webpack/bootstrap","webpack://lgmscript/./output/production/lgmscript/LgmScriptLexer.js","webpack://lgmscript/./output/production/lgmscript/LgmScriptListener.js","webpack://lgmscript/./output/production/lgmscript/LgmScriptVisitor.js","webpack://lgmscript/./output/production/lgmscript/LgmScriptParser.js","webpack://lgmscript/./src/index.js","webpack://lgmscript/./src/main/JSVisitor.js"],"sourcesContent":["/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\nconst Lexer = require('./Lexer');\nconst {Interval} = require('./IntervalSet');\n\n// this is just to keep meaningful parameter types to Parser\nclass TokenStream {}\n\n/**\n * This implementation of {@link TokenStream} loads tokens from a\n * {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n * access to any previous token by index.\n *\n * <p>\n * This token stream ignores the value of {@link Token//getChannel}. If your\n * parser requires the token stream filter tokens to only those on a particular\n * channel, such as {@link Token//DEFAULT_CHANNEL} or\n * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n * {@link CommonTokenStream}.</p>\n */\nclass BufferedTokenStream extends TokenStream {\n\tconstructor(tokenSource) {\n\n\t\tsuper();\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\t\t/**\n\t\t * A collection of all tokens fetched from the token source. The list is\n\t\t * considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t * to {@code true}.\n\t\t */\n\t\tthis.tokens = [];\n\n\t\t/**\n\t\t * The index into {@link //tokens} of the current token (next token to\n\t\t * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t * be\n\t\t * {@link //LT LT(1)}.\n\t\t *\n\t\t * <p>This field is set to -1 when the stream is first constructed or when\n\t\t * {@link //setTokenSource} is called, indicating that the first token has\n\t\t * not yet been fetched from the token source. For additional information,\n\t\t * see the documentation of {@link IntStream} for a description of\n\t\t * Initializing Methods.</p>\n\t\t */\n\t\tthis.index = -1;\n\n\t\t/**\n\t\t * Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t * {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t * performance for the following cases:\n\t\t *\n\t\t * <ul>\n\t\t * <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t * prevent\n\t\t * consuming the EOF symbol is optimized by checking the values of\n\t\t * {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t * //LA}.</li>\n\t\t * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t * into\n\t\t * {@link //tokens} is trivial with this field.</li>\n\t\t * <ul>\n\t\t */\n\t\tthis.fetchedEOF = false;\n\t}\n\n\tmark() {\n\t\treturn 0;\n\t}\n\n\trelease(marker) {\n\t\t// no resources to release\n\t}\n\n\treset() {\n\t\tthis.seek(0);\n\t}\n\n\tseek(index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t}\n\n\tget(index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t}\n\n\tconsume() {\n\t\tlet skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure index {@code i} in tokens has a token.\n\t *\n\t * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise\n\t * {@code false}.\n\t * @see //get(int i)\n\t */\n\tsync(i) {\n\t\tconst n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tconst fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add {@code n} elements to buffer.\n\t *\n\t * @return {Number} The actual number of elements added to the buffer.\n\t */\n\tfetch(n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n// Get all tokens from start..stop inclusively///\n\tgetTokens(start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tconst subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (let i = start; i < stop; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t}\n\n\tLA(i) {\n\t\treturn this.LT(i).type;\n\t}\n\n\tLB(k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t}\n\n\tLT(k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tconst i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) { // return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t}\n\n\t/**\n\t * Allowed derived classes to modify the behavior of operations which change\n\t * the current stream position by adjusting the target token index of a seek\n\t * operation. The default implementation simply returns {@code i}. If an\n\t * exception is thrown in this method, the current stream index should not be\n\t * changed.\n\t *\n\t * <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t * that\n\t * the seek target is always an on-channel token.</p>\n\t *\n\t * @param {Number} i The target token index.\n\t * @return {Number} The adjusted target token index.\n\t */\n\tadjustSeekIndex(i) {\n\t\treturn i;\n\t}\n\n\tlazyInit() {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\n\tsetup() {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t}\n\n// Reset this token stream by setting its token source.///\n\tsetTokenSource(tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the next token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and EOF.\n\t */\n\tnextTokenOnChannel(i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === Token.EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the previous token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and 0.\n\t */\n\tpreviousTokenOnChannel(i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the right of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t * EOF. If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToRight(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tconst from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tconst to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the left of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t * If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToLeft(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tconst from_ = prevOnChannel + 1;\n\t\tconst to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\tfilterForChannel(left, right, channel) {\n\t\tconst hidden = [];\n\t\tfor (let i = left; i < right + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t}\n\n\tgetSourceName() {\n\t\treturn this.tokenSource.getSourceName();\n\t}\n\n// Get the text of all tokens in this buffer.///\n\tgetText(interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t\t}\n\t\tlet start = interval.start;\n\t\tif (start instanceof Token) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tlet stop = interval.stop;\n\t\tif (stop instanceof Token) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tlet s = \"\";\n\t\tfor (let i = start; i < stop + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t}\n\n// Get all tokens from lexer until EOF///\n\tfill() {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\n\nmodule.exports = BufferedTokenStream;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst InputStream = require('./InputStream');\nconst fs = require(\"fs\");\n\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\nconst CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new InputStream(str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n    reader.onload = function(e) {\n      const is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      let is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function(path, encoding) {\n    const data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n\nmodule.exports = CharStreams;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst CommonToken = require('./Token').CommonToken;\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new CommonToken(source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new CommonToken(null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nmodule.exports = CommonTokenFactory;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nconst Token = require('./Token').Token;\nconst BufferedTokenStream = require('./BufferedTokenStream');\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token//getChannel} returns a particular value).\n *\n * <p>\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link //getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n * {@link //LB}.</p>\n *\n * <p>\n * By default, tokens are placed on the default channel\n * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n * call {@link Lexer//setChannel}.\n * </p>\n *\n * <p>\n * Note: lexer rules which use the {@code ->skip} lexer command or call\n * {@link Lexer//skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.</p>\n */\nclass CommonTokenStream extends BufferedTokenStream {\n    constructor(lexer, channel) {\n        super(lexer);\n        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    }\n\n    adjustSeekIndex(i) {\n        return this.nextTokenOnChannel(i, this.channel);\n    }\n\n    LB(k) {\n        if (k===0 || this.index-k<0) {\n            return null;\n        }\n        let i = this.index;\n        let n = 1;\n        // find k good tokens looking backwards\n        while (n <= k) {\n            // skip off-channel tokens\n            i = this.previousTokenOnChannel(i - 1, this.channel);\n            n += 1;\n        }\n        if (i < 0) {\n            return null;\n        }\n        return this.tokens[i];\n    }\n\n    LT(k) {\n        this.lazyInit();\n        if (k === 0) {\n            return null;\n        }\n        if (k < 0) {\n            return this.LB(-k);\n        }\n        let i = this.index;\n        let n = 1; // we know tokens[pos] is a good one\n        // find k good tokens\n        while (n < k) {\n            // skip off-channel tokens, but make sure to not look past EOF\n            if (this.sync(i + 1)) {\n                i = this.nextTokenOnChannel(i + 1, this.channel);\n            }\n            n += 1;\n        }\n        return this.tokens[i];\n    }\n\n    // Count EOF just once.\n    getNumberOfOnChannelTokens() {\n        let n = 0;\n        this.fill();\n        for (let i =0; i< this.tokens.length;i++) {\n            const t = this.tokens[i];\n            if( t.channel===this.channel) {\n                n += 1;\n            }\n            if( t.type===Token.EOF) {\n                break;\n            }\n        }\n        return n;\n    }\n}\n\nmodule.exports = CommonTokenStream;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst InputStream = require('./InputStream');\nconst fs = require(\"fs\");\n\n/**\n * This is an InputStream that is loaded from a file all at once\n * when you construct the object.\n */\nclass FileStream extends InputStream {\n\tconstructor(fileName, decodeToUnicodeCodePoints) {\n\t\tconst data = fs.readFileSync(fileName, \"utf8\");\n\t\tsuper(data, decodeToUnicodeCodePoints);\n\t\tthis.fileName = fileName;\n\t}\n}\n\nmodule.exports = FileStream\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\nrequire('./polyfills/codepointat');\nrequire('./polyfills/fromcodepoint');\n\n/**\n * If decodeToUnicodeCodePoints is true, the input is treated\n * as a series of Unicode code points.\n *\n * Otherwise, the input is treated as a series of 16-bit UTF-16 code\n * units.\n */\nclass InputStream {\n\tconstructor(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t// _loadString - Vacuum all input from a string and then treat it like a buffer.\n\t\tthis._index = 0;\n\t\tthis.data = [];\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tfor (let i = 0; i < this.strdata.length; ) {\n\t\t\t\tconst codePoint = this.strdata.codePointAt(i);\n\t\t\t\tthis.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < this.strdata.length; i++) {\n\t\t\t\tconst codeUnit = this.strdata.charCodeAt(i);\n\t\t\t\tthis.data.push(codeUnit);\n\t\t\t}\n\t\t}\n\t\tthis._size = this.data.length;\n\t}\n\n\t/**\n\t * Reset the stream so that it's in the same state it was\n\t * when the object was created *except* the data array is not\n\t * touched.\n\t */\n\treset() {\n\t\tthis._index = 0;\n\t}\n\n\tconsume() {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow (\"cannot consume EOF\");\n\t\t}\n\t\tthis._index += 1;\n\t}\n\n\tLA(offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tconst pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) { // invalid\n\t\t\treturn Token.EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t}\n\n\tLT(offset) {\n\t\treturn this.LA(offset);\n\t}\n\n// mark/release do nothing; we have entire buffer\n\tmark() {\n\t\treturn -1;\n\t}\n\n\trelease(marker) {\n\t}\n\n\t/**\n\t * consume() ahead until p==_index; can't just set p=_index as we must\n\t * update line and column. If we seek backwards, just set p\n\t */\n\tseek(_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t}\n\n\tgetText(start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tlet result = \"\";\n\t\t\t\tfor (let i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.strdata;\n\t}\n\n\tget index(){\n\t\treturn this._index;\n\t}\n\n\tget size(){\n\t\treturn this._size;\n\t}\n}\n\n\nmodule.exports = InputStream;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\n\n/* stop is not included! */\nclass Interval {\n\tconstructor(start, stop) {\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t}\n\n\tcontains(item) {\n\t\treturn item >= this.start && item < this.stop;\n\t}\n\n\ttoString() {\n\t\tif(this.start===this.stop-1) {\n\t\t\treturn this.start.toString();\n\t\t} else {\n\t\t\treturn this.start.toString() + \"..\" + (this.stop-1).toString();\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.stop - this.start;\n\t}\n}\n\n\nclass IntervalSet {\n\tconstructor() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tfirst(v) {\n\t\tif (this.intervals === null || this.intervals.length===0) {\n\t\t\treturn Token.INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t}\n\n\taddOne(v) {\n\t\tthis.addInterval(new Interval(v, v + 1));\n\t}\n\n\taddRange(l, h) {\n\t\tthis.addInterval(new Interval(l, h + 1));\n\t}\n\n\taddInterval(toAdd) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(toAdd);\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (let pos = 0; pos < this.intervals.length; pos++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (toAdd.stop < existing.start) {\n\t\t\t\t\tthis.intervals.splice(pos, 0, toAdd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (toAdd.stop === existing.start) {\n\t\t\t\t\tthis.intervals[pos].start = toAdd.start;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (toAdd.start <= existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));\n\t\t\t\t\tthis.reduce(pos);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(toAdd);\n\t\t}\n\t}\n\n\taddSet(other) {\n\t\tif (other.intervals !== null) {\n\t\t\tother.intervals.forEach( toAdd => this.addInterval(toAdd), this);\n\t\t}\n\t\treturn this;\n\t}\n\n\treduce(pos) {\n\t\t// only need to reduce if pos is not the last\n\t\tif (pos < this.intervals.length - 1) {\n\t\t\tconst current = this.intervals[pos];\n\t\t\tconst next = this.intervals[pos + 1];\n\t\t\t// if next contained in current\n\t\t\tif (current.stop >= next.stop) {\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t\tthis.reduce(pos);\n\t\t\t} else if (current.stop >= next.start) {\n\t\t\t\tthis.intervals[pos] = new Interval(current.start, next.stop);\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomplement(start, stop) {\n\t\tconst result = new IntervalSet();\n\t\tresult.addInterval(new Interval(start,stop+1));\n\t\tif(this.intervals !== null)\n\t\t\tthis.intervals.forEach(toRemove => result.removeRange(toRemove));\n\t\treturn result;\n\t}\n\n\tcontains(item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tremoveRange(toRemove) {\n\t\tif(toRemove.start===toRemove.stop-1) {\n\t\t\tthis.removeOne(toRemove.start);\n\t\t} else if (this.intervals !== null) {\n\t\t\tlet pos = 0;\n\t\t\tfor(let n=0; n<this.intervals.length; n++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (toRemove.stop<=existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if(toRemove.start>existing.start && toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t\tconst x = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t\tthis.intervals.splice(pos, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {\n\t\t\t\t\tthis.intervals.splice(pos, 1);\n\t\t\t\t\tpos = pos - 1; // need another pass\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if(toRemove.start<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if(toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t}\n\t\t\t\tpos += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveOne(value) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\t\tconst existing = this.intervals[i];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (value < existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (value === existing.start && value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (value === existing.start) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start + 1, existing.stop);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if (value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start, existing.stop - 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// split existing range\n\t\t\t\telse if (value < existing.stop - 1) {\n\t\t\t\t\tconst replace = new Interval(existing.start, value);\n\t\t\t\t\texisting.start = value + 1;\n\t\t\t\t\tthis.intervals.splice(i, 0, replace);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if(elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t}\n\n\ttoCharString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'..'\" + String.fromCharCode(existing.stop-1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoIndexString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(existing.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(existing.start.toString() + \"..\" + (existing.stop-1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoTokenString(literalNames, symbolicNames) {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tfor (let j = existing.start; j < existing.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\telementName(literalNames, symbolicNames, token) {\n\t\tif (token === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (token === Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[token] || symbolicNames[token];\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);\n\t}\n}\n\nmodule.exports = {\n\tInterval,\n\tIntervalSet\n};\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set, BitSet} = require('./Utils');\nconst {Token} = require('./Token');\nconst {ATNConfig} = require('./atn/ATNConfig');\nconst {IntervalSet} = require('./IntervalSet');\nconst {RuleStopState} = require('./atn/ATNState');\nconst {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = require('./atn/Transition');\nconst {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = require('./PredictionContext');\n\nclass LL1Analyzer {\n    constructor(atn) {\n        this.atn = atn;\n    }\n\n    /**\n     * Calculates the SLL(1) expected lookahead set for each outgoing transition\n     * of an {@link ATNState}. The returned array has one element for each\n     * outgoing transition in {@code s}. If the closure from transition\n     * <em>i</em> leads to a semantic predicate before matching a symbol, the\n     * element at index <em>i</em> of the result will be {@code null}.\n     *\n     * @param s the ATN state\n     * @return the expected symbols for each outgoing transition of {@code s}.\n     */\n    getDecisionLookahead(s) {\n        if (s === null) {\n            return null;\n        }\n        const count = s.transitions.length;\n        const look = [];\n        for(let alt=0; alt< count; alt++) {\n            look[alt] = new IntervalSet();\n            const lookBusy = new Set();\n            const seeThruPreds = false; // fail to get lookahead upon pred\n            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n            // Wipe out lookahead for this alternative if we found nothing\n            // or we had a predicate when we !seeThruPreds\n            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n                look[alt] = null;\n            }\n        }\n        return look;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and the end of the rule containing\n     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n     * If {@code ctx} is not {@code null} and the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx the complete parser context, or {@code null} if the context\n     * should be ignored\n     *\n     * @return The set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     */\n    LOOK(s, stopState, ctx) {\n        const r = new IntervalSet();\n        const seeThruPreds = true; // ignore preds; get all lookahead\n        ctx = ctx || null;\n        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n        return r;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n     * {@code true} and {@code stopState} or the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state.\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx The outer context, or {@code null} if the outer context should\n     * not be used.\n     * @param look The result lookahead set.\n     * @param lookBusy A set used for preventing epsilon closures in the ATN\n     * from causing a stack overflow. Outside code should pass\n     * {@code new Set<ATNConfig>} for this argument.\n     * @param calledRuleStack A set used for preventing left recursion in the\n     * ATN from causing a stack overflow. Outside code should pass\n     * {@code new BitSet()} for this argument.\n     * @param seeThruPreds {@code true} to true semantic predicates as\n     * implicitly {@code true} and \"see through them\", otherwise {@code false}\n     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n     * result if one is encountered.\n     * @param addEOF Add {@link Token//EOF} to the result if the end of the\n     * outermost context is reached. This parameter has no effect if {@code ctx}\n     * is {@code null}.\n     */\n    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n        if (lookBusy.contains(c)) {\n            return;\n        }\n        lookBusy.add(c);\n        if (s === stopState) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n        }\n        if (s instanceof RuleStopState ) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n            if (ctx !== PredictionContext.EMPTY) {\n                const removed = calledRuleStack.contains(s.ruleIndex);\n                try {\n                    calledRuleStack.remove(s.ruleIndex);\n                    // run thru all possible stack tops in ctx\n                    for (let i = 0; i < ctx.length; i++) {\n                        const returnState = this.atn.states[ctx.getReturnState(i)];\n                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                    }\n                }finally {\n                    if (removed) {\n                        calledRuleStack.add(s.ruleIndex);\n                    }\n                }\n                return;\n            }\n        }\n        for(let j=0; j<s.transitions.length; j++) {\n            const t = s.transitions[j];\n            if (t.constructor === RuleTransition) {\n                if (calledRuleStack.contains(t.target.ruleIndex)) {\n                    continue;\n                }\n                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n                try {\n                    calledRuleStack.add(t.target.ruleIndex);\n                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    calledRuleStack.remove(t.target.ruleIndex);\n                }\n            } else if (t instanceof AbstractPredicateTransition ) {\n                if (seeThruPreds) {\n                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } else {\n                    look.addOne(LL1Analyzer.HIT_PRED);\n                }\n            } else if( t.isEpsilon) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else if (t.constructor === WildcardTransition) {\n                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n            } else {\n                let set = t.label;\n                if (set !== null) {\n                    if (t instanceof NotSetTransition) {\n                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                    }\n                    look.addSet(set);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Special value added to the lookahead sets to indicate that we hit\n * a predicate during analysis if {@code seeThruPreds==false}.\n */\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\nmodule.exports = LL1Analyzer;\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\nconst Recognizer = require('./Recognizer');\nconst CommonTokenFactory = require('./CommonTokenFactory');\nconst {RecognitionException} = require('./error/Errors');\nconst {LexerNoViableAltException} = require('./error/Errors');\n\nclass TokenSource {}\n\n/**\n * A lexer is recognizer that draws input symbols from a character stream.\n * lexer grammars result in a subclass of this object. A Lexer object\n * uses simplified match() and error recovery mechanisms in the interest of speed.\n */\nclass Lexer extends Recognizer {\n\tconstructor(input) {\n\t\tsuper();\n\t\tthis._input = input;\n\t\tthis._factory = CommonTokenFactory.DEFAULT;\n\t\tthis._tokenFactorySourcePair = [ this, input ];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t/**\n\t\t * The goal of all lexer rules/methods is to create a token object.\n\t\t * this is an instance variable as multiple rules may collaborate to\n\t\t * create a single token. nextToken will return this object after\n\t\t * matching lexer rule(s). If you subclass to allow multiple token\n\t\t * emissions, then set this to the last token to be matched or\n\t\t * something nonnull so that the auto token emit mechanism will not\n\t\t * emit another token.\n\t\t */\n\t\tthis._token = null;\n\n\t\t/**\n\t\t * What character index in the stream did the current token start at?\n\t\t * Needed, for example, to get the text for current token. Set at\n\t\t * the start of nextToken.\n\t\t */\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = Token.INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t/**\n\t\t * You can set the text for the current token to override what is in\n\t\t * the input char buffer. Use setText() or can set this instance var.\n\t\t */\n\t\tthis._text = null;\n\t}\n\n\treset() {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = Token.INVALID_TYPE;\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t}\n\n// Return a token from this source; i.e., match a token on the char stream.\n\tnextToken() {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t/**\n\t\t * Mark start location in char stream so unbuffered streams are\n\t\t * guaranteed at least have text of current token\n\t\t */\n\t\tconst tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tlet continueOuter = false;\n\t\t\t\twhile (true) {\n\t\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\t\tlet ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif(e instanceof RecognitionException) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t}\n\n\t/**\n\t * Instruct the lexer to skip creating a token for current lexer rule\n\t * and look for another token. nextToken() knows to keep looking when\n\t * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t * if token==null at end of any token rule, it creates one for you\n\t * and emits it.\n\t */\n\tskip() {\n\t\tthis._type = Lexer.SKIP;\n\t}\n\n\tmore() {\n\t\tthis._type = Lexer.MORE;\n\t}\n\n\tmode(m) {\n\t\tthis._mode = m;\n\t}\n\n\tpushMode(m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t}\n\n\tpopMode() {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * By default does not support multiple emits per nextToken invocation\n\t * for efficiency reasons. Subclass and override this method, nextToken,\n\t * and getToken (to push tokens into a list and pull from that list\n\t * rather than a single variable as this implementation does).\n\t */\n\temitToken(token) {\n\t\tthis._token = token;\n\t}\n\n\t/**\n\t * The standard method called to automatically emit a token at the\n\t * outermost lexical rule. The token object should point into the\n\t * char buffer start..stop. If there is a text override in 'text',\n\t * use that to set the token's text. Override this method to emit\n\t * custom Token objects or provide a new factory.\n\t */\n\temit() {\n\t\tconst t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t}\n\n\temitEOF() {\n\t\tconst cpos = this.column;\n\t\tconst lpos = this.line;\n\t\tconst eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\t\tthis._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t}\n\n// What is the index of the current character of lookahead?///\n\tgetCharIndex() {\n\t\treturn this._input.index;\n\t}\n\n\t/**\n\t * Return a list of all Token objects in input char stream.\n\t * Forces load of all tokens. Does not include EOF token.\n\t */\n\tgetAllTokens() {\n\t\tconst tokens = [];\n\t\tlet t = this.nextToken();\n\t\twhile (t.type !== Token.EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tnotifyListeners(e) {\n\t\tconst start = this._tokenStartCharIndex;\n\t\tconst stop = this._input.index;\n\t\tconst text = this._input.getText(start, stop);\n\t\tconst msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn, msg, e);\n\t}\n\n\tgetErrorDisplay(s) {\n\t\tconst d = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t}\n\n\tgetErrorDisplayForChar(c) {\n\t\tif (c.charCodeAt(0) === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\n\tgetCharErrorDisplay(c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t}\n\n\t/**\n\t * Lexers can normally match any char in it's vocabulary after matching\n\t * a token, so do the easy thing and just kill a character and hope\n\t * it all works out. You can instead use the rule invocation stack\n\t * to do sophisticated error recovery if you are in a fragment rule.\n\t */\n\trecover(re) {\n\t\tif (this._input.LA(1) !== Token.EOF) {\n\t\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t}\n\n\tget inputStream(){\n\t\treturn this._input;\n\t}\n\n\tset inputStream(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n\n\tget sourceName(){\n\t\treturn this._input.sourceName;\n\t}\n\n\tget type(){\n\t\treturn this.type;\n\t}\n\n\tset type(type) {\n\t\tthis._type = type;\n\t}\n\n\tget line(){\n\t\treturn this._interp.line;\n\t}\n\n\tset line(line) {\n\t\tthis._interp.line = line;\n\t}\n\n\tget column(){\n\t\treturn this._interp.column;\n\t}\n\n\tset column(column) {\n\t\tthis._interp.column = column;\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n\n\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n// Set the char stream and reset the lexer\n\n\nmodule.exports = Lexer;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\nconst {ParseTreeListener, TerminalNode, ErrorNode} = require('./tree/Tree');\nconst Recognizer = require('./Recognizer');\nconst {DefaultErrorStrategy} = require('./error/ErrorStrategy');\nconst ATNDeserializer = require('./atn/ATNDeserializer');\nconst ATNDeserializationOptions = require('./atn/ATNDeserializationOptions');\nconst Lexer = require('./Lexer');\n\nclass TraceListener extends ParseTreeListener {\n\tconstructor(parser) {\n\t\tsuper();\n\t\tthis.parser = parser;\n\t}\n\n\tenterEveryRule(ctx) {\n\t\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n\n\tvisitTerminal(node) {\n\t\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n\t}\n\n\texitEveryRule(ctx) {\n\t\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n}\n\nclass Parser extends Recognizer {\n\t/**\n\t * this is all the parsing support code essentially; most of it is error\n\t * recovery stuff.\n\t */\n\tconstructor(input) {\n\t\tsuper();\n\t\t// The input stream.\n\t\tthis._input = null;\n\t\t/**\n\t\t * The error handling strategy for the parser. The default value is a new\n\t\t * instance of {@link DefaultErrorStrategy}.\n\t\t */\n\t\tthis._errHandler = new DefaultErrorStrategy();\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\t/**\n\t\t * The {@link ParserRuleContext} object for the currently executing rule.\n\t\t * this is always non-null during the parsing process.\n\t\t */\n\t\tthis._ctx = null;\n\t\t/**\n\t\t * Specifies whether or not the parser should construct a parse tree during\n\t\t * the parsing process. The default value is {@code true}.\n\t\t */\n\t\tthis.buildParseTrees = true;\n\t\t/**\n\t\t * When {@link //setTrace}{@code (true)} is called, a reference to the\n\t\t * {@link TraceListener} is stored here so it can be easily removed in a\n\t\t * later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t\t * implemented as a parser listener so this field is not directly used by\n\t\t * other parser methods.\n\t\t */\n\t\tthis._tracer = null;\n\t\t/**\n\t\t * The list of {@link ParseTreeListener} listeners registered to receive\n\t\t * events during the parse.\n\t\t */\n\t\tthis._parseListeners = null;\n\t\t/**\n\t\t * The number of syntax errors reported during parsing. this value is\n\t\t * incremented each time {@link //notifyErrorListeners} is called.\n\t\t */\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setInputStream(input);\n\t}\n\n\t// reset the parser's state\n\treset() {\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0);\n\t\t}\n\t\tthis._errHandler.reset(this);\n\t\tthis._ctx = null;\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setTrace(false);\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\tif (this._interp !== null) {\n\t\t\tthis._interp.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Match current input symbol against {@code ttype}. If the symbol type\n\t * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n\t * called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @param ttype the token type to match\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * {@code ttype} and the error strategy could not recover from the\n\t * mismatched symbol\n\t */\n\tmatch(ttype) {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type === ttype) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\t/**\n\t * Match current input symbol as a wildcard. If the symbol type matches\n\t * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n\t * and {@link //consume} are called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * a wildcard and the error strategy could not recover from the mismatched\n\t * symbol\n\t */\n\tmatchWildcard() {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type > 0) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\tgetParseListeners() {\n\t\treturn this._parseListeners || [];\n\t}\n\n\t/**\n\t * Registers {@code listener} to receive events during the parsing process.\n\t *\n\t * <p>To support output-preserving grammar transformations (including but not\n\t * limited to left-recursion removal, automated left-factoring, and\n\t * optimized code generation), calls to listener methods during the parse\n\t * may differ substantially from calls made by\n\t * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n\t * particular, rule entry and exit events may occur in a different order\n\t * during the parse than after the parser. In addition, calls to certain\n\t * rule entry methods may be omitted.</p>\n\t *\n\t * <p>With the following specific exceptions, calls to listener events are\n\t * <em>deterministic</em>, i.e. for identical input the calls to listener\n\t * methods will be the same.</p>\n\t *\n\t * <ul>\n\t * <li>Alterations to the grammar used to generate code may change the\n\t * behavior of the listener calls.</li>\n\t * <li>Alterations to the command line options passed to ANTLR 4 when\n\t * generating the parser may change the behavior of the listener calls.</li>\n\t * <li>Changing the version of the ANTLR Tool used to generate the parser\n\t * may change the behavior of the listener calls.</li>\n\t * </ul>\n\t *\n\t * @param listener the listener to add\n\t *\n\t * @throws NullPointerException if {@code} listener is {@code null}\n\t */\n\taddParseListener(listener) {\n\t\tif (listener === null) {\n\t\t\tthrow \"listener\";\n\t\t}\n\t\tif (this._parseListeners === null) {\n\t\t\tthis._parseListeners = [];\n\t\t}\n\t\tthis._parseListeners.push(listener);\n\t}\n\n\t/**\n\t * Remove {@code listener} from the list of parse listeners.\n\t *\n\t * <p>If {@code listener} is {@code null} or has not been added as a parse\n\t * listener, this method does nothing.</p>\n\t * @param listener the listener to remove\n\t */\n\tremoveParseListener(listener) {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst idx = this._parseListeners.indexOf(listener);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t\t}\n\t\t\tif (this._parseListeners.length === 0) {\n\t\t\t\tthis._parseListeners = null;\n\t\t\t}\n\t\t}\n\t}\n\n// Remove all parse listeners.\n\tremoveParseListeners() {\n\t\tthis._parseListeners = null;\n\t}\n\n// Notify any parse listeners of an enter rule event.\n\ttriggerEnterRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\tlistener.enterEveryRule(ctx);\n\t\t\t\tctx.enterRule(listener);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Notify any parse listeners of an exit rule event.\n\t * @see //addParseListener\n\t */\n\ttriggerExitRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\t// reverse order walk of listeners\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.slice(0).reverse().map(function(listener) {\n\t\t\t\tctx.exitRule(listener);\n\t\t\t\tlistener.exitEveryRule(ctx);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetTokenFactory() {\n\t\treturn this._input.tokenSource._factory;\n\t}\n\n\t// Tell our token source and error strategy about a new way to create tokens.\n\tsetTokenFactory(factory) {\n\t\tthis._input.tokenSource._factory = factory;\n\t}\n\n\t/**\n\t * The ATN with bypass alternatives is expensive to create so we create it\n\t * lazily.\n\t *\n\t * @throws UnsupportedOperationException if the current parser does not\n\t * implement the {@link //getSerializedATN()} method.\n\t */\n\tgetATNWithBypassAlts() {\n\t\tconst serializedAtn = this.getSerializedATN();\n\t\tif (serializedAtn === null) {\n\t\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t\t}\n\t\tlet result = this.bypassAltsAtnCache[serializedAtn];\n\t\tif (result === null) {\n\t\t\tconst deserializationOptions = new ATNDeserializationOptions();\n\t\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\t\tresult = new ATNDeserializer(deserializationOptions)\n\t\t\t\t\t.deserialize(serializedAtn);\n\t\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The preferred method of getting a tree pattern. For example, here's a\n\t * sample use:\n\t *\n\t * <pre>\n\t * ParseTree t = parser.expr();\n\t * ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n\t * MyParser.RULE_expr);\n\t * ParseTreeMatch m = p.match(t);\n\t * String id = m.get(\"ID\");\n\t * </pre>\n\t */\n\tcompileParseTreePattern(pattern, patternRuleIndex, lexer) {\n\t\tlexer = lexer || null;\n\t\tif (lexer === null) {\n\t\t\tif (this.getTokenStream() !== null) {\n\t\t\t\tconst tokenSource = this.getTokenStream().tokenSource;\n\t\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\t\tlexer = tokenSource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (lexer === null) {\n\t\t\tthrow \"Parser can't discover a lexer to use\";\n\t\t}\n\t\tconst m = new ParseTreePatternMatcher(lexer, this);\n\t\treturn m.compile(pattern, patternRuleIndex);\n\t}\n\n\tgetInputStream() {\n\t\treturn this.getTokenStream();\n\t}\n\n\tsetInputStream(input) {\n\t\tthis.setTokenStream(input);\n\t}\n\n\tgetTokenStream() {\n\t\treturn this._input;\n\t}\n\n\t// Set the token stream and reset the parser.\n\tsetTokenStream(input) {\n\t\tthis._input = null;\n\t\tthis.reset();\n\t\tthis._input = input;\n\t}\n\n\t/**\n\t * Match needs to return the current input symbol, which gets put\n\t * into the label for the associated token ref; e.g., x=ID.\n\t */\n\tgetCurrentToken() {\n\t\treturn this._input.LT(1);\n\t}\n\n\tnotifyErrorListeners(msg, offendingToken, err) {\n\t\toffendingToken = offendingToken || null;\n\t\terr = err || null;\n\t\tif (offendingToken === null) {\n\t\t\toffendingToken = this.getCurrentToken();\n\t\t}\n\t\tthis._syntaxErrors += 1;\n\t\tconst line = offendingToken.line;\n\t\tconst column = offendingToken.column;\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n\t}\n\n\t/**\n\t * Consume and return the {@linkplain //getCurrentToken current symbol}.\n\t *\n\t * <p>E.g., given the following input with {@code A} being the current\n\t * lookahead symbol, this function moves the cursor to {@code B} and returns\n\t * {@code A}.</p>\n\t *\n\t * <pre>\n\t * A B\n\t * ^\n\t * </pre>\n\t *\n\t * If the parser is not in error recovery mode, the consumed symbol is added\n\t * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n\t * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n\t * If the parser <em>is</em> in error recovery mode, the consumed symbol is\n\t * added to the parse tree using\n\t * {@link ParserRuleContext//addErrorNode(Token)}, and\n\t * {@link ParseTreeListener//visitErrorNode} is called on any parse\n\t * listeners.\n\t */\n\tconsume() {\n\t\tconst o = this.getCurrentToken();\n\t\tif (o.type !== Token.EOF) {\n\t\t\tthis.getInputStream().consume();\n\t\t}\n\t\tconst hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\t\tif (this.buildParseTrees || hasListener) {\n\t\t\tlet node;\n\t\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t\t} else {\n\t\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t\t}\n\t\t\tnode.invokingState = this.state;\n\t\t\tif (hasListener) {\n\t\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\t\tif (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n\t\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t}\n\n\taddContextToParseTree() {\n\t\t// add current context to parent if we have a parent\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Always called by generated parsers upon entry to a rule. Access field\n\t * {@link //_ctx} get the current context.\n\t */\n\tenterRule(localctx, state, ruleIndex) {\n\t\tthis.state = state;\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = this._input.LT(1);\n\t\tif (this.buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent();\n\t\t}\n\t}\n\n\texitRule() {\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\t// trigger event on _ctx, before it reverts to parent\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t}\n\t\tthis.state = this._ctx.invokingState;\n\t\tthis._ctx = this._ctx.parentCtx;\n\t}\n\n\tenterOuterAlt(localctx, altNum) {\n\t\tlocalctx.setAltNumber(altNum);\n\t\t// if we have new localctx, make sure we replace existing ctx\n\t\t// that is previous child of parse tree\n\t\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\t\tif (this._ctx.parentCtx !== null) {\n\t\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t\t}\n\t\t}\n\t\tthis._ctx = localctx;\n\t}\n\n\t/**\n\t * Get the precedence level for the top-most precedence rule.\n\t *\n\t * @return The precedence level for the top-most precedence rule, or -1 if\n\t * the parser context is not nested within a precedence rule.\n\t */\n\tgetPrecedence() {\n\t\tif (this._precedenceStack.length === 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn this._precedenceStack[this._precedenceStack.length-1];\n\t\t}\n\t}\n\n\tenterRecursionRule(localctx, state, ruleIndex, precedence) {\n\t   this.state = state;\n\t   this._precedenceStack.push(precedence);\n\t   this._ctx = localctx;\n\t   this._ctx.start = this._input.LT(1);\n\t   if (this._parseListeners !== null) {\n\t\t   this.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t   \t\t\t\t\t\t\t\t\t// left-recursive rules\n\t   }\n   }\n\n\t// Like {@link //enterRule} but for recursive rules.\n\tpushNewRecursionContext(localctx, state, ruleIndex) {\n\t\tconst previous = this._ctx;\n\t\tprevious.parentCtx = localctx;\n\t\tprevious.invokingState = state;\n\t\tprevious.stop = this._input.LT(-1);\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = previous.start;\n\t\tif (this.buildParseTrees) {\n\t\t\tthis._ctx.addChild(previous);\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t\t}\n\t}\n\n\tunrollRecursionContexts(parentCtx) {\n\t\tthis._precedenceStack.pop();\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\tconst retCtx = this._ctx; // save current ctx (return value)\n\t\t// unroll so _ctx is as it was before call to recursive method\n\t\tif (this._parseListeners !== null) {\n\t\t\twhile (this._ctx !== parentCtx) {\n\t\t\t\tthis.triggerExitRuleEvent();\n\t\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ctx = parentCtx;\n\t\t}\n\t\t// hook into tree\n\t\tretCtx.parentCtx = parentCtx;\n\t\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t\t// add return ctx into invoking rule's tree\n\t\t\tparentCtx.addChild(retCtx);\n\t\t}\n\t}\n\n\tgetInvokingContext(ruleIndex) {\n\t\tlet ctx = this._ctx;\n\t\twhile (ctx !== null) {\n\t\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\t\treturn ctx;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprecpred(localctx, precedence) {\n\t\treturn precedence >= this._precedenceStack[this._precedenceStack.length-1];\n\t}\n\n\tinContext(context) {\n\t\t// TODO: useful in parser?\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether or not {@code symbol} can follow the current state in the\n\t * ATN. The behavior of this method is equivalent to the following, but is\n\t * implemented such that the complete context-sensitive follow set does not\n\t * need to be explicitly constructed.\n\t *\n\t * <pre>\n\t * return getExpectedTokens().contains(symbol);\n\t * </pre>\n\t *\n\t * @param symbol the symbol type to check\n\t * @return {@code true} if {@code symbol} can follow the current state in\n\t * the ATN, otherwise {@code false}.\n\t */\n\tisExpectedToken(symbol) {\n\t\tconst atn = this._interp.atn;\n\t\tlet ctx = this._ctx;\n\t\tconst s = atn.states[this.state];\n\t\tlet following = atn.nextTokens(s);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!following.contains(Token.EPSILON)) {\n\t\t\treturn false;\n\t\t}\n\t\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\t\tconst invokingState = atn.states[ctx.invokingState];\n\t\t\tconst rt = invokingState.transitions[0];\n\t\t\tfollowing = atn.nextTokens(rt.followState);\n\t\t\tif (following.contains(symbol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Computes the set of input symbols which could follow the current parser\n\t * state and context, as given by {@link //getState} and {@link //getContext},\n\t * respectively.\n\t *\n\t * @see ATN//getExpectedTokens(int, RuleContext)\n\t */\n\tgetExpectedTokens() {\n\t\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n\t}\n\n\tgetExpectedTokensWithinCurrentRule() {\n\t\tconst atn = this._interp.atn;\n\t\tconst s = atn.states[this.state];\n\t\treturn atn.nextTokens(s);\n\t}\n\n\t// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.\n\tgetRuleIndex(ruleName) {\n\t\tconst ruleIndex = this.getRuleIndexMap()[ruleName];\n\t\tif (ruleIndex !== null) {\n\t\t\treturn ruleIndex;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return List&lt;String&gt; of the rule names in your parser instance\n\t * leading up to a call to the current rule. You could override if\n\t * you want more details such as the file/line info of where\n\t * in the ATN a rule is invoked.\n\t *\n\t * this is very useful for error messages.\n\t */\n\tgetRuleInvocationStack(p) {\n\t\tp = p || null;\n\t\tif (p === null) {\n\t\t\tp = this._ctx;\n\t\t}\n\t\tconst stack = [];\n\t\twhile (p !== null) {\n\t\t\t// compute what follows who invoked us\n\t\t\tconst ruleIndex = p.ruleIndex;\n\t\t\tif (ruleIndex < 0) {\n\t\t\t\tstack.push(\"n/a\");\n\t\t\t} else {\n\t\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\treturn stack;\n\t}\n\n\t// For debugging and other purposes.\n\tgetDFAStrings() {\n\t\treturn this._interp.decisionToDFA.toString();\n\t}\n\n\t// For debugging and other purposes.\n\tdumpDFA() {\n\t\tlet seenOne = false;\n\t\tfor (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\t\tconst dfa = this._interp.decisionToDFA[i];\n\t\t\tif (dfa.states.length > 0) {\n\t\t\t\tif (seenOne) {\n\t\t\t\t\tconsole.log();\n\t\t\t\t}\n\t\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\t\tseenOne = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t\t\"\t\t\tprinter = function() {\\r\\n\" +\n\t\t\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\t\t\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\t\t\"\t\t\t};\\r\\n\" +\n\t\t*/\n\tgetSourceName() {\n\t\treturn this._input.sourceName;\n\t}\n\n\t/**\n\t * During a parse is sometimes useful to listen in on the rule entry and exit\n\t * events as well as token matches. this is for quick and dirty debugging.\n\t */\n\tsetTrace(trace) {\n\t\tif (!trace) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t\tthis._tracer = null;\n\t\t} else {\n\t\t\tif (this._tracer !== null) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t}\n\t\t\tthis._tracer = new TraceListener(this);\n\t\t\tthis.addParseListener(this._tracer);\n\t\t}\n\t}\n}\n\n/**\n * this field maps from the serialized ATN string to the deserialized {@link\n * ATN} with\n * bypass alternatives.\n *\n * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n */\nParser.bypassAltsAtnCache = {};\n\nmodule.exports = Parser;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = require('./RuleContext');\nconst Tree = require('./tree/Tree');\nconst INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nconst TerminalNode = Tree.TerminalNode;\nconst TerminalNodeImpl = Tree.TerminalNodeImpl;\nconst ErrorNodeImpl = Tree.ErrorNodeImpl;\nconst Interval = require(\"./IntervalSet\").Interval;\n\n/**\n * A rule invocation record for parsing.\n *\n *  Contains all of the information about the current rule not stored in the\n *  RuleContext. It handles parse tree children list, Any ATN state\n *  tracing, and the default values available for rule indications:\n *  start, stop, rule index, current alt number, current\n *  ATN state.\n *\n *  Subclasses made for each rule and grammar track the parameters,\n *  return values, locals, and labels specific to that rule. These\n *  are the objects that are returned from rules.\n *\n *  Note text is not an actual field of a rule return value; it is computed\n *  from start and stop using the input stream's toString() method.  I\n *  could add a ctor to this so that we can pass in and store the input\n *  stream, but I'm not sure we want to do that.  It would seem to be undefined\n *  to get the .text property anyway if the rule matches tokens from multiple\n *  input streams.\n *\n *  I do not use getters for fields of objects that are used simply to\n *  group values such as this aggregate.  The getters/setters are there to\n *  satisfy the superclass interface.\n */\nclass ParserRuleContext extends RuleContext {\n\tconstructor(parent, invokingStateNumber) {\n\t\tparent = parent || null;\n\t\tinvokingStateNumber = invokingStateNumber || null;\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = -1;\n\t\t/**\n\t\t * If we are debugging or building a parse tree for a visitor,\n\t\t * we need to track all of the tokens and rule invocations associated\n\t\t * with this rule's context. This is empty for parsing w/o tree constr.\n\t\t * operation because we don't the need to track the details about\n\t\t * how we parse this rule.\n\t\t */\n\t\tthis.children = null;\n\t\tthis.start = null;\n\t\tthis.stop = null;\n\t\t/**\n\t\t * The exception that forced this rule to return. If the rule successfully\n\t\t * completed, this is {@code null}.\n\t\t */\n\t\tthis.exception = null;\n\t}\n\n\t// COPY a ctx (I'm deliberately not using copy constructor)\n\tcopyFrom(ctx) {\n\t\t// from RuleContext\n\t\tthis.parentCtx = ctx.parentCtx;\n\t\tthis.invokingState = ctx.invokingState;\n\t\tthis.children = null;\n\t\tthis.start = ctx.start;\n\t\tthis.stop = ctx.stop;\n\t\t// copy any error nodes to alt label node\n\t\tif(ctx.children) {\n\t\t\tthis.children = [];\n\t\t\t// reset parent pointer for any error nodes\n\t\t\tctx.children.map(function(child) {\n\t\t\t\tif (child instanceof ErrorNodeImpl) {\n\t\t\t\t\tthis.children.push(child);\n\t\t\t\t\tchild.parentCtx = this;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t// Double dispatch methods for listeners\n\tenterRule(listener) {\n\t}\n\n\texitRule(listener) {\n\t}\n\n\t// Does not set parent link; other add methods do that\n\taddChild(child) {\n\t\tif (this.children === null) {\n\t\t\tthis.children = [];\n\t\t}\n\t\tthis.children.push(child);\n\t\treturn child;\n\t}\n\n\t/** Used by enterOuterAlt to toss out a RuleContext previously added as\n\t * we entered a rule. If we have // label, we will need to remove\n\t * generic ruleContext object.\n\t */\n\tremoveLastChild() {\n\t\tif (this.children !== null) {\n\t\t\tthis.children.pop();\n\t\t}\n\t}\n\n\taddTokenNode(token) {\n\t\tconst node = new TerminalNodeImpl(token);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\taddErrorNode(badToken) {\n\t\tconst node = new ErrorNodeImpl(badToken);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\tgetChild(i, type) {\n\t\ttype = type || null;\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type === null) {\n\t\t\treturn this.children[i];\n\t\t} else {\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif(child instanceof type) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetToken(ttype, i) {\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\tconst child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetTokens(ttype ) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst tokens = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\t\ttokens.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tgetTypedRuleContext(ctxType, i) {\n\t\treturn this.getChild(i, ctxType);\n\t}\n\n\tgetTypedRuleContexts(ctxType) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst contexts = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof ctxType) {\n\t\t\t\t\tcontexts.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn contexts;\n\t\t}\n\t}\n\n\tgetChildCount() {\n\t\tif (this.children=== null) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.children.length;\n\t\t}\n\t}\n\n\tgetSourceInterval() {\n\t\tif( this.start === null || this.stop === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t} else {\n\t\t\treturn new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n\t\t}\n\t}\n}\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nclass InterpreterRuleContext extends ParserRuleContext {\n\tconstructor(parent, invokingStateNumber, ruleIndex) {\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = ruleIndex;\n\t}\n}\n\nmodule.exports = ParserRuleContext;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = require('./RuleContext');\nconst {Hash, Map, equalArrays} = require('./Utils');\n\nclass PredictionContext {\n\n\tconstructor(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * <pre>\n\t * private int referenceHashCode() {\n\t * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t * //INITIAL_HASH});\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t * getParent}(i));\n\t * }\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t * //getReturnState getReturnState}(i));\n\t * }\n\t *\n\t * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t * //size()});\n\t * return hash;\n\t * }\n\t * </pre>\n\t * This means only the {@link //EMPTY} context is in set.\n\t */\n\tisEmpty() {\n\t\treturn this === PredictionContext.EMPTY;\n\t}\n\n\thasEmptyPath() {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n}\n\n/**\n * Represents {@code $} in local context prediction, which means wildcard.\n * {@code//+x =//}.\n */\nPredictionContext.EMPTY = null;\n\n/**\n * Represents {@code $} in an array in full context mode, when {@code $}\n * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n * {@code $} = {@link //EMPTY_RETURN_STATE}.\n */\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n/**\n * Used to cache {@link PredictionContext} objects. Its used for the shared\n * context cash associated with contexts in DFA states. This cache\n * can be used for both lexers and parsers.\n */\nclass PredictionContextCache {\n\n\tconstructor() {\n\t\tthis.cache = new Map();\n\t}\n\n\t/**\n\t * Add a context to the cache and return it. If the context already exists,\n\t * return that one instead and do not add a new context to the cache.\n\t * Protect shared cache from unsafe thread access.\n\t */\n\tadd(ctx) {\n\t\tif (ctx === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY;\n\t\t}\n\t\tconst existing = this.cache.get(ctx) || null;\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\tthis.cache.put(ctx, ctx);\n\t\treturn ctx;\n\t}\n\n\tget(ctx) {\n\t\treturn this.cache.get(ctx) || null;\n\t}\n\n\tget length(){\n\t\treturn this.cache.length;\n\t}\n}\n\n\nclass SingletonPredictionContext extends PredictionContext {\n\n\tconstructor(parent, returnState) {\n\t\tlet hashCode = 0;\n\t\tconst hash = new Hash();\n\t\tif(parent !== null) {\n\t\t\thash.update(parent, returnState);\n\t\t} else {\n\t\t\thash.update(1);\n\t\t}\n\t\thashCode = hash.finish();\n\t\tsuper(hashCode);\n\t\tthis.parentCtx = parent;\n\t\tthis.returnState = returnState;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\tif(this.returnState !== other.returnState)\n\t\t\t\treturn false;\n\t\t\telse if(this.parentCtx==null)\n\t\t\t\treturn other.parentCtx==null\n\t\t\telse\n\t\t\t\treturn this.parentCtx.equals(other.parentCtx);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tconst up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\t\tif (up.length === 0) {\n\t\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\treturn \"$\";\n\t\t\t} else {\n\t\t\t\treturn \"\" + this.returnState;\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\" + this.returnState + \" \" + up;\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn 1;\n\t}\n\n\tstatic create(parent, returnState) {\n\t\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t\t// someone can pass in the bits of an array ctx that mean $\n\t\t\treturn PredictionContext.EMPTY;\n\t\t} else {\n\t\t\treturn new SingletonPredictionContext(parent, returnState);\n\t\t}\n\t}\n}\n\nclass EmptyPredictionContext extends SingletonPredictionContext {\n\n\tconstructor() {\n\t\tsuper(null, PredictionContext.EMPTY_RETURN_STATE);\n\t}\n\n\tisEmpty() {\n\t\treturn true;\n\t}\n\n\tgetParent(index) {\n\t\treturn null;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\treturn this === other;\n\t}\n\n\ttoString() {\n\t\treturn \"$\";\n\t}\n}\n\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nclass ArrayPredictionContext extends PredictionContext {\n\n\tconstructor(parents, returnStates) {\n\t\t/**\n\t\t * Parent can be null only if full ctx mode and we make an array\n\t\t * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t\t * null parent and\n\t\t * returnState == {@link //EMPTY_RETURN_STATE}.\n\t\t */\n\t\tconst h = new Hash();\n\t\th.update(parents, returnStates);\n\t\tconst hashCode = h.finish();\n\t\tsuper(hashCode);\n\t\tthis.parents = parents;\n\t\tthis.returnStates = returnStates;\n\t\treturn this;\n\t}\n\n\tisEmpty() {\n\t\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t\t// don't need to verify that size==1\n\t\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parents[index];\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnStates[index];\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\treturn equalArrays(this.returnStates, other.returnStates) &&\n\t\t\t\tequalArrays(this.parents, other.parents);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.isEmpty()) {\n\t\t\treturn \"[]\";\n\t\t} else {\n\t\t\tlet s = \"[\";\n\t\t\tfor (let i = 0; i < this.returnStates.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ts = s + \", \";\n\t\t\t\t}\n\t\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\ts = s + \"$\";\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ts = s + this.returnStates[i];\n\t\t\t\tif (this.parents[i] !== null) {\n\t\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t\t} else {\n\t\t\t\t\ts = s + \"null\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s + \"]\";\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.returnStates.length;\n\t}\n}\n\n\n/**\n * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n * Return {@link //EMPTY} if {@code outerContext} is empty or null.\n */\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tconst parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tconst state = atn.states[outerContext.invokingState];\n\tconst transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tconst s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n/**\n * Merge two {@link SingletonPredictionContext} instances.\n *\n * <p>Stack tops equal, parents merge is same; return left graph.<br>\n * <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Same stack top, parents differ; merge parents giving array node, then\n * remainders of those graphs. A new root node is created to point to the\n * merged parents.<br>\n * <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to same parent. Make array node for the\n * root where both element in the root point to the same (original)\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to different parents. Make array node for\n * the root where each element points to the corresponding original\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n * @param mergeCache\n */\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tconst rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tconst parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tconst spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else { // a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tlet singleParent = null;\n\t\tif (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bx =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) { // parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tconst parents = [ singleParent, singleParent ];\n\t\t\tconst apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\tlet parents = [ a.parentCtx, b.parentCtx ];\n\t\tif (a.returnState > b.returnState) { // sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [ b.parentCtx, a.parentCtx ];\n\t\t}\n\t\tconst a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n/**\n * Handle case where at least one of {@code a} or {@code b} is\n * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n * to represent {@link //EMPTY}.\n *\n * <h2>Local-Context Merges</h2>\n *\n * <p>These local-context merge operations are used when {@code rootIsWildcard}\n * is true.</p>\n *\n * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n * <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n * {@code //EMPTY}; return left graph.<br>\n * <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Special case of last merge if local context.<br>\n * <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <h2>Full-Context Merges</h2>\n *\n * <p>These full-context merge operations are used when {@code rootIsWildcard}\n * is false.</p>\n *\n * <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n * null parent).<br>\n * <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n */\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n\t\t\tconst payloads = [ b.returnState,\n\t\t\t\t\tPredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ b.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n\t\t\tconst payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ a.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Merge two {@link ArrayPredictionContext} instances.\n *\n * <p>Different tops, different parents.<br>\n * <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, same parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, different parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, all shared parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Equal tops, merge parents and reduce top to\n * {@link SingletonPredictionContext}.<br>\n * <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n */\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tlet i = 0; // walks a\n\tlet j = 0; // walks b\n\tlet k = 0; // walks target M array\n\n\tlet mergedReturnStates = [];\n\tlet mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tconst a_parent = a.parents[i];\n\t\tconst b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tconst payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tconst bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n\t\t\t\t\ta_parent === null && b_parent === null;\n\t\t\tconst ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else { // ax+ay -> a'[x,y]\n\t\t\t\tmergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else { // b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (let p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (let p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) { // write index < last position; trim\n\t\tif (k === 1) { // for just one merged element, return singleton top\n\t\t\tconst a_ = SingletonPredictionContext.create(mergedParents[0],\n\t\t\t\t\tmergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tconst M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n/**\n * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n * ones.\n */\nfunction combineCommonParents(parents) {\n\tconst uniqueParents = new Map();\n\n\tfor (let p = 0; p < parents.length; p++) {\n\t\tconst parent = parents[p];\n\t\tif (!(uniqueParents.containsKey(parent))) {\n\t\t\tuniqueParents.put(parent, parent);\n\t\t}\n\t}\n\tfor (let q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents.get(parents[q]);\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tlet existing = visited.get(context) || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited.put(context, existing);\n\t\treturn existing;\n\t}\n\tlet changed = false;\n\tlet parents = [];\n\tfor (let i = 0; i < parents.length; i++) {\n\t\tconst parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (let j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited.put(context, context);\n\t\treturn context;\n\t}\n\tlet updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context\n\t\t\t\t.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited.put(updated, updated);\n\tvisited.put(context, updated);\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = new Map();\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited.containsKey(context)) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited.put(context, context);\n\t\tnodes.push(context);\n\t\tfor (let i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nmodule.exports = {\n\tmerge,\n\tPredictionContext,\n\tPredictionContextCache,\n\tSingletonPredictionContext,\n\tpredictionContextFromRuleContext,\n\tgetCachedPredictionContext\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./Token');\nconst {ConsoleErrorListener} = require('./error/ErrorListener');\nconst {ProxyErrorListener} = require('./error/ErrorListener');\n\nclass Recognizer {\n    constructor() {\n        this._listeners = [ ConsoleErrorListener.INSTANCE ];\n        this._interp = null;\n        this._stateNumber = -1;\n    }\n\n    checkVersion(toolVersion) {\n        const runtimeVersion = \"4.9.2\";\n        if (runtimeVersion!==toolVersion) {\n            console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n        }\n    }\n\n    addErrorListener(listener) {\n        this._listeners.push(listener);\n    }\n\n    removeErrorListeners() {\n        this._listeners = [];\n    }\n\n    getTokenTypeMap() {\n        const tokenNames = this.getTokenNames();\n        if (tokenNames===null) {\n            throw(\"The current recognizer does not provide a list of token names.\");\n        }\n        let result = this.tokenTypeMapCache[tokenNames];\n        if(result===undefined) {\n            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n            result.EOF = Token.EOF;\n            this.tokenTypeMapCache[tokenNames] = result;\n        }\n        return result;\n    }\n\n    /**\n     * Get a map from rule names to rule indexes.\n     * <p>Used for XPath and tree pattern compilation.</p>\n     */\n    getRuleIndexMap() {\n        const ruleNames = this.ruleNames;\n        if (ruleNames===null) {\n            throw(\"The current recognizer does not provide a list of rule names.\");\n        }\n        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?\n        if(result===undefined) {\n            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n            this.ruleIndexMapCache[ruleNames] = result;\n        }\n        return result;\n    }\n\n    getTokenType(tokenName) {\n        const ttype = this.getTokenTypeMap()[tokenName];\n        if (ttype !==undefined) {\n            return ttype;\n        } else {\n            return Token.INVALID_TYPE;\n        }\n    }\n\n    // What is the error header, normally line/character position information?\n    getErrorHeader(e) {\n        const line = e.getOffendingToken().line;\n        const column = e.getOffendingToken().column;\n        return \"line \" + line + \":\" + column;\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out.  Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     *\n     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n     * implementations of {@link ANTLRErrorStrategy} may provide a similar\n     * feature when necessary. For example, see\n     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/\n    getTokenErrorDisplay(t) {\n        if (t===null) {\n            return \"<no token>\";\n        }\n        let s = t.text;\n        if (s===null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    getErrorListenerDispatch() {\n        return new ProxyErrorListener(this._listeners);\n    }\n\n    /**\n     * subclass needs to override these if there are sempreds or actions\n     * that the ATN interp needs to execute\n     */\n    sempred(localctx, ruleIndex, actionIndex) {\n        return true;\n    }\n\n    precpred(localctx , precedence) {\n        return true;\n    }\n\n    get state(){\n        return this._stateNumber;\n    }\n\n    set state(state) {\n        this._stateNumber = state;\n    }\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nmodule.exports = Recognizer;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {RuleNode} = require('./tree/Tree');\nconst {INVALID_INTERVAL} = require('./tree/Tree');\nconst Trees = require('./tree/Trees');\n\nclass RuleContext extends RuleNode {\n\t/** A rule context is a record of a single rule invocation. It knows\n\t * which context invoked it, if any. If there is no parent context, then\n\t * naturally the invoking state is not valid.  The parent link\n\t * provides a chain upwards from the current rule invocation to the root\n\t * of the invocation tree, forming a stack. We actually carry no\n\t * information about the rule associated with this context (except\n\t * when parsing). We keep only the state number of the invoking state from\n\t * the ATN submachine that invoked this. Contrast this with the s\n\t * pointer inside ParserRuleContext that tracks the current state\n\t * being \"executed\" for the current rule.\n\t *\n\t * The parent contexts are useful for computing lookahead sets and\n\t * getting error information.\n\t *\n\t * These objects are used during parsing and prediction.\n\t * For the special case of parsers, we use the subclass\n\t * ParserRuleContext.\n\t *\n\t * @see ParserRuleContext\n\t */\n\tconstructor(parent, invokingState) {\n\t\t// What context invoked this rule?\n\t\tsuper();\n\t\tthis.parentCtx = parent || null;\n\t\t/**\n\t\t * What state invoked the rule associated with this context?\n\t\t * The \"return address\" is the followState of invokingState\n\t\t * If parent is null, this should be -1.\n\t\t */\n\t\tthis.invokingState = invokingState || -1;\n\t}\n\n\tdepth() {\n\t\tlet n = 0;\n\t\tlet p = this;\n\t\twhile (p !== null) {\n\t\t\tp = p.parentCtx;\n\t\t\tn += 1;\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * A context is empty if there is no invoking state; meaning nobody call\n\t * current context.\n\t */\n\tisEmpty() {\n\t\treturn this.invokingState === -1;\n\t}\n\n// satisfy the ParseTree / SyntaxTree interface\n\tgetSourceInterval() {\n\t\treturn INVALID_INTERVAL;\n\t}\n\n\tgetRuleContext() {\n\t\treturn this;\n\t}\n\n\tgetPayload() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the combined text of all child nodes. This method only considers\n\t * tokens which have been added to the parse tree.\n\t * <p>\n\t * Since tokens on hidden channels (e.g. whitespace or comments) are not\n\t * added to the parse trees, they will not appear in the output of this\n\t * method.\n\t */\n\tgetText() {\n\t\tif (this.getChildCount() === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.children.map(function(child) {\n\t\t\t\treturn child.getText();\n\t\t\t}).join(\"\");\n\t\t}\n\t}\n\n\t/**\n\t * For rule associated with this parse tree internal node, return\n\t * the outer alternative number used to match the input. Default\n\t * implementation does not compute nor store this alt num. Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t * to set it.\n\t */\n\tgetAltNumber() {\n\t    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n\t    return 0;\n    }\n\n\t/**\n\t * Set the outer alternative number for this context node. Default\n\t * implementation does nothing to avoid backing field overhead for\n\t * trees that don't need it.  Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t */\n\tsetAltNumber(altNumber) { }\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitChildren(this);\n\t}\n\n\t/**\n\t * Print out a whole tree, not just a node, in LISP format\n\t * (root child1 .. childN). Print just a node if this is a leaf.\n\t */\n\ttoStringTree(ruleNames, recog) {\n\t\treturn Trees.toStringTree(this, ruleNames, recog);\n\t}\n\n\ttoString(ruleNames, stop) {\n\t\truleNames = ruleNames || null;\n\t\tstop = stop || null;\n\t\tlet p = this;\n\t\tlet s = \"[\";\n\t\twhile (p !== null && p !== stop) {\n\t\t\tif (ruleNames === null) {\n\t\t\t\tif (!p.isEmpty()) {\n\t\t\t\t\ts += p.invokingState;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ri = p.ruleIndex;\n\t\t\t\tconst ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n\t\t\t\t\t\t: \"\" + ri;\n\t\t\t\ts += ruleName;\n\t\t\t}\n\t\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\t\ts += \" \";\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\ts += \"]\";\n\t\treturn s;\n\t}\n}\n\nmodule.exports = RuleContext;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A token has properties: text, type, line, character position in the line\n * (so we can ignore tabs), token channel, index, and source from which\n * we obtained this token.\n */\nclass Token {\n\tconstructor() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t}\n\n\tgetTokenSource() {\n\t\treturn this.source[0];\n\t}\n\n\tgetInputStream() {\n\t\treturn this.source[1];\n\t}\n\n\tget text(){\n\t\treturn this._text;\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\nToken.INVALID_TYPE = 0;\n\n/**\n * During lookahead operations, this \"token\" signifies we hit rule end ATN state\n * and did not follow it despite needing to.\n */\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n/**\n * All tokens go to the parser (unless skip() is called in that rule)\n * on a particular \"channel\". The parser tunes to a particular channel\n * so that whitespace etc... can go to the parser on a \"hidden\" channel.\n */\nToken.DEFAULT_CHANNEL = 0;\n\n/**\n * Anything on different channel than DEFAULT_CHANNEL is not parsed\n * by parser.\n */\nToken.HIDDEN_CHANNEL = 1;\n\n\nclass CommonToken extends Token {\n\tconstructor(source, type, channel, start, stop) {\n\t\tsuper();\n\t\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\t\tthis.type = type !== undefined ? type : null;\n\t\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\t\tthis.start = start !== undefined ? start : -1;\n\t\tthis.stop = stop !== undefined ? stop : -1;\n\t\tthis.tokenIndex = -1;\n\t\tif (this.source[0] !== null) {\n\t\t\tthis.line = source[0].line;\n\t\t\tthis.column = source[0].column;\n\t\t} else {\n\t\t\tthis.column = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n\t *\n\t * <p>\n\t * If {@code oldToken} is also a {@link CommonToken} instance, the newly\n\t * constructed token will share a reference to the {@link //text} field and\n\t * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n\t * be assigned the result of calling {@link //getText}, and {@link //source}\n\t * will be constructed from the result of {@link Token//getTokenSource} and\n\t * {@link Token//getInputStream}.</p>\n\t *\n\t * @param oldToken The token to copy.\n\t */\n\tclone() {\n\t\tconst t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n\t\tt.tokenIndex = this.tokenIndex;\n\t\tt.line = this.line;\n\t\tt.column = this.column;\n\t\tt.text = this.text;\n\t\treturn t;\n\t}\n\n\ttoString() {\n\t\tlet txt = this.text;\n\t\tif (txt !== null) {\n\t\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t\t} else {\n\t\t\ttxt = \"<no text>\";\n\t\t}\n\t\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n\t\t\t\ttxt + \"',<\" + this.type + \">\" +\n\t\t\t\t(this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n\t\t\t\tthis.line + \":\" + this.column + \"]\";\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tconst input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tconst n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n/**\n * An empty {@link Pair} which is used as the default value of\n * {@link //source} for tokens that do not have a source.\n */\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\nmodule.exports = {\n\tToken,\n\tCommonToken\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction arrayToString(a) {\n    return Array.isArray(a) ? (\"[\" + a.join(\", \") + \"]\") : \"null\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a==b;\n}\n\nfunction standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n\nclass Set {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    add(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    contains(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    toString() {\n        return arrayToString(this.values());\n    }\n\n    get length(){\n        let l = 0;\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass BitSet {\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        const bits = this;\n        Object.keys(set.data).map(function (alt) {\n            bits.add(alt);\n        });\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    contains(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        hash.update(this.values());\n        return hash.finish();\n    }\n\n    equals(other) {\n        if (!(other instanceof BitSet)) {\n            return false;\n        }\n        return this.hashCode() === other.hashCode();\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n\n\nclass Map {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    put(key, value) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    getKeys() {\n        return this.entries().map(function(e) {\n            return e.key;\n        });\n    }\n\n    getValues() {\n        return this.entries().map(function(e) {\n                return e.value;\n        });\n    }\n\n    toString() {\n        const ss = this.entries().map(function(entry) {\n            return '{' + entry.key + ':' + entry.value + '}';\n        });\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length(){\n        let l = 0;\n        for (const hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass AltDict {\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        key = \"k-\" + key;\n        if (key in this.data) {\n            return this.data[key];\n        } else {\n            return null;\n        }\n    }\n\n    put(key, value) {\n        key = \"k-\" + key;\n        this.data[key] = value;\n    }\n\n    values() {\n        const data = this.data;\n        const keys = Object.keys(this.data);\n        return keys.map(function (key) {\n            return data[key];\n        });\n    }\n}\n\n\nclass DoubleDict {\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || Map;\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.put(a, d);\n        }\n        d.put(b, o);\n    }\n}\n\nclass Hash {\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n}\n\nfunction hashStuff() {\n    const hash = new Hash();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n}\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n         .replace(/\\n/g, \"\\\\n\")\n         .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n}\n\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    Hash,\n    Set,\n    Map,\n    BitSet,\n    AltDict,\n    DoubleDict,\n    hashStuff,\n    escapeWhitespace,\n    arrayToString,\n    titleCase,\n    equalArrays\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LL1Analyzer = require('./../LL1Analyzer');\nconst {IntervalSet} = require('./../IntervalSet');\nconst {Token} = require('./../Token');\n\nclass ATN {\n\n    constructor(grammarType , maxTokenType) {\n        /**\n         * Used for runtime deserialization of ATNs from strings\n         * The type of the ATN.\n        */\n        this.grammarType = grammarType;\n        // The maximum value for any symbol recognized by a transition in the ATN.\n        this.maxTokenType = maxTokenType;\n        this.states = [];\n        /**\n         * Each subrule/rule is a decision point and we must track them so we\n         * can go back later and build DFA predictors for them.  This includes\n         * all the rules, subrules, optional blocks, ()+, ()* etc...\n         */\n        this.decisionToState = [];\n        // Maps from rule index to starting state number.\n        this.ruleToStartState = [];\n        // Maps from rule index to stop state number.\n        this.ruleToStopState = null;\n        this.modeNameToStartState = {};\n        /**\n         * For lexer ATNs, this maps the rule index to the resulting token type.\n         * For parser ATNs, this maps the rule index to the generated bypass token\n         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n         * deserialization option was specified; otherwise, this is {@code null}\n         */\n        this.ruleToTokenType = null;\n        /**\n         * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n         * be referenced by action transitions in the ATN\n         */\n        this.lexerActions = null;\n        this.modeToStartState = [];\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in state {@code s}.\n     * If {@code ctx} is null, the set of tokens will not include what can follow\n     * the rule surrounding {@code s}. In other words, the set will be\n     * restricted to tokens reachable staying within {@code s}'s rule\n     */\n    nextTokensInContext(s, ctx) {\n        const anal = new LL1Analyzer(this);\n        return anal.LOOK(s, null, ctx);\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in {@code s} and\n     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n     * rule\n     */\n    nextTokensNoContext(s) {\n        if (s.nextTokenWithinRule !== null ) {\n            return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n        s.nextTokenWithinRule.readOnly = true;\n        return s.nextTokenWithinRule;\n    }\n\n    nextTokens(s, ctx) {\n        if ( ctx===undefined ) {\n            return this.nextTokensNoContext(s);\n        } else {\n            return this.nextTokensInContext(s, ctx);\n        }\n    }\n\n    addState(state) {\n        if ( state !== null ) {\n            state.atn = this;\n            state.stateNumber = this.states.length;\n        }\n        this.states.push(state);\n    }\n\n    removeState(state) {\n        this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n    }\n\n    defineDecisionState(s) {\n        this.decisionToState.push(s);\n        s.decision = this.decisionToState.length-1;\n        return s.decision;\n    }\n\n    getDecisionState(decision) {\n        if (this.decisionToState.length===0) {\n            return null;\n        } else {\n            return this.decisionToState[decision];\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow ATN state number\n     * {@code stateNumber} in the specified full {@code context}. This method\n     * considers the complete parser context, but does not evaluate semantic\n     * predicates (i.e. all predicates encountered during the calculation are\n     * assumed true). If a path in the ATN exists from the starting state to the\n     * {@link RuleStopState} of the outermost context without matching any\n     * symbols, {@link Token//EOF} is added to the returned set.\n     *\n     * <p>If {@code context} is {@code null}, it is treated as\n     * {@link ParserRuleContext//EMPTY}.</p>\n     *\n     * @param stateNumber the ATN state number\n     * @param ctx the full parse context\n     *\n     * @return {IntervalSet} The set of potentially valid input symbols which could follow the\n     * specified state in the specified context.\n     *\n     * @throws IllegalArgumentException if the ATN does not contain a state with\n     * number {@code stateNumber}\n     */\n    getExpectedTokens(stateNumber, ctx ) {\n        if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n            throw(\"Invalid state number.\");\n        }\n        const s = this.states[stateNumber];\n        let following = this.nextTokens(s);\n        if (!following.contains(Token.EPSILON)) {\n            return following;\n        }\n        const expected = new IntervalSet();\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n            const invokingState = this.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = this.nextTokens(rt.followState);\n            expected.addSet(following);\n            expected.removeOne(Token.EPSILON);\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(Token.EPSILON)) {\n            expected.addOne(Token.EOF);\n        }\n        return expected;\n    }\n}\n\nATN.INVALID_ALT_NUMBER = 0;\n\nmodule.exports = ATN;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DecisionState} = require('./ATNState');\nconst {SemanticContext} = require('./SemanticContext');\nconst {Hash} = require(\"../Utils\");\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tconst result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tconst props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nclass ATNConfig {\n    /**\n     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).\n     * The syntactic context is a graph-structured stack node whose\n     * path(s) to the root is the rule invocation(s)\n     * chain used to arrive at the state.  The semantic context is\n     * the tree of semantic predicates encountered before reaching\n     * an ATN state\n     */\n    constructor(params, config) {\n        this.checkContext(params, config);\n        params = checkParams(params);\n        config = checkParams(config, true);\n        // The ATN state associated with this configuration///\n        this.state = params.state!==null ? params.state : config.state;\n        // What alt (or lexer rule) is predicted by this configuration///\n        this.alt = params.alt!==null ? params.alt : config.alt;\n        /**\n         * The stack of invoking states leading to the rule/states associated\n         * with this config.  We track only those contexts pushed during\n         * execution of the ATN simulator\n         */\n        this.context = params.context!==null ? params.context : config.context;\n        this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n        // TODO: make it a boolean then\n        /**\n         * We cannot execute predicates dependent upon local context unless\n         * we know for sure we are in the correct context. Because there is\n         * no way to do this efficiently, we simply cannot evaluate\n         * dependent predicates unless we are in the rule that initially\n         * invokes the ATN simulator.\n         * closure() tracks the depth of how far we dip into the\n         * outer context: depth &gt; 0.  Note that it may not be totally\n         * accurate depth since I don't ever decrement\n         */\n        this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n\n    checkContext(params, config) {\n        if((params.context===null || params.context===undefined) &&\n                (config===null || config.context===null || config.context===undefined)) {\n            this.context = null;\n        }\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish();\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n\n    /**\n     * An ATN configuration is equal to another if both have\n     * the same state, they predict the same alternative, and\n     * syntactic/semantic contexts are the same\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n                this.semanticContext.equals(other.semanticContext) &&\n                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n        }\n    }\n\n    hashCodeForConfigSet() {\n        const hash = new Hash();\n        hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n        return hash.finish();\n    }\n\n    equalsForConfigSet(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                this.semanticContext.equals(other.semanticContext);\n        }\n    }\n\n    toString() {\n        return \"(\" + this.state + \",\" + this.alt +\n            (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n            (this.semanticContext !== SemanticContext.NONE ?\n                    (\",\" + this.semanticContext.toString())\n                    : \"\") +\n            (this.reachesIntoOuterContext>0 ?\n                    (\",up=\" + this.reachesIntoOuterContext)\n                    : \"\") + \")\";\n    }\n}\n\n\nclass LexerATNConfig extends ATNConfig {\n    constructor(params, config) {\n        super(params, config);\n\n        // This is the backing field for {@link //getLexerActionExecutor}.\n        const lexerActionExecutor = params.lexerActionExecutor || null;\n        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n        this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n        return this;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n\n    equals(other) {\n        return this === other ||\n                (other instanceof LexerATNConfig &&\n                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&\n                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n                super.equals(other));\n    }\n\n    checkNonGreedyDecision(source, target) {\n        return source.passedThroughNonGreedyDecision ||\n            (target instanceof DecisionState) && target.nonGreedy;\n    }\n}\n\n\nmodule.exports.ATNConfig = ATNConfig;\nmodule.exports.LexerATNConfig = LexerATNConfig;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst ATN = require('./ATN');\nconst Utils = require('./../Utils');\nconst {SemanticContext} = require('./SemanticContext');\nconst {merge} = require('./../PredictionContext');\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n/**\n * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n * info about the set, with support for combining similar configurations using a\n * graph-structured stack\n */\nclass ATNConfigSet {\n\tconstructor(fullCtx) {\n\t\t/**\n\t\t * The reason that we need this is because we don't want the hash map to use\n\t\t * the standard hash code and equals. We need all configurations with the\n\t\t * same\n\t\t * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t * doubles\n\t\t * the number of objects associated with ATNConfigs. The other solution is\n\t\t * to\n\t\t * use a hash table that lets us specify the equals/hashcode operation.\n\t\t * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t * when we go readonly as this set becomes a DFA state\n\t\t */\n\t\tthis.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);\n\t\t/**\n\t\t * Indicates that this configuration set is part of a full context\n\t\t * LL prediction. It will be used to determine how to merge $. With SLL\n\t\t * it's a wildcard whereas it is not for LL context merge\n\t\t */\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t/**\n\t\t * Indicates that the set of configurations is read-only. Do not\n\t\t * allow any code to manipulate the set; DFA states will point at\n\t\t * the sets and they must not change. This does not protect the other\n\t\t * fields; in particular, conflictingAlts is set after\n\t\t * we've made this readonly\n\t\t */\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t/**\n\t\t * Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t * while computing a closure operation. Don't make a DFA state from this\n\t\t */\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\t}\n\n\t/**\n\t * Adding a new config means merging contexts with existing configs for\n\t * {@code (s, i, pi, _)}, where {@code s} is the\n\t * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t * {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t * {@code (s,i,pi)} as key.\n\t *\n\t * <p>This method updates {@link //dipsIntoOuterContext} and\n\t * {@link //hasSemanticContext} when necessary.</p>\n\t */\n\tadd(config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tconst existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tconst rootIsWildcard = !this.fullCtx;\n\t\tconst merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t/**\n\t\t * no need to check for existing.context, config.context in cache\n\t\t * since only way to create new graphs is \"call rule\" and here. We\n\t\t * cache at both places\n\t\t */\n\t\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t}\n\n\tgetStates() {\n\t\tconst states = new Utils.Set();\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t}\n\n\tgetPredicates() {\n\t\tconst preds = [];\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst c = this.configs[i].semanticContext;\n\t\t\tif (c !== SemanticContext.NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t}\n\n\toptimizeConfigs(interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t}\n\n\taddAll(coll) {\n\t\tfor (let i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t}\n\n\tequals(other) {\n\t\treturn this === other ||\n\t\t\t(other instanceof ATNConfigSet &&\n\t\t\tUtils.equalArrays(this.configs, other.configs) &&\n\t\t\tthis.fullCtx === other.fullCtx &&\n\t\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n\t}\n\n\thashCode() {\n\t\tconst hash = new Utils.Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n\n\tupdateHashCode(hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tthis.cachedHashCode = this.hashCode();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.hashCode());\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this.configs.length === 0;\n\t}\n\n\tcontains(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t}\n\n\tcontainsFast(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t}\n\n\tclear() {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new Utils.Set();\n\t}\n\n\tsetReadonly(readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn Utils.arrayToString(this.configs) +\n\t\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t}\n\n\tget items(){\n\t\treturn this.configs;\n\t}\n\n\tget length(){\n\t\treturn this.configs.length;\n\t}\n}\n\n\nclass OrderedATNConfigSet extends ATNConfigSet {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.configLookup = new Utils.Set();\n\t}\n}\n\nmodule.exports = {\n\tATNConfigSet,\n\tOrderedATNConfigSet\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass ATNDeserializationOptions {\n\tconstructor(copyFrom) {\n\t\tif(copyFrom===undefined) {\n\t\t\tcopyFrom = null;\n\t\t}\n\t\tthis.readOnly = false;\n\t\tthis.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n\t\tthis.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\t}\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nmodule.exports = ATNDeserializationOptions\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./../Token');\nconst ATN = require('./ATN');\nconst ATNType = require('./ATNType');\n\nconst {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n} = require('./ATNState');\n\nconst {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    RangeTransition,\n    ActionTransition,\n    EpsilonTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition\n} = require('./Transition')\n\nconst {IntervalSet} = require('./../IntervalSet');\nconst ATNDeserializationOptions = require('./ATNDeserializationOptions');\n\nconst {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction,\n} = require('./LexerAction');\n\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nconst BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nconst ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nconst SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];\n\nconst SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nconst SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray( length, value) {\n\tconst tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nclass ATNDeserializer {\n    constructor(options) {\n\n        if ( options=== undefined || options === null ) {\n            options = ATNDeserializationOptions.defaultOptions;\n        }\n        this.deserializationOptions = options;\n        this.stateFactories = null;\n        this.actionFactories = null;\n    }\n\n    /**\n     * Determines if a particular serialized representation of an ATN supports\n     * a particular feature, identified by the {@link UUID} used for serializing\n     * the ATN at the time the feature was first introduced.\n     *\n     * @param feature The {@link UUID} marking the first time the feature was\n     * supported in the serialized ATN.\n     * @param actualUuid The {@link UUID} of the actual serialized ATN which is\n     * currently being deserialized.\n     * @return {@code true} if the {@code actualUuid} value represents a\n     * serialized ATN at or after the feature identified by {@code feature} was\n     * introduced; otherwise, {@code false}.\n    */\n    isFeatureSupported(feature, actualUuid) {\n        const idx1 = SUPPORTED_UUIDS.indexOf(feature);\n        if (idx1<0) {\n            return false;\n        }\n        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n        return idx2 >= idx1;\n    }\n\n    deserialize(data) {\n        this.reset(data);\n        this.checkVersion();\n        this.checkUUID();\n        const atn = this.readATN();\n        this.readStates(atn);\n        this.readRules(atn);\n        this.readModes(atn);\n        const sets = [];\n        // First, deserialize sets with 16-bit arguments <= U+FFFF.\n        this.readSets(atn, sets, this.readInt.bind(this));\n        // Next, if the ATN was serialized with the Unicode SMP feature,\n        // deserialize sets with 32-bit arguments <= U+10FFFF.\n        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n            this.readSets(atn, sets, this.readInt32.bind(this));\n        }\n        this.readEdges(atn, sets);\n        this.readDecisions(atn);\n        this.readLexerActions(atn);\n        this.markPrecedenceDecisions(atn);\n        this.verifyATN(atn);\n        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n            this.generateRuleBypassTransitions(atn);\n            // re-verify after modification\n            this.verifyATN(atn);\n        }\n        return atn;\n    }\n\n    reset(data) {\n        const adjust = function(c) {\n            const v = c.charCodeAt(0);\n            return v>1  ? v-2 : v + 65534;\n        };\n        const temp = data.split(\"\").map(adjust);\n        // don't adjust the first value since that's the version number\n        temp[0] = data.charCodeAt(0);\n        this.data = temp;\n        this.pos = 0;\n    }\n\n    checkVersion() {\n        const version = this.readInt();\n        if ( version !== SERIALIZED_VERSION ) {\n            throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n        }\n    }\n\n    checkUUID() {\n        const uuid = this.readUUID();\n        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {\n            throw (\"Could not deserialize ATN with UUID: \" + uuid +\n                            \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID);\n        }\n        this.uuid = uuid;\n    }\n\n    readATN() {\n        const grammarType = this.readInt();\n        const maxTokenType = this.readInt();\n        return new ATN(grammarType, maxTokenType);\n    }\n\n    readStates(atn) {\n        let j, pair, stateNumber;\n        const  loopBackStateNumbers = [];\n        const  endStateNumbers = [];\n        const  nstates = this.readInt();\n        for(let i=0; i<nstates; i++) {\n            const  stype = this.readInt();\n            // ignore bad type of states\n            if (stype===ATNState.INVALID_TYPE) {\n                atn.addState(null);\n                continue;\n            }\n            let ruleIndex = this.readInt();\n            if (ruleIndex === 0xFFFF) {\n                ruleIndex = -1;\n            }\n            const  s = this.stateFactory(stype, ruleIndex);\n            if (stype === ATNState.LOOP_END) { // special case\n                const  loopBackStateNumber = this.readInt();\n                loopBackStateNumbers.push([s, loopBackStateNumber]);\n            } else if(s instanceof BlockStartState) {\n                const  endStateNumber = this.readInt();\n                endStateNumbers.push([s, endStateNumber]);\n            }\n            atn.addState(s);\n        }\n        // delay the assignment of loop back and end states until we know all the\n        // state instances have been initialized\n        for (j=0; j<loopBackStateNumbers.length; j++) {\n            pair = loopBackStateNumbers[j];\n            pair[0].loopBackState = atn.states[pair[1]];\n        }\n\n        for (j=0; j<endStateNumbers.length; j++) {\n            pair = endStateNumbers[j];\n            pair[0].endState = atn.states[pair[1]];\n        }\n\n        let numNonGreedyStates = this.readInt();\n        for (j=0; j<numNonGreedyStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].nonGreedy = true;\n        }\n\n        let numPrecedenceStates = this.readInt();\n        for (j=0; j<numPrecedenceStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].isPrecedenceRule = true;\n        }\n    }\n\n    readRules(atn) {\n        let i;\n        const nrules = this.readInt();\n        if (atn.grammarType === ATNType.LEXER ) {\n            atn.ruleToTokenType = initArray(nrules, 0);\n        }\n        atn.ruleToStartState = initArray(nrules, 0);\n        for (i=0; i<nrules; i++) {\n            const s = this.readInt();\n            atn.ruleToStartState[i] = atn.states[s];\n            if ( atn.grammarType === ATNType.LEXER ) {\n                let tokenType = this.readInt();\n                if (tokenType === 0xFFFF) {\n                    tokenType = Token.EOF;\n                }\n                atn.ruleToTokenType[i] = tokenType;\n            }\n        }\n        atn.ruleToStopState = initArray(nrules, 0);\n        for (i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!(state instanceof RuleStopState)) {\n                continue;\n            }\n            atn.ruleToStopState[state.ruleIndex] = state;\n            atn.ruleToStartState[state.ruleIndex].stopState = state;\n        }\n    }\n\n    readModes(atn) {\n        const nmodes = this.readInt();\n        for (let i=0; i<nmodes; i++) {\n            let s = this.readInt();\n            atn.modeToStartState.push(atn.states[s]);\n        }\n    }\n\n    readSets(atn, sets, readUnicode) {\n        const m = this.readInt();\n        for (let i=0; i<m; i++) {\n            const iset = new IntervalSet();\n            sets.push(iset);\n            const n = this.readInt();\n            const containsEof = this.readInt();\n            if (containsEof!==0) {\n                iset.addOne(-1);\n            }\n            for (let j=0; j<n; j++) {\n                const i1 = readUnicode();\n                const i2 = readUnicode();\n                iset.addRange(i1, i2);\n            }\n        }\n    }\n\n    readEdges(atn, sets) {\n        let i, j, state, trans, target;\n        const nedges = this.readInt();\n        for (i=0; i<nedges; i++) {\n            const src = this.readInt();\n            const trg = this.readInt();\n            const ttype = this.readInt();\n            const arg1 = this.readInt();\n            const arg2 = this.readInt();\n            const arg3 = this.readInt();\n            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n            const srcState = atn.states[src];\n            srcState.addTransition(trans);\n        }\n        // edges for rule stop states can be derived, so they aren't serialized\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for (j=0; j<state.transitions.length; j++) {\n                const t = state.transitions[j];\n                if (!(t instanceof RuleTransition)) {\n                    continue;\n                }\n                let outermostPrecedenceReturn = -1;\n                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                    if (t.precedence === 0) {\n                        outermostPrecedenceReturn = t.target.ruleIndex;\n                    }\n                }\n\n                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n            }\n        }\n\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (state instanceof BlockStartState) {\n                // we need to know the end state to set its start state\n                if (state.endState === null) {\n                    throw (\"IllegalState\");\n                }\n                // block end states can only be associated to a single block start\n                // state\n                if ( state.endState.startState !== null) {\n                    throw (\"IllegalState\");\n                }\n                state.endState.startState = state;\n            }\n            if (state instanceof PlusLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof PlusBlockStartState) {\n                        target.loopBackState = state;\n                    }\n                }\n            } else if (state instanceof StarLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof StarLoopEntryState) {\n                        target.loopBackState = state;\n                    }\n                }\n            }\n        }\n    }\n\n    readDecisions(atn) {\n        const ndecisions = this.readInt();\n        for (let i=0; i<ndecisions; i++) {\n            const s = this.readInt();\n            const decState = atn.states[s];\n            atn.decisionToState.push(decState);\n            decState.decision = i;\n        }\n    }\n\n    readLexerActions(atn) {\n        if (atn.grammarType === ATNType.LEXER) {\n            const count = this.readInt();\n            atn.lexerActions = initArray(count, null);\n            for (let i=0; i<count; i++) {\n                const actionType = this.readInt();\n                let data1 = this.readInt();\n                if (data1 === 0xFFFF) {\n                    data1 = -1;\n                }\n                let data2 = this.readInt();\n                if (data2 === 0xFFFF) {\n                    data2 = -1;\n                }\n\n                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n            }\n        }\n    }\n\n    generateRuleBypassTransitions(atn) {\n        let i;\n        const count = atn.ruleToStartState.length;\n        for(i=0; i<count; i++) {\n            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for(i=0; i<count; i++) {\n            this.generateRuleBypassTransition(atn, i);\n        }\n    }\n\n    generateRuleBypassTransition(atn, idx) {\n        let i, state;\n        const bypassStart = new BasicBlockStartState();\n        bypassStart.ruleIndex = idx;\n        atn.addState(bypassStart);\n\n        const bypassStop = new BlockEndState();\n        bypassStop.ruleIndex = idx;\n        atn.addState(bypassStop);\n\n        bypassStart.endState = bypassStop;\n        atn.defineDecisionState(bypassStart);\n\n        bypassStop.startState = bypassStart;\n\n        let excludeTransition = null;\n        let endState = null;\n\n        if (atn.ruleToStartState[idx].isPrecedenceRule) {\n            // wrap from the beginning of the rule to the StarLoopEntryState\n            endState = null;\n            for(i=0; i<atn.states.length; i++) {\n                state = atn.states[i];\n                if (this.stateIsEndStateFor(state, idx)) {\n                    endState = state;\n                    excludeTransition = state.loopBackState.transitions[0];\n                    break;\n                }\n            }\n            if (excludeTransition === null) {\n                throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n        } else {\n            endState = atn.ruleToStopState[idx];\n        }\n\n        // all non-excluded transitions that currently target end state need to\n        // target blockEnd instead\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for(let j=0; j<state.transitions.length; j++) {\n                const transition = state.transitions[j];\n                if (transition === excludeTransition) {\n                    continue;\n                }\n                if (transition.target === endState) {\n                    transition.target = bypassStop;\n                }\n            }\n        }\n\n        // all transitions leaving the rule start state need to leave blockStart\n        // instead\n        const ruleToStartState = atn.ruleToStartState[idx];\n        const count = ruleToStartState.transitions.length;\n        while ( count > 0) {\n            bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n        }\n        // link the new states\n        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n        bypassStop.addTransition(new EpsilonTransition(endState));\n\n        const matchState = new BasicState();\n        atn.addState(matchState);\n        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n        bypassStart.addTransition(new EpsilonTransition(matchState));\n    }\n\n    stateIsEndStateFor(state, idx) {\n        if ( state.ruleIndex !== idx) {\n            return null;\n        }\n        if (!( state instanceof StarLoopEntryState)) {\n            return null;\n        }\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (!( maybeLoopEndState instanceof LoopEndState)) {\n            return null;\n        }\n        if (maybeLoopEndState.epsilonOnlyTransitions &&\n            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n            return state;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n     * correct value.\n     * @param atn The ATN.\n     */\n    markPrecedenceDecisions(atn) {\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!( state instanceof StarLoopEntryState)) {\n                continue;\n            }\n            // We analyze the ATN to determine if this ATN decision state is the\n            // decision for the closure block that determines whether a\n            // precedence rule should continue or complete.\n            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n                if (maybeLoopEndState instanceof LoopEndState) {\n                    if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                        state.isPrecedenceDecision = true;\n                    }\n                }\n            }\n        }\n    }\n\n    verifyATN(atn) {\n        if (!this.deserializationOptions.verifyATN) {\n            return;\n        }\n        // verify assumptions\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (state === null) {\n                continue;\n            }\n            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n            if (state instanceof PlusBlockStartState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else  if (state instanceof StarLoopEntryState) {\n                this.checkCondition(state.loopBackState !== null);\n                this.checkCondition(state.transitions.length === 2);\n                if (state.transitions[0].target instanceof StarBlockStartState) {\n                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                    this.checkCondition(!state.nonGreedy);\n                } else if (state.transitions[0].target instanceof LoopEndState) {\n                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                    this.checkCondition(state.nonGreedy);\n                } else {\n                    throw(\"IllegalState\");\n                }\n            } else if (state instanceof StarLoopbackState) {\n                this.checkCondition(state.transitions.length === 1);\n                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n            } else if (state instanceof LoopEndState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else if (state instanceof RuleStartState) {\n                this.checkCondition(state.stopState !== null);\n            } else if (state instanceof BlockStartState) {\n                this.checkCondition(state.endState !== null);\n            } else if (state instanceof BlockEndState) {\n                this.checkCondition(state.startState !== null);\n            } else if (state instanceof DecisionState) {\n                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n            } else {\n                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n            }\n        }\n    }\n\n    checkCondition(condition, message) {\n        if (!condition) {\n            if (message === undefined || message===null) {\n                message = \"IllegalState\";\n            }\n            throw (message);\n        }\n    }\n\n    readInt() {\n        return this.data[this.pos++];\n    }\n\n    readInt32() {\n        const low = this.readInt();\n        const high = this.readInt();\n        return low | (high << 16);\n    }\n\n    readLong() {\n        const low = this.readInt32();\n        const high = this.readInt32();\n        return (low & 0x00000000FFFFFFFF) | (high << 32);\n    }\n\n    readUUID() {\n        const bb = [];\n        for(let i=7;i>=0;i--) {\n            const int = this.readInt();\n            /* jshint bitwise: false */\n            bb[(2*i)+1] = int & 0xFF;\n            bb[2*i] = (int >> 8) & 0xFF;\n        }\n        return byteToHex[bb[0]] + byteToHex[bb[1]] +\n        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +\n        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +\n        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +\n        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +\n        byteToHex[bb[10]] + byteToHex[bb[11]] +\n        byteToHex[bb[12]] + byteToHex[bb[13]] +\n        byteToHex[bb[14]] + byteToHex[bb[15]];\n    }\n\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n        const target = atn.states[trg];\n        switch(type) {\n        case Transition.EPSILON:\n            return new EpsilonTransition(target);\n        case Transition.RANGE:\n            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n            return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n        case Transition.ACTION:\n            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n            return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n            return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n            return new WildcardTransition(target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n        }\n    }\n\n    stateFactory(type, ruleIndex) {\n        if (this.stateFactories === null) {\n            const sf = [];\n            sf[ATNState.INVALID_TYPE] = null;\n            sf[ATNState.BASIC] = () => new BasicState();\n            sf[ATNState.RULE_START] = () => new RuleStartState();\n            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();\n            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();\n            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();\n            sf[ATNState.TOKEN_START] = () => new TokensStartState();\n            sf[ATNState.RULE_STOP] = () => new RuleStopState();\n            sf[ATNState.BLOCK_END] = () => new BlockEndState();\n            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();\n            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();\n            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();\n            sf[ATNState.LOOP_END] = () => new LoopEndState();\n            this.stateFactories = sf;\n        }\n        if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n            throw(\"The specified state type \" + type + \" is not valid.\");\n        } else {\n            const s = this.stateFactories[type]();\n            if (s!==null) {\n                s.ruleIndex = ruleIndex;\n                return s;\n            }\n        }\n    }\n\n    lexerActionFactory(type, data1, data2) {\n        if (this.actionFactories === null) {\n            const af = [];\n            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);\n            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);\n            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);\n            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;\n            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;\n            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);\n            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;\n            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);\n            this.actionFactories = af;\n        }\n        if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n            throw(\"The specified lexer action type \" + type + \" is not valid.\");\n        } else {\n            return this.actionFactories[type](data1, data2);\n        }\n    }\n}\n\nfunction createByteToHex() {\n\tconst bth = [];\n\tfor (let i = 0; i < 256; i++) {\n\t\tbth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t}\n\treturn bth;\n}\n\nconst byteToHex = createByteToHex();\n\n\nmodule.exports = ATNDeserializer;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DFAState} = require('./../dfa/DFAState');\nconst {ATNConfigSet} = require('./ATNConfigSet');\nconst {getCachedPredictionContext} = require('./../PredictionContext');\nconst {Map} = require('./../Utils');\n\nclass ATNSimulator {\n    constructor(atn, sharedContextCache) {\n        /**\n         * The context cache maps all PredictionContext objects that are ==\n         * to a single cached copy. This cache is shared across all contexts\n         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n         * to use only cached nodes/graphs in addDFAState(). We don't want to\n         * fill this during closure() since there are lots of contexts that\n         * pop up but are not used ever again. It also greatly slows down closure().\n         *\n         * <p>This cache makes a huge difference in memory and a little bit in speed.\n         * For the Java grammar on java.*, it dropped the memory requirements\n         * at the end from 25M to 16M. We don't store any of the full context\n         * graphs in the DFA because they are limited to local context only,\n         * but apparently there's a lot of repetition there as well. We optimize\n         * the config contexts before storing the config set in the DFA states\n         * by literally rebuilding them with cached subgraphs only.</p>\n         *\n         * <p>I tried a cache for use during closure operations, that was\n         * whacked after each adaptivePredict(). It cost a little bit\n         * more time I think and doesn't save on the overall footprint\n         * so it's not worth the complexity.</p>\n         */\n        this.atn = atn;\n        this.sharedContextCache = sharedContextCache;\n        return this;\n    }\n\n    getCachedContext(context) {\n        if (this.sharedContextCache ===null) {\n            return context;\n        }\n        const visited = new Map();\n        return getCachedPredictionContext(context, this.sharedContextCache, visited);\n    }\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\nmodule.exports = ATNSimulator;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst INITIAL_NUM_TRANSITIONS = 4;\n\n/**\n * The following images show the relation of states and\n * {@link ATNState//transitions} for various grammar constructs.\n *\n * <ul>\n *\n * <li>Solid edges marked with an &//0949; indicate a required\n * {@link EpsilonTransition}.</li>\n *\n * <li>Dashed edges indicate locations where any transition derived from\n * {@link Transition} might appear.</li>\n *\n * <li>Dashed nodes are place holders for either a sequence of linked\n * {@link BasicState} states or the inclusion of a block representing a nested\n * construct in one of the forms below.</li>\n *\n * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n * any number of alternatives (one or more). Nodes without the {@code ...} only\n * support the exact number of alternatives shown in the diagram.</li>\n *\n * </ul>\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: {@code (...)*}</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: {@code (...)+}</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: {@code (...)?}</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: {@code (...)??}</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nclass ATNState {\n    constructor() {\n        // Which ATN are we in?\n        this.atn = null;\n        this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n        this.stateType = null;\n        this.ruleIndex = 0; // at runtime, we don't have Rule objects\n        this.epsilonOnlyTransitions = false;\n        // Track the transitions emanating from this ATN state.\n        this.transitions = [];\n        // Used to cache lookahead during parsing, not used during construction\n        this.nextTokenWithinRule = null;\n    }\n\n    toString() {\n        return this.stateNumber;\n    }\n\n    equals(other) {\n        if (other instanceof ATNState) {\n            return this.stateNumber===other.stateNumber;\n        } else {\n            return false;\n        }\n    }\n\n    isNonGreedyExitState() {\n        return false;\n    }\n\n    addTransition(trans, index) {\n        if(index===undefined) {\n            index = -1;\n        }\n        if (this.transitions.length===0) {\n            this.epsilonOnlyTransitions = trans.isEpsilon;\n        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n            this.epsilonOnlyTransitions = false;\n        }\n        if (index===-1) {\n            this.transitions.push(trans);\n        } else {\n            this.transitions.splice(index, 1, trans);\n        }\n    }\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\n\nclass BasicState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BASIC;\n    }\n}\n\nclass DecisionState extends ATNState {\n    constructor() {\n        super();\n        this.decision = -1;\n        this.nonGreedy = false;\n        return this;\n    }\n}\n\n/**\n *  The start of a regular {@code (...)} block\n */\nclass BlockStartState extends DecisionState {\n    constructor() {\n        super();\n        this.endState = null;\n        return this;\n    }\n}\n\nclass BasicBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_START;\n        return this;\n    }\n}\n\n/**\n * Terminal node of a simple {@code (a|b|c)} block\n */\nclass BlockEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_END;\n        this.startState = null;\n        return this;\n    }\n}\n\n/**\n * The last node in the ATN for a rule, unless that rule is the start symbol.\n * In that case, there is one transition to EOF. Later, we might encode\n * references to all calls to this rule to compute FOLLOW sets for\n * error handling\n */\nclass RuleStopState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_STOP;\n        return this;\n    }\n}\n\nclass RuleStartState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_START;\n        this.stopState = null;\n        this.isPrecedenceRule = false;\n        return this;\n    }\n}\n\n/**\n * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n * one to the loop back to start of the block and one to exit.\n */\nclass PlusLoopbackState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_LOOP_BACK;\n        return this;\n    }\n}\n\n/**\n * Start of {@code (A|B|...)+} loop. Technically a decision state, but\n * we don't use for code generation; somebody might need it, so I'm defining\n * it for completeness. In reality, the {@link PlusLoopbackState} node is the\n * real decision-making note for {@code A+}\n */\nclass PlusBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_BLOCK_START;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The block that begins a closure loop\n */\nclass StarBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_BLOCK_START;\n        return this;\n    }\n}\n\nclass StarLoopbackState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_BACK;\n        return this;\n    }\n}\n\nclass StarLoopEntryState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_ENTRY;\n        this.loopBackState = null;\n        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n        this.isPrecedenceDecision = null;\n        return this;\n    }\n}\n\n/**\n * Mark the end of a * or + loop\n */\nclass LoopEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.LOOP_END;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The Tokens rule start state linking to each lexer rule start state\n */\nclass TokensStartState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.TOKEN_START;\n        return this;\n    }\n}\n\nmodule.exports = {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Represents the type of recognizer an ATN applies to\n */\nmodule.exports = {\n    LEXER: 0,\n    PARSER: 1\n};\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./../Token');\nconst Lexer = require('./../Lexer');\nconst ATN = require('./ATN');\nconst ATNSimulator = require('./ATNSimulator');\nconst {DFAState} = require('./../dfa/DFAState');\nconst {OrderedATNConfigSet} = require('./ATNConfigSet');\nconst {PredictionContext} = require('./../PredictionContext');\nconst {SingletonPredictionContext} = require('./../PredictionContext');\nconst {RuleStopState} = require('./ATNState');\nconst {LexerATNConfig} = require('./ATNConfig');\nconst {Transition} = require('./Transition');\nconst LexerActionExecutor = require('./LexerActionExecutor');\nconst {LexerNoViableAltException} = require('./../error/Errors');\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nclass SimState {\n\tconstructor() {\n\t\tresetSimState(this);\n\t}\n\n\treset() {\n\t\tresetSimState(this);\n\t}\n}\n\nclass LexerATNSimulator extends ATNSimulator {\n\t/**\n\t * When we hit an accept state in either the DFA or the ATN, we\n\t * have to notify the character stream to start buffering characters\n\t * via {@link IntStream//mark} and record the current state. The current sim state\n\t * includes the current index into the input, the current line,\n\t * and current character position in that line. Note that the Lexer is\n\t * tracking the starting line and characterization of the token. These\n\t * variables track the \"state\" of the simulator when it hits an accept state.\n\t *\n\t * <p>We track these variables separately for the DFA and ATN simulation\n\t * because the DFA simulation often has to fail over to the ATN\n\t * simulation. If the ATN simulation fails, we need the DFA to fall\n\t * back to its previously accepted state, if any. If the ATN succeeds,\n\t * then the ATN does the accept and the DFA simulator that invoked it\n\t * can simply return the predicted token type.</p>\n\t */\n\tconstructor(recog, atn, decisionToDFA, sharedContextCache) {\n\t\tsuper(atn, sharedContextCache);\n\t\tthis.decisionToDFA = decisionToDFA;\n\t\tthis.recog = recog;\n\t\t/**\n\t\t * The current token's starting index into the character stream.\n\t\t * Shared across DFA to ATN simulation in case the ATN fails and the\n\t\t * DFA did not have a previous accept state. In this case, we use the\n\t\t * ATN-generated exception object\n\t\t */\n\t\tthis.startIndex = -1;\n\t\t// line number 1..n within the input///\n\t\tthis.line = 1;\n\t\t/**\n\t\t * The index of the character relative to the beginning of the line\n\t\t * 0..n-1\n\t\t */\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t\t/**\n\t\t * Used during DFA/ATN exec to record the most recent accept configuration\n\t\t * info\n\t\t */\n\t\tthis.prevAccept = new SimState();\n\t}\n\n\tcopyState(simulator) {\n\t\tthis.column = simulator.column;\n\t\tthis.line = simulator.line;\n\t\tthis.mode = simulator.mode;\n\t\tthis.startIndex = simulator.startIndex;\n\t}\n\n\tmatch(input, mode) {\n\t\tthis.match_calls += 1;\n\t\tthis.mode = mode;\n\t\tconst mark = input.mark();\n\t\ttry {\n\t\t\tthis.startIndex = input.index;\n\t\t\tthis.prevAccept.reset();\n\t\t\tconst dfa = this.decisionToDFA[mode];\n\t\t\tif (dfa.s0 === null) {\n\t\t\t\treturn this.matchATN(input);\n\t\t\t} else {\n\t\t\t\treturn this.execATN(input, dfa.s0);\n\t\t\t}\n\t\t} finally {\n\t\t\tinput.release(mark);\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.prevAccept.reset();\n\t\tthis.startIndex = -1;\n\t\tthis.line = 1;\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t}\n\n\tmatchATN(input) {\n\t\tconst startState = this.atn.modeToStartState[this.mode];\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t\t}\n\t\tconst old_mode = this.mode;\n\t\tconst s0_closure = this.computeStartState(input, startState);\n\t\tconst suppressEdge = s0_closure.hasSemanticContext;\n\t\ts0_closure.hasSemanticContext = false;\n\n\t\tconst next = this.addDFAState(s0_closure);\n\t\tif (!suppressEdge) {\n\t\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t\t}\n\n\t\tconst predict = this.execATN(input, next);\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t\t}\n\t\treturn predict;\n\t}\n\n\texecATN(input, ds0) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t\t}\n\t\tif (ds0.isAcceptState) {\n\t\t\t// allow zero-length tokens\n\t\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t\t}\n\t\tlet t = input.LA(1);\n\t\tlet s = ds0; // s is current/from DFA state\n\n\t\twhile (true) { // while more work\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t\t * avoid looking up the DFA state again, which is expensive.\n\t\t\t * If the previous target was already part of the DFA, we might\n\t\t\t * be able to avoid doing a reach operation upon t. If s!=null,\n\t\t\t * it means that semantic predicates didn't prevent us from\n\t\t\t * creating a DFA state. Once we know s!=null, we check to see if\n\t\t\t * the DFA state has an edge already for t. If so, we can just reuse\n\t\t\t * it's configuration set; there's no point in re-computing it.\n\t\t\t * This is kind of like doing DFA simulation within the ATN\n\t\t\t * simulation because DFA simulation is really just a way to avoid\n\t\t\t * computing reach/closure sets. Technically, once we know that\n\t\t\t * we have a previously added DFA state, we could jump over to\n\t\t\t * the DFA simulator. But, that would mean popping back and forth\n\t\t\t * a lot and making things more complicated algorithmically.\n\t\t\t * This optimization makes a lot of sense for loops within DFA.\n\t\t\t * A character will take us back to an existing DFA state\n\t\t\t * that already has lots of edges out of it. e.g., .* in comments.\n\t\t\t * print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\t\t */\n\t\t\tlet target = this.getExistingTargetState(s, t);\n\t\t\t// print(\"Existing:\" + str(target))\n\t\t\tif (target === null) {\n\t\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t\t// print(\"Computed:\" + str(target))\n\t\t\t}\n\t\t\tif (target === ATNSimulator.ERROR) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// If this is a consumable input element, make sure to consume before\n\t\t\t// capturing the accept state so the input index, line, and char\n\t\t\t// position accurately reflect the state of the interpreter at the\n\t\t\t// end of the token.\n\t\t\tif (t !== Token.EOF) {\n\t\t\t\tthis.consume(input);\n\t\t\t}\n\t\t\tif (target.isAcceptState) {\n\t\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\t\tif (t === Token.EOF) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = input.LA(1);\n\t\t\ts = target; // flip; current DFA target becomes new src/from state\n\t\t}\n\t\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n\t}\n\n\t/**\n\t * Get an existing target state for an edge in the DFA. If the target state\n\t * for the edge has not yet been computed or is otherwise not available,\n\t * this method returns {@code null}.\n\t *\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t * @return The existing target DFA state for the given input symbol\n\t * {@code t}, or {@code null} if the target state for this edge is not\n\t * already cached\n\t */\n\tgetExistingTargetState(s, t) {\n\t\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\t\tif(target===undefined) {\n\t\t\ttarget = null;\n\t\t}\n\t\tif (LexerATNSimulator.debug && target !== null) {\n\t\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Compute a target state for an edge in the DFA, and attempt to add the\n\t * computed state and corresponding edge to the DFA.\n\t *\n\t * @param input The input stream\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t *\n\t * @return The computed target DFA state for the given input symbol\n\t * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n\t * returns {@link //ERROR}.\n\t */\n\tcomputeTargetState(input, s, t) {\n\t\tconst reach = new OrderedATNConfigSet();\n\t\t// if we don't find an existing DFA state\n\t\t// Fill reach starting from closure, following t transitions\n\t\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\t\tif (reach.items.length === 0) { // we got nowhere on t from s\n\t\t\tif (!reach.hasSemanticContext) {\n\t\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t\t// cause a failover from DFA later.\n\t\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t\t}\n\t\t\t// stop when we can't match any more char\n\t\t\treturn ATNSimulator.ERROR;\n\t\t}\n\t\t// Add an edge from s to target DFA found/created for reach\n\t\treturn this.addDFAEdge(s, t, null, reach);\n\t}\n\n\tfailOrAccept(prevAccept, input, reach, t) {\n\t\tif (this.prevAccept.dfaState !== null) {\n\t\t\tconst lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\t\tthis.accept(input, lexerActionExecutor, this.startIndex,\n\t\t\t\t\tprevAccept.index, prevAccept.line, prevAccept.column);\n\t\t\treturn prevAccept.dfaState.prediction;\n\t\t} else {\n\t\t\t// if no accept and EOF is first char, return EOF\n\t\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\t\treturn Token.EOF;\n\t\t\t}\n\t\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t\t}\n\t}\n\n\t/**\n\t * Given a starting configuration set, figure out all ATN configurations\n\t * we can reach upon input {@code t}. Parameter {@code reach} is a return\n\t * parameter.\n\t */\n\tgetReachableConfigSet(input, closure,\n\t\t\treach, t) {\n\t\t// this is used to skip processing for configs which have a lower priority\n\t\t// than a config that already reached an accept state for the same rule\n\t\tlet skipAlt = ATN.INVALID_ALT_NUMBER;\n\t\tfor (let i = 0; i < closure.items.length; i++) {\n\t\t\tconst cfg = closure.items[i];\n\t\t\tconst currentAltReachedAcceptState = (cfg.alt === skipAlt);\n\t\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n\t\t\t\t\t\t.toString(this.recog, true));\n\t\t\t}\n\t\t\tfor (let j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\t\tconst trans = cfg.state.transitions[j]; // for each transition\n\t\t\t\tconst target = this.getReachableTarget(trans, t);\n\t\t\t\tif (target !== null) {\n\t\t\t\t\tlet lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t\t}\n\t\t\t\t\tconst treatEofAsEpsilon = (t === Token.EOF);\n\t\t\t\t\tconst config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);\n\t\t\t\t\tif (this.closure(input, config, reach,\n\t\t\t\t\t\t\tcurrentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\taccept(input, lexerActionExecutor,\n\t\t\t   startIndex, index, line, charPos) {\n\t\t   if (LexerATNSimulator.debug) {\n\t\t\t   console.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t\t   }\n\t\t   // seek to after last char in token\n\t\t   input.seek(index);\n\t\t   this.line = line;\n\t\t   this.column = charPos;\n\t\t   if (lexerActionExecutor !== null && this.recog !== null) {\n\t\t\t   lexerActionExecutor.execute(this.recog, input, startIndex);\n\t\t   }\n\t   }\n\n\tgetReachableTarget(trans, t) {\n\t\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\treturn trans.target;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcomputeStartState(input, p) {\n\t\tconst initialContext = PredictionContext.EMPTY;\n\t\tconst configs = new OrderedATNConfigSet();\n\t\tfor (let i = 0; i < p.transitions.length; i++) {\n\t\t\tconst target = p.transitions[i].target;\n\t\t\tconst cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);\n\t\t\tthis.closure(input, cfg, configs, false, false, false);\n\t\t}\n\t\treturn configs;\n\t}\n\n\t/**\n\t * Since the alternatives within any lexer decision are ordered by\n\t * preference, this method stops pursuing the closure as soon as an accept\n\t * state is reached. After the first accept state is reached by depth-first\n\t * search from {@code config}, all other (potentially reachable) states for\n\t * this rule would have a lower priority.\n\t *\n\t * @return {Boolean} {@code true} if an accept state is reached, otherwise\n\t * {@code false}.\n\t */\n\tclosure(input, config, configs,\n\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t\t}\n\t\tif (config.state instanceof RuleStopState) {\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tif (this.recog !== null) {\n\t\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\t\tconfigs.add(config);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconfigs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));\n\t\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\t\tfor (let i = 0; i < config.context.length; i++) {\n\t\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\t\tconst newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\t\tconst returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\t\tcfg = new LexerATNConfig({ state:returnState, context:newContext }, config);\n\t\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg,\n\t\t\t\t\t\t\t\tconfigs, currentAltReachedAcceptState, speculative,\n\t\t\t\t\t\t\t\ttreatEofAsEpsilon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn currentAltReachedAcceptState;\n\t\t}\n\t\t// optimization\n\t\tif (!config.state.epsilonOnlyTransitions) {\n\t\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\t\tconfigs.add(config);\n\t\t\t}\n\t\t}\n\t\tfor (let j = 0; j < config.state.transitions.length; j++) {\n\t\t\tconst trans = config.state.transitions[j];\n\t\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\t\tif (cfg !== null) {\n\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs,\n\t\t\t\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\n\t// side-effect: can alter configs.hasSemanticContext\n\tgetEpsilonTarget(input, config, trans,\n\t\t\tconfigs, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (trans.serializationType === Transition.RULE) {\n\t\t\tconst newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\t\tcfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);\n\t\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t\t// Track traversing semantic predicates. If we traverse,\n\t\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t\t// because the DFA would not test the predicate again in the\n\t\t\t// future. Rather than creating collections of semantic predicates\n\t\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t\t// semantically it's not used that often. One of the key elements to\n\t\t\t// this predicate mechanism is not adding DFA states that see\n\t\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t\t// should create the start state for rule 'a' (to save start state\n\t\t\t// competition), but should not create target of ID state. The\n\t\t\t// collection of ATN states the following ID references includes\n\t\t\t// states reached by traversing predicates. Since this is when we\n\t\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t\t}\n\t\t\tconfigs.hasSemanticContext = true;\n\t\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.ACTION) {\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t\t//\n\t\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t\t// actions may be executed during the recursive call. The\n\t\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t\t// split into two contexts - one with just the empty path\n\t\t\t\t// and another with everything but the empty path.\n\t\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t\t// additional modifications are needed before we can support\n\t\t\t\t// the split operation.\n\t\t\t\tconst lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n\t\t\t\t\t\tthis.atn.lexerActions[trans.actionIndex]);\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);\n\t\t\t} else {\n\t\t\t\t// ignore actions in referenced rules\n\t\t\t\tcfg = new LexerATNConfig( { state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t} else if (trans.serializationType === Transition.ATOM ||\n\t\t\t\t\ttrans.serializationType === Transition.RANGE ||\n\t\t\t\t\ttrans.serializationType === Transition.SET) {\n\t\t\tif (treatEofAsEpsilon) {\n\t\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\t\tcfg = new LexerATNConfig( { state:trans.target }, config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cfg;\n\t}\n\n\t/**\n\t * Evaluate a predicate specified in the lexer.\n\t *\n\t * <p>If {@code speculative} is {@code true}, this method was called before\n\t * {@link //consume} for the matched character. This method should call\n\t * {@link //consume} before evaluating the predicate to ensure position\n\t * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n\t * and {@link Lexer//getcolumn}, properly reflect the current\n\t * lexer state. This method should restore {@code input} and the simulator\n\t * to the original state before returning (i.e. undo the actions made by the\n\t * call to {@link //consume}.</p>\n\t *\n\t * @param input The input stream.\n\t * @param ruleIndex The rule containing the predicate.\n\t * @param predIndex The index of the predicate within the rule.\n\t * @param speculative {@code true} if the current index in {@code input} is\n\t * one character before the predicate's location.\n\t *\n\t * @return {@code true} if the specified predicate evaluates to\n\t * {@code true}.\n\t */\n\tevaluatePredicate(input, ruleIndex,\n\t\t\tpredIndex, speculative) {\n\t\t// assume true if no recognizer was provided\n\t\tif (this.recog === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!speculative) {\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t}\n\t\tconst savedcolumn = this.column;\n\t\tconst savedLine = this.line;\n\t\tconst index = input.index;\n\t\tconst marker = input.mark();\n\t\ttry {\n\t\t\tthis.consume(input);\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t} finally {\n\t\t\tthis.column = savedcolumn;\n\t\t\tthis.line = savedLine;\n\t\t\tinput.seek(index);\n\t\t\tinput.release(marker);\n\t\t}\n\t}\n\n\tcaptureSimState(settings, input, dfaState) {\n\t\tsettings.index = input.index;\n\t\tsettings.line = this.line;\n\t\tsettings.column = this.column;\n\t\tsettings.dfaState = dfaState;\n\t}\n\n\taddDFAEdge(from_, tk, to, cfgs) {\n\t\tif (to === undefined) {\n\t\t\tto = null;\n\t\t}\n\t\tif (cfgs === undefined) {\n\t\t\tcfgs = null;\n\t\t}\n\t\tif (to === null && cfgs !== null) {\n\t\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t\t// following the predicate evaluation step.\n\t\t\t//\n\t\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t\t// state, we can continue in pure DFA mode from there.\n\t\t\t// /\n\t\t\tconst suppressEdge = cfgs.hasSemanticContext;\n\t\t\tcfgs.hasSemanticContext = false;\n\n\t\t\tto = this.addDFAState(cfgs);\n\n\t\t\tif (suppressEdge) {\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}\n\t\t// add the edge\n\t\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\t// Only track edges within the DFA bounds\n\t\t\treturn to;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t\t}\n\t\tif (from_.edges === null) {\n\t\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\t\tfrom_.edges = [];\n\t\t}\n\t\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\t\treturn to;\n\t}\n\n\t/**\n\t * Add a new DFA state if there isn't one with this set of\n\t * configurations already. This method also detects the first\n\t * configuration containing an ATN rule stop state. Later, when\n\t * traversing the DFA, we will know which rule to accept.\n\t */\n\taddDFAState(configs) {\n\t\tconst proposed = new DFAState(null, configs);\n\t\tlet firstConfigWithRuleStopState = null;\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tconst cfg = configs.items[i];\n\t\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (firstConfigWithRuleStopState !== null) {\n\t\t\tproposed.isAcceptState = true;\n\t\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t\t}\n\t\tconst dfa = this.decisionToDFA[this.mode];\n\t\tconst existing = dfa.states.get(proposed);\n\t\tif (existing!==null) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst newState = proposed;\n\t\tnewState.stateNumber = dfa.states.length;\n\t\tconfigs.setReadonly(true);\n\t\tnewState.configs = configs;\n\t\tdfa.states.add(newState);\n\t\treturn newState;\n\t}\n\n\tgetDFA(mode) {\n\t\treturn this.decisionToDFA[mode];\n\t}\n\n// Get the text matched so far for the current token.\n\tgetText(input) {\n\t\t// index is first lookahead char, don't include.\n\t\treturn input.getText(this.startIndex, input.index - 1);\n\t}\n\n\tconsume(input) {\n\t\tconst curChar = input.LA(1);\n\t\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\t\tthis.line += 1;\n\t\t\tthis.column = 0;\n\t\t} else {\n\t\t\tthis.column += 1;\n\t\t}\n\t\tinput.consume();\n\t}\n\n\tgetTokenName(tt) {\n\t\tif (tt === -1) {\n\t\t\treturn \"EOF\";\n\t\t} else {\n\t\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t\t}\n\t}\n}\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nmodule.exports = LexerATNSimulator;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LexerActionType = {\n    // The type of a {@link LexerChannelAction} action.\n    CHANNEL: 0,\n    // The type of a {@link LexerCustomAction} action\n    CUSTOM: 1,\n    // The type of a {@link LexerModeAction} action.\n    MODE: 2,\n    //The type of a {@link LexerMoreAction} action.\n    MORE: 3,\n    //The type of a {@link LexerPopModeAction} action.\n    POP_MODE: 4,\n    //The type of a {@link LexerPushModeAction} action.\n    PUSH_MODE: 5,\n    //The type of a {@link LexerSkipAction} action.\n    SKIP: 6,\n    //The type of a {@link LexerTypeAction} action.\n    TYPE: 7\n}\n\nclass LexerAction {\n    constructor(action) {\n        this.actionType = action;\n        this.isPositionDependent = false;\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish()\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType);\n    }\n\n    equals(other) {\n        return this === other;\n    }\n}\n\n\n/**\n * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n *\n * <p>The {@code skip} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerSkipAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.SKIP);\n    }\n\n    execute(lexer) {\n        lexer.skip();\n    }\n\n    toString() {\n        return \"skip\";\n    }\n}\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\n/**\n * Implements the {@code type} lexer action by calling {@link Lexer//setType}\n * with the assigned type\n */\nclass LexerTypeAction extends LexerAction {\n    constructor(type) {\n        super(LexerActionType.TYPE);\n        this.type = type;\n    }\n\n    execute(lexer) {\n        lexer.type = this.type;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.type);\n    }\n\n    equals(other) {\n        if(this === other) {\n            return true;\n        } else if (! (other instanceof LexerTypeAction)) {\n            return false;\n        } else {\n            return this.type === other.type;\n        }\n    }\n\n    toString() {\n        return \"type(\" + this.type + \")\";\n    }\n}\n\n\n/**\n * Implements the {@code pushMode} lexer action by calling\n * {@link Lexer//pushMode} with the assigned mode\n */\nclass LexerPushModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.PUSH_MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//pushMode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.pushMode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerPushModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"pushMode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n *\n * <p>The {@code popMode} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerPopModeAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.POP_MODE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n\n    toString() {\n        return \"popMode\";\n    }\n}\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n/**\n * Implements the {@code more} lexer action by calling {@link Lexer//more}.\n *\n * <p>The {@code more} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerMoreAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.MORE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.more();\n    }\n\n    toString() {\n        return \"more\";\n    }\n}\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n\n/**\n * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n * the assigned mode\n */\nclass LexerModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//mode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.mode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"mode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer//action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer//action} when the grammar is compiled.\n *\n * <p>This class may represent embedded actions created with the <code>{...}</code>\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.</p>\n */\nclass LexerCustomAction extends LexerAction {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer//action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer//action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        super(LexerActionType.CUSTOM);\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>Custom actions are implemented by calling {@link Lexer//action} with the\n     * appropriate rule and action indexes.</p>\n     */\n    execute(lexer) {\n        lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerCustomAction)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n        }\n    }\n}\n\n/**\n * Implements the {@code channel} lexer action by calling\n * {@link Lexer//setChannel} with the assigned channel.\n * Constructs a new {@code channel} action with the specified channel value.\n * @param channel The channel value to pass to {@link Lexer//setChannel}\n */\nclass LexerChannelAction extends LexerAction {\n    constructor(channel) {\n        super(LexerActionType.CHANNEL);\n        this.channel = channel;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//setChannel} with the\n     * value provided by {@link //getChannel}.</p>\n     */\n    execute(lexer) {\n        lexer._channel = this.channel;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.channel);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerChannelAction)) {\n            return false;\n        } else {\n            return this.channel === other.channel;\n        }\n    }\n\n    toString() {\n        return \"channel(\" + this.channel + \")\";\n    }\n}\n\n\n/**\n * This implementation of {@link LexerAction} is used for tracking input offsets\n * for position-dependent actions within a {@link LexerActionExecutor}.\n *\n * <p>This action is not serialized as part of the ATN, and is only required for\n * position-dependent lexer actions which appear at a location other than the\n * end of a rule. For more information about DFA optimizations employed for\n * lexer actions, see {@link LexerActionExecutor//append} and\n * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n *\n * Constructs a new indexed custom action by associating a character offset\n * with a {@link LexerAction}.\n *\n * <p>Note: This class is only required for lexer actions for which\n * {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n *\n * @param offset The offset into the input {@link CharStream}, relative to\n * the token start index, at which the specified lexer action should be\n * executed.\n * @param action The lexer action to execute at a particular offset in the\n * input {@link CharStream}.\n */\nclass LexerIndexedCustomAction extends LexerAction {\n    constructor(offset, action) {\n        super(action.actionType);\n        this.offset = offset;\n        this.action = action;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>This method calls {@link //execute} on the result of {@link //getAction}\n     * using the provided {@code lexer}.</p>\n     */\n    execute(lexer) {\n        // assume the input stream position was properly set by the calling code\n        this.action.execute(lexer);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.offset, this.action);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerIndexedCustomAction)) {\n            return false;\n        } else {\n            return this.offset === other.offset && this.action === other.action;\n        }\n    }\n}\n\nmodule.exports = {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerIndexedCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {hashStuff} = require(\"../Utils\");\nconst {LexerIndexedCustomAction} = require('./LexerAction');\n\nclass LexerActionExecutor {\n\t/**\n\t * Represents an executor for a sequence of lexer actions which traversed during\n\t * the matching operation of a lexer rule (token).\n\t *\n\t * <p>The executor tracks position information for position-dependent lexer actions\n\t * efficiently, ensuring that actions appearing only at the end of the rule do\n\t * not cause bloating of the {@link DFA} created for the lexer.</p>\n\t */\n\tconstructor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t/**\n\t\t * Caches the result of {@link //hashCode} since the hash code is an element\n\t\t * of the performance-critical {@link LexerATNConfig//hashCode} operation\n\t\t */\n\t\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which encodes the current offset\n\t * for position-dependent lexer actions.\n\t *\n\t * <p>Normally, when the executor encounters lexer actions where\n\t * {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t * {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t * position to the <em>end</em> of the current token. This behavior provides\n\t * for efficient DFA representation of lexer actions which appear at the end\n\t * of a lexer rule, even when the lexer rule matches a variable number of\n\t * characters.</p>\n\t *\n\t * <p>Prior to traversing a match transition in the ATN, the current offset\n\t * from the token start index is assigned to all position-dependent lexer\n\t * actions which have not already been assigned a fixed offset. By storing\n\t * the offsets relative to the token start index, the DFA representation of\n\t * lexer actions which appear in the middle of tokens remains efficient due\n\t * to sharing among tokens of the same length, regardless of their absolute\n\t * position in the input stream.</p>\n\t *\n\t * <p>If the current executor already has offsets assigned to all\n\t * position-dependent lexer actions, the method returns {@code this}.</p>\n\t *\n\t * @param offset The current offset to assign to all position-dependent\n\t * lexer actions which do not already have offsets assigned.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n\t * for all position-dependent lexer actions.\n\t */\n\tfixOffsetBeforeMatch(offset) {\n\t\tlet updatedLexerActions = null;\n\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\t\tthis.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the actions encapsulated by this executor within the context of a\n\t * particular {@link Lexer}.\n\t *\n\t * <p>This method calls {@link IntStream//seek} to set the position of the\n\t * {@code input} {@link CharStream} prior to calling\n\t * {@link LexerAction//execute} on a position-dependent action. Before the\n\t * method returns, the input position will be restored to the same position\n\t * it was in when the method was invoked.</p>\n\t *\n\t * @param lexer The lexer instance.\n\t * @param input The input stream which is the source for the current token.\n\t * When this method is called, the current {@link IntStream//index} for\n\t * {@code input} should be the start of the following token, i.e. 1\n\t * character past the end of the current token.\n\t * @param startIndex The token start index. This value may be passed to\n\t * {@link IntStream//seek} to set the {@code input} position to the beginning\n\t * of the token.\n\t */\n\texecute(lexer, input, startIndex) {\n\t\tlet requiresSeek = false;\n\t\tconst stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tlet lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\t\tconst offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst numActions = this.lexerActions.length\n\t\t\tfor (let idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which executes the actions for\n\t * the input {@code lexerActionExecutor} followed by a specified\n\t * {@code lexerAction}.\n\t *\n\t * @param lexerActionExecutor The executor for actions already traversed by\n\t * the lexer while matching a token within a particular\n\t * {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t * though it were an empty executor.\n\t * @param lexerAction The lexer action to execute after the actions\n\t * specified in {@code lexerActionExecutor}.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n\t * of {@code lexerActionExecutor} and {@code lexerAction}.\n\t */\n\tstatic append(lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t\t}\n\t\tconst lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t}\n}\n\n\nmodule.exports = LexerActionExecutor;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = require('./../Utils');\nconst {Set, BitSet, DoubleDict} = Utils;\n\nconst ATN = require('./ATN');\nconst {ATNState, RuleStopState} = require('./ATNState');\n\nconst {ATNConfig} = require('./ATNConfig');\nconst {ATNConfigSet} = require('./ATNConfigSet');\nconst {Token} = require('./../Token');\nconst {DFAState, PredPrediction} = require('./../dfa/DFAState');\nconst ATNSimulator = require('./ATNSimulator');\nconst PredictionMode = require('./PredictionMode');\nconst RuleContext = require('./../RuleContext');\nconst ParserRuleContext = require('./../ParserRuleContext');\nconst {SemanticContext} = require('./SemanticContext');\nconst {PredictionContext} = require('./../PredictionContext');\nconst {Interval} = require('./../IntervalSet');\nconst {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = require('./Transition');\nconst {NoViableAltException} = require('./../error/Errors');\nconst {SingletonPredictionContext, predictionContextFromRuleContext} = require('./../PredictionContext');\n\n\n/**\n * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n *\n * <p>\n * The basic complexity of the adaptive strategy makes it harder to understand.\n * We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n * requests go through the DFA first. If they reach a state without an edge for\n * the current symbol, the algorithm fails over to the ATN simulation to\n * complete the DFA path for the current input (until it finds a conflict state\n * or uniquely predicting state).</p>\n *\n * <p>\n * All of that is done without using the outer context because we want to create\n * a DFA that is not dependent upon the rule invocation stack when we do a\n * prediction. One DFA works in all contexts. We avoid using context not\n * necessarily because it's slower, although it can be, but because of the DFA\n * caching problem. The closure routine only considers the rule invocation stack\n * created during prediction beginning in the decision rule. For example, if\n * prediction occurs without invoking another rule's ATN, there are no context\n * stacks in the configurations. When lack of context leads to a conflict, we\n * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n * strategy (versus full LL(*)).</p>\n *\n * <p>\n * When SLL yields a configuration set with conflict, we rewind the input and\n * retry the ATN simulation, this time using full outer context without adding\n * to the DFA. Configuration context stacks will be the full invocation stacks\n * from the start rule. If we get a conflict using full context, then we can\n * definitively say we have a true ambiguity for that input sequence. If we\n * don't get a conflict, it implies that the decision is sensitive to the outer\n * context. (It is not context-sensitive in the sense of context-sensitive\n * grammars.)</p>\n *\n * <p>\n * The next time we reach this DFA state with an SLL conflict, through DFA\n * simulation, we will again retry the ATN simulation using full context mode.\n * This is slow because we can't save the results and have to \"interpret\" the\n * ATN each time we get that input.</p>\n *\n * <p>\n * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n *\n * <p>\n * We could cache results from full context to predicted alternative easily and\n * that saves a lot of time but doesn't work in presence of predicates. The set\n * of visible predicates from the ATN start state changes depending on the\n * context, because closure can fall off the end of a rule. I tried to cache\n * tuples (stack context, semantic context, predicted alt) but it was slower\n * than interpreting and much more complicated. Also required a huge amount of\n * memory. The goal is not to create the world's fastest parser anyway. I'd like\n * to keep this algorithm simple. By launching multiple threads, we can improve\n * the speed of parsing across a large number of files.</p>\n *\n * <p>\n * There is no strict ordering between the amount of input used by SLL vs LL,\n * which makes it really hard to build a cache for full context. Let's say that\n * we have input A B C that leads to an SLL conflict with full context X. That\n * implies that using X we might only use A B but we could also use A B C D to\n * resolve conflict. Input A B C D could predict alternative 1 in one position\n * in the input and A B C E could predict alternative 2 in another position in\n * input. The conflicting SLL configurations could still be non-unique in the\n * full context prediction, which would lead us to requiring more input than the\n * original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n * input\tused during the previous prediction. That amounts to a cache that maps\n * X to a specific DFA for that context.</p>\n *\n * <p>\n * Something should be done for left-recursive expression predictions. They are\n * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n * with full LL thing Sam does.</p>\n *\n * <p>\n * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n *\n * <p>\n * We avoid doing full context retry when the outer context is empty, we did not\n * dip into the outer context by falling off the end of the decision state rule,\n * or when we force SLL mode.</p>\n *\n * <p>\n * As an example of the not dip into outer context case, consider as super\n * constructor calls versus function calls. One grammar might look like\n * this:</p>\n *\n * <pre>\n * ctorBody\n *   : '{' superCall? stat* '}'\n *   ;\n * </pre>\n *\n * <p>\n * Or, you might see something like</p>\n *\n * <pre>\n * stat\n *   : superCall ';'\n *   | expression ';'\n *   | ...\n *   ;\n * </pre>\n *\n * <p>\n * In both cases I believe that no closure operations will dip into the outer\n * context. In the first case ctorBody in the worst case will stop at the '}'.\n * In the 2nd case it should stop at the ';'. Both cases should stay within the\n * entry rule and not dip into the outer context.</p>\n *\n * <p>\n * <strong>PREDICATES</strong></p>\n *\n * <p>\n * Predicates are always evaluated if present in either SLL or LL both. SLL and\n * LL simulation deals with predicates differently. SLL collects predicates as\n * it performs closure operations like ANTLR v3 did. It delays predicate\n * evaluation until it reaches and accept state. This allows us to cache the SLL\n * ATN simulation whereas, if we had evaluated predicates on-the-fly during\n * closure, the DFA state configuration sets would be different and we couldn't\n * build up a suitable DFA.</p>\n *\n * <p>\n * When building a DFA accept state during ATN simulation, we evaluate any\n * predicates and return the sole semantically valid alternative. If there is\n * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n * we throw an exception. Alternatives without predicates act like they have\n * true predicates. The simple way to think about it is to strip away all\n * alternatives with false predicates and choose the minimum alternative that\n * remains.</p>\n *\n * <p>\n * When we start in the DFA and reach an accept state that's predicated, we test\n * those and return the minimum semantically viable alternative. If no\n * alternatives are viable, we throw an exception.</p>\n *\n * <p>\n * During full LL ATN simulation, closure always evaluates predicates and\n * on-the-fly. This is crucial to reducing the configuration set size during\n * closure. It hits a landmine when parsing with the Java grammar, for example,\n * without this on-the-fly evaluation.</p>\n *\n * <p>\n * <strong>SHARING DFA</strong></p>\n *\n * <p>\n * All instances of the same parser share the same decision DFAs through a\n * static field. Each instance gets its own ATN simulator but they share the\n * same {@link //decisionToDFA} field. They also share a\n * {@link PredictionContextCache} object that makes sure that all\n * {@link PredictionContext} objects are shared among the DFA states. This makes\n * a big size difference.</p>\n *\n * <p>\n * <strong>THREAD SAFETY</strong></p>\n *\n * <p>\n * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n * it adds a new DFA object to that array. {@link //addDFAEdge}\n * locks on the DFA for the current decision when setting the\n * {@link DFAState//edges} field. {@link //addDFAState} locks on\n * the DFA for the current decision when looking up a DFA state to see if it\n * already exists. We must make sure that all requests to add DFA states that\n * are equivalent result in the same shared DFA object. This is because lots of\n * threads will be trying to update the DFA at once. The\n * {@link //addDFAState} method also locks inside the DFA lock\n * but this time on the shared context cache when it rebuilds the\n * configurations' {@link PredictionContext} objects using cached\n * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n * safe as long as we can guarantee that all threads referencing\n * {@code s.edge[t]} get the same physical target {@link DFAState}, or\n * {@code null}. Once into the DFA, the DFA simulation does not reference the\n * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n * targets. The DFA simulator will either find {@link DFAState//edges} to be\n * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n * {@code dfa.edges[t]} to be non-null. The\n * {@link //addDFAEdge} method could be racing to set the field\n * but in either case the DFA simulator works; if {@code null}, and requests ATN\n * simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n * way it will work because it's not doing a test and set operation.</p>\n *\n * <p>\n * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n * Parsing)</strong></p>\n *\n * <p>\n * Sam pointed out that if SLL does not give a syntax error, then there is no\n * point in doing full LL, which is slower. We only have to try LL if we get a\n * syntax error. For maximum speed, Sam starts the parser set to pure SLL\n * mode with the {@link BailErrorStrategy}:</p>\n *\n * <pre>\n * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n * </pre>\n *\n * <p>\n * If it does not get a syntax error, then we're done. If it does get a syntax\n * error, we need to retry with the combined SLL/LL strategy.</p>\n *\n * <p>\n * The reason this works is as follows. If there are no SLL conflicts, then the\n * grammar is SLL (at least for that input set). If there is an SLL conflict,\n * the full LL analysis must yield a set of viable alternatives which is a\n * subset of the alternatives reported by SLL. If the LL set is a singleton,\n * then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n * set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n * is truly ambiguous on the current input. If the LL set is smaller, then the\n * SLL conflict resolution might choose an alternative that the full LL would\n * rule out as a possibility based upon better context information. If that's\n * the case, then the SLL parse will definitely get an error because the full LL\n * analysis says it's not viable. If SLL conflict resolution chooses an\n * alternative within the LL set, them both SLL and LL would choose the same\n * alternative because they both choose the minimum of multiple conflicting\n * alternatives.</p>\n *\n * <p>\n * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n * parsing will get an error because SLL will pursue alternative 1. If\n * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n * choose the same alternative because alternative one is the minimum of either\n * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n *\n * <p>\n * Of course, if the input is invalid, then we will get an error for sure in\n * both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n * the input.</p>\n */\nclass ParserATNSimulator extends ATNSimulator {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.parser = parser;\n        this.decisionToDFA = decisionToDFA;\n        // SLL, LL, or LL + exact ambig detection?//\n        this.predictionMode = PredictionMode.LL;\n        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n        this._input = null;\n        this._startIndex = 0;\n        this._outerContext = null;\n        this._dfa = null;\n        /**\n         * Each prediction operation uses a cache for merge of prediction contexts.\n         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n         *  isn't synchronized but we're ok since two threads shouldn't reuse same\n         *  parser/atnsim object because it can only handle one input at a time.\n         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n         *  also be examined during cache lookup.\n         */\n        this.mergeCache = null;\n        this.debug = false;\n        this.debug_closure = false;\n        this.debug_add = false;\n        this.debug_list_atn_decisions = false;\n        this.dfa_debug = false;\n        this.retry_debug = false;\n    }\n\n    reset() {}\n\n    adaptivePredict(input, decision, outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"adaptivePredict decision \" + decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \" line \" + input.LT(1).line + \":\" +\n                                   input.LT(1).column);\n        }\n        this._input = input;\n        this._startIndex = input.index;\n        this._outerContext = outerContext;\n\n        const dfa = this.decisionToDFA[decision];\n        this._dfa = dfa;\n        const m = input.mark();\n        const index = input.index;\n\n        // Now we are certain to have a specific decision's DFA\n        // But, do we still need an initial state?\n        try {\n            let s0;\n            if (dfa.precedenceDfa) {\n                // the start state for a precedence DFA depends on the current\n                // parser precedence, and is provided by a DFA method.\n                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n            } else {\n                // the start state for a \"regular\" DFA is just s0\n                s0 = dfa.s0;\n            }\n            if (s0===null) {\n                if (outerContext===null) {\n                    outerContext = RuleContext.EMPTY;\n                }\n                if (this.debug || this.debug_list_atn_decisions) {\n                    console.log(\"predictATN decision \" + dfa.decision +\n                                       \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                       \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n                }\n\n                const fullCtx = false;\n                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n                if( dfa.precedenceDfa) {\n                    // If this is a precedence DFA, we use applyPrecedenceFilter\n                    // to convert the computed start state to a precedence start\n                    // state. We then use DFA.setPrecedenceStartState to set the\n                    // appropriate start state for the precedence level rather\n                    // than simply setting DFA.s0.\n                    //\n                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                    s0_closure = this.applyPrecedenceFilter(s0_closure);\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n                } else {\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.s0 = s0;\n                }\n            }\n            const alt = this.execATN(dfa, s0, input, index, outerContext);\n            if (this.debug) {\n                console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n            }\n            return alt;\n        } finally {\n            this._dfa = null;\n            this.mergeCache = null; // wack cache after each prediction\n            input.seek(index);\n            input.release(m);\n        }\n    }\n\n    /**\n     * Performs ATN simulation to compute a predicted alternative based\n     *  upon the remaining input, but also updates the DFA cache to avoid\n     *  having to traverse the ATN again for the same input sequence.\n     *\n     * There are some key conditions we're looking for after computing a new\n     * set of ATN configs (proposed DFA state):\n     *       if the set is empty, there is no viable alternative for current symbol\n     *       does the state uniquely predict an alternative?\n     *       does the state have a conflict that would prevent us from\n     *         putting it on the work list?\n     *\n     * We also have some key operations to do:\n     *       add an edge from previous DFA state to potentially new DFA state, D,\n     *         upon current symbol but only if adding to work list, which means in all\n     *         cases except no viable alternative (and possibly non-greedy decisions?)\n     *       collecting predicates and adding semantic context to DFA accept states\n     *       adding rule context to context-sensitive DFA accept states\n     *       consuming an input symbol\n     *       reporting a conflict\n     *       reporting an ambiguity\n     *       reporting a context sensitivity\n     *       reporting insufficient predicates\n     *\n     * cover these cases:\n     *    dead end\n     *    single alt\n     *    single alt + preds\n     *    conflict\n     *    conflict + preds\n     *\n     */\n    execATN(dfa, s0, input, startIndex, outerContext ) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATN decision \" + dfa.decision +\n                    \" exec LA(1)==\" + this.getLookaheadName(input) +\n                    \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n        }\n        let alt;\n        let previousD = s0;\n\n        if (this.debug) {\n            console.log(\"s0 = \" + s0);\n        }\n        let t = input.LA(1);\n        while(true) { // while more work\n            let D = this.getExistingTargetState(previousD, t);\n            if(D===null) {\n                D = this.computeTargetState(dfa, previousD, t);\n            }\n            if(D===ATNSimulator.ERROR) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for SLL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n                input.seek(startIndex);\n                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n                let conflictingAlts = null;\n                if (D.predicates!==null) {\n                    if (this.debug) {\n                        console.log(\"DFA state has preds in DFA sim LL failover\");\n                    }\n                    const conflictIndex = input.index;\n                    if(conflictIndex !== startIndex) {\n                        input.seek(startIndex);\n                    }\n                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                    if (conflictingAlts.length===1) {\n                        if(this.debug) {\n                            console.log(\"Full LL avoided\");\n                        }\n                        return conflictingAlts.minValue();\n                    }\n                    if (conflictIndex !== startIndex) {\n                        // restore the index so reporting the fallback to full\n                        // context occurs with the index at the correct spot\n                        input.seek(conflictIndex);\n                    }\n                }\n                if (this.dfa_debug) {\n                    console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n                }\n                const fullCtx = true;\n                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n                return alt;\n            }\n            if (D.isAcceptState) {\n                if (D.predicates===null) {\n                    return D.prediction;\n                }\n                const stopIndex = input.index;\n                input.seek(startIndex);\n                const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (alts.length===0) {\n                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                } else if (alts.length===1) {\n                    return alts.minValue();\n                } else {\n                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                    return alts.minValue();\n                }\n            }\n            previousD = D;\n\n            if (t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(previousD, t) {\n        const edges = previousD.edges;\n        if (edges===null) {\n            return null;\n        } else {\n            return edges[t + 1] || null;\n        }\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param dfa The DFA\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR\n     */\n    computeTargetState(dfa, previousD, t) {\n       const reach = this.computeReachSet(previousD.configs, t, false);\n        if(reach===null) {\n            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n            return ATNSimulator.ERROR;\n        }\n        // create new target state; we'll add to DFA after it's complete\n        let D = new DFAState(null, reach);\n\n        const predictedAlt = this.getUniqueAlt(reach);\n\n        if (this.debug) {\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) +\n                        \", previous=\" + previousD.configs +\n                        \", configs=\" + reach +\n                        \", predict=\" + predictedAlt +\n                        \", allSubsetsConflict=\" +\n                        PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                        this.getConflictingAlts(reach));\n        }\n        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n            // NO CONFLICT, UNIQUELY PREDICTED ALT\n            D.isAcceptState = true;\n            D.configs.uniqueAlt = predictedAlt;\n            D.prediction = predictedAlt;\n        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n            // MORE THAN ONE VIABLE ALTERNATIVE\n            D.configs.conflictingAlts = this.getConflictingAlts(reach);\n            D.requiresFullContext = true;\n            // in SLL-only mode, we will stop at this state and return the minimum alt\n            D.isAcceptState = true;\n            D.prediction = D.configs.conflictingAlts.minValue();\n        }\n        if (D.isAcceptState && D.configs.hasSemanticContext) {\n            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n            if( D.predicates!==null) {\n                D.prediction = ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        // all adds to dfa are done after we've created full D state\n        D = this.addDFAEdge(dfa, previousD, t, D);\n        return D;\n    }\n\n    predicateDFAState(dfaState, decisionState) {\n        // We need to test all predicates, even in DFA states that\n        // uniquely predict alternative.\n        const nalts = decisionState.transitions.length;\n        // Update DFA so reach becomes accept state with (predicate,alt)\n        // pairs if preds found for conflicting alts\n        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n        if (altToPred!==null) {\n            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n        } else {\n            // There are preds in configs but they might go away\n            // when OR'd together like {p}? || NONE == NONE. If neither\n            // alt has preds, resolve to min alt\n            dfaState.prediction = altsToCollectPredsFrom.minValue();\n        }\n    }\n\n// comes back with reach.uniqueAlt set to a valid alt\n    execATNWithFullContext(dfa, D, // how far we got before failing over\n                                         s0,\n                                         input,\n                                         startIndex,\n                                         outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATNWithFullContext \"+s0);\n        }\n        const fullCtx = true;\n        let foundExactAmbig = false;\n        let reach;\n        let previous = s0;\n        input.seek(startIndex);\n        let t = input.LA(1);\n        let predictedAlt = -1;\n        while (true) { // while more work\n            reach = this.computeReachSet(previous, t, fullCtx);\n            if (reach===null) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for LL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previous, startIndex);\n                input.seek(startIndex);\n                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            if(this.debug) {\n                console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                      PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n            }\n            reach.uniqueAlt = this.getUniqueAlt(reach);\n            // unique prediction?\n            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n                predictedAlt = reach.uniqueAlt;\n                break;\n            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                    break;\n                }\n            } else {\n                // In exact ambiguity mode, we never try to terminate early.\n                // Just keeps scarfing until we know what the conflict is\n                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                    foundExactAmbig = true;\n                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                    break;\n                }\n                // else there are multiple non-conflicting subsets or\n                // we're not sure what the ambiguity is yet.\n                // So, keep going.\n            }\n            previous = reach;\n            if( t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n        // If the configuration set uniquely predicts an alternative,\n        // without conflict, then we know that it's a full LL decision\n        // not SLL.\n        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n            return predictedAlt;\n        }\n        // We do not check predicates here because we have checked them\n        // on-the-fly when doing full context prediction.\n\n        //\n        // In non-exact ambiguity detection mode, we might\tactually be able to\n        // detect an exact ambiguity, but I'm not going to spend the cycles\n        // needed to check. We only emit ambiguity warnings in exact ambiguity\n        // mode.\n        //\n        // For example, we might know that we have conflicting configurations.\n        // But, that does not mean that there is no way forward without a\n        // conflict. It's possible to have nonconflicting alt subsets as in:\n\n        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n        // from\n        //\n        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n        //\n        // In this case, (17,1,[5 $]) indicates there is some next sequence that\n        // would resolve this without conflict to alternative 1. Any other viable\n        // next sequence, however, is associated with a conflict.  We stop\n        // looking for input because no amount of further lookahead will alter\n        // the fact that we should predict alternative 1.  We just can't say for\n        // sure that there is an ambiguity without looking further.\n\n        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n        return predictedAlt;\n    }\n\n    computeReachSet(closure, t, fullCtx) {\n        if (this.debug) {\n            console.log(\"in computeReachSet, starting closure: \" + closure);\n        }\n        if( this.mergeCache===null) {\n            this.mergeCache = new DoubleDict();\n        }\n        const intermediate = new ATNConfigSet(fullCtx);\n\n        // Configurations already in a rule stop state indicate reaching the end\n        // of the decision rule (local context) or end of the start rule (full\n        // context). Once reached, these configurations are never updated by a\n        // closure operation, so they are handled separately for the performance\n        // advantage of having a smaller intermediate set when calling closure.\n        //\n        // For full-context reach operations, separate handling is required to\n        // ensure that the alternative matching the longest overall sequence is\n        // chosen when multiple such configurations can match the input.\n\n        let skippedStopStates = null;\n\n        // First figure out where we can reach on input t\n        for (let i=0; i<closure.items.length;i++) {\n            const c = closure.items[i];\n            if(this.debug) {\n                console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n            }\n            if (c.state instanceof RuleStopState) {\n                if (fullCtx || t === Token.EOF) {\n                    if (skippedStopStates===null) {\n                        skippedStopStates = [];\n                    }\n                    skippedStopStates.push(c);\n                    if(this.debug_add) {\n                        console.log(\"added \" + c + \" to skippedStopStates\");\n                    }\n                }\n                continue;\n            }\n            for(let j=0;j<c.state.transitions.length;j++) {\n                const trans = c.state.transitions[j];\n                const target = this.getReachableTarget(trans, t);\n                if (target!==null) {\n                    const cfg = new ATNConfig({state:target}, c);\n                    intermediate.add(cfg, this.mergeCache);\n                    if(this.debug_add) {\n                        console.log(\"added \" + cfg + \" to intermediate\");\n                    }\n                }\n            }\n        }\n        // Now figure out where the reach operation can take us...\n        let reach = null;\n\n        // This block optimizes the reach operation for intermediate sets which\n        // trivially indicate a termination state for the overall\n        // adaptivePredict operation.\n        //\n        // The conditions assume that intermediate\n        // contains all configurations relevant to the reach set, but this\n        // condition is not true when one or more configurations have been\n        // withheld in skippedStopStates, or when the current symbol is EOF.\n        //\n        if (skippedStopStates===null && t!==Token.EOF) {\n            if (intermediate.items.length===1) {\n                // Don't pursue the closure if there is just one state.\n                // It can only have one alternative; just add to result\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            }\n        }\n        // If the reach set could not be trivially determined, perform a closure\n        // operation on the intermediate set to compute its initial value.\n        //\n        if (reach===null) {\n            reach = new ATNConfigSet(fullCtx);\n            const closureBusy = new Set();\n            const treatEofAsEpsilon = t === Token.EOF;\n            for (let k=0; k<intermediate.items.length;k++) {\n                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n            }\n        }\n        if (t === Token.EOF) {\n            // After consuming EOF no additional input is possible, so we are\n            // only interested in configurations which reached the end of the\n            // decision rule (local context) or end of the start rule (full\n            // context). Update reach to contain only these configurations. This\n            // handles both explicit EOF transitions in the grammar and implicit\n            // EOF transitions following the end of the decision or start rule.\n            //\n            // When reach==intermediate, no closure operation was performed. In\n            // this case, removeAllConfigsNotInRuleStopState needs to check for\n            // reachable rule stop states as well as configurations already in\n            // a rule stop state.\n            //\n            // This is handled before the configurations in skippedStopStates,\n            // because any configurations potentially added from that list are\n            // already guaranteed to meet this condition whether or not it's\n            // required.\n            //\n            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n        }\n        // If skippedStopStates!==null, then it contains at least one\n        // configuration. For full-context reach operations, these\n        // configurations reached the end of the start rule, in which case we\n        // only add them back to reach if no configuration during the current\n        // closure operation reached such a state. This ensures adaptivePredict\n        // chooses an alternative matching the longest overall sequence when\n        // multiple alternatives are viable.\n        //\n        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n            for (let l=0; l<skippedStopStates.length;l++) {\n                reach.add(skippedStopStates[l], this.mergeCache);\n            }\n        }\n        if (reach.items.length===0) {\n            return null;\n        } else {\n            return reach;\n        }\n    }\n\n    /**\n     * Return a configuration set containing only the configurations from\n     * {@code configs} which are in a {@link RuleStopState}. If all\n     * configurations in {@code configs} are already in a rule stop state, this\n     * method simply returns {@code configs}.\n     *\n     * <p>When {@code lookToEndOfRule} is true, this method uses\n     * {@link ATN//nextTokens} for each configuration in {@code configs} which is\n     * not already in a rule stop state to see if a rule stop state is reachable\n     * from the configuration via epsilon-only transitions.</p>\n     *\n     * @param configs the configuration set to update\n     * @param lookToEndOfRule when true, this method checks for rule stop states\n     * reachable by epsilon-only transitions from each configuration in\n     * {@code configs}.\n     *\n     * @return {@code configs} if all configurations in {@code configs} are in a\n     * rule stop state, otherwise return a new configuration set containing only\n     * the configurations from {@code configs} which are in a rule stop state\n     */\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return configs;\n        }\n        const result = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length;i++) {\n            const config = configs.items[i];\n            if (config.state instanceof RuleStopState) {\n                result.add(config, this.mergeCache);\n                continue;\n            }\n            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n                const nextTokens = this.atn.nextTokens(config.state);\n                if (nextTokens.contains(Token.EPSILON)) {\n                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n                }\n            }\n        }\n        return result;\n    }\n\n    computeStartState(p, ctx, fullCtx) {\n        // always at least the implicit call to start rule\n        const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n        const configs = new ATNConfigSet(fullCtx);\n        for(let i=0;i<p.transitions.length;i++) {\n            const target = p.transitions[i].target;\n            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n            const closureBusy = new Set();\n            this.closure(c, configs, closureBusy, true, fullCtx, false);\n        }\n        return configs;\n    }\n\n    /**\n     * This method transforms the start state computed by\n     * {@link //computeStartState} to the special start state used by a\n     * precedence DFA for a particular precedence value. The transformation\n     * process applies the following changes to the start state's configuration\n     * set.\n     *\n     * <ol>\n     * <li>Evaluate the precedence predicates for each configuration using\n     * {@link SemanticContext//evalPrecedence}.</li>\n     * <li>Remove all configurations which predict an alternative greater than\n     * 1, for which another configuration that predicts alternative 1 is in the\n     * same ATN state with the same prediction context. This transformation is\n     * valid for the following reasons:\n     * <ul>\n     * <li>The closure block cannot contain any epsilon transitions which bypass\n     * the body of the closure, so all states reachable via alternative 1 are\n     * part of the precedence alternatives of the transformed left-recursive\n     * rule.</li>\n     * <li>The \"primary\" portion of a left recursive rule cannot contain an\n     * epsilon transition, so the only way an alternative other than 1 can exist\n     * in a state that is also reachable via alternative 1 is by nesting calls\n     * to the left-recursive rule, with the outer calls not being at the\n     * preferred precedence level.</li>\n     * </ul>\n     * </li>\n     * </ol>\n     *\n     * <p>\n     * The prediction context must be considered by this filter to address\n     * situations like the following.\n     * </p>\n     * <code>\n     * <pre>\n     * grammar TA;\n     * prog: statement* EOF;\n     * statement: letterA | statement letterA 'b' ;\n     * letterA: 'a';\n     * </pre>\n     * </code>\n     * <p>\n     * If the above grammar, the ATN state immediately before the token\n     * reference {@code 'a'} in {@code letterA} is reachable from the left edge\n     * of both the primary and closure blocks of the left-recursive rule\n     * {@code statement}. The prediction context associated with each of these\n     * configurations distinguishes between them, and prevents the alternative\n     * which stepped out to {@code prog} (and then back in to {@code statement}\n     * from being eliminated by the filter.\n     * </p>\n     *\n     * @param configs The configuration set computed by\n     * {@link //computeStartState} as the start state for the DFA.\n     * @return The transformed configuration set representing the start state\n     * for a precedence DFA at a particular precedence level (determined by\n     * calling {@link Parser//getPrecedence})\n     */\n    applyPrecedenceFilter(configs) {\n        let config;\n        const statesFromAlt1 = [];\n        const configSet = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            // handle alt 1 first\n            if (config.alt !== 1) {\n                continue;\n            }\n            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n            if (updatedContext===null) {\n                // the configuration was eliminated\n                continue;\n            }\n            statesFromAlt1[config.state.stateNumber] = config.context;\n            if (updatedContext !== config.semanticContext) {\n                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n            } else {\n                configSet.add(config, this.mergeCache);\n            }\n        }\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            if (config.alt === 1) {\n                // already handled\n                continue;\n            }\n            // In the future, this elimination step could be updated to also\n            // filter the prediction context for alternatives predicting alt>1\n            // (basically a graph subtraction algorithm).\n            if (!config.precedenceFilterSuppressed) {\n                const context = statesFromAlt1[config.state.stateNumber] || null;\n                if (context!==null && context.equals(config.context)) {\n                    // eliminated\n                    continue;\n                }\n            }\n            configSet.add(config, this.mergeCache);\n        }\n        return configSet;\n    }\n\n    getReachableTarget(trans, ttype) {\n        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n        // altToPred starts as an array of all null contexts. The entry at index i\n        // corresponds to alternative i. altToPred[i] may have one of three values:\n        //   1. null: no ATNConfig c is found such that c.alt==i\n        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n        //      alt i has at least one unpredicated config.\n        //   3. Non-NONE Semantic Context: There exists at least one, and for all\n        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n        //\n        // From this, it is clear that NONE||anything==NONE.\n        //\n        let altToPred = [];\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if(ambigAlts.contains( c.alt )) {\n                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n            }\n        }\n        let nPredAlts = 0;\n        for (let i =1;i< nalts+1;i++) {\n            const pred = altToPred[i] || null;\n            if (pred===null) {\n                altToPred[i] = SemanticContext.NONE;\n            } else if (pred !== SemanticContext.NONE) {\n                nPredAlts += 1;\n            }\n        }\n        // nonambig alts are null in altToPred\n        if (nPredAlts===0) {\n            altToPred = null;\n        }\n        if (this.debug) {\n            console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n        }\n        return altToPred;\n    }\n\n    getPredicatePredictions(ambigAlts, altToPred) {\n        const pairs = [];\n        let containsPredicate = false;\n        for (let i=1; i<altToPred.length;i++) {\n            const pred = altToPred[i];\n            // unpredicated is indicated by SemanticContext.NONE\n            if( ambigAlts!==null && ambigAlts.contains( i )) {\n                pairs.push(new PredPrediction(pred, i));\n            }\n            if (pred !== SemanticContext.NONE) {\n                containsPredicate = true;\n            }\n        }\n        if (! containsPredicate) {\n            return null;\n        }\n        return pairs;\n    }\n\n    /**\n     * This method is used to improve the localization of error messages by\n     * choosing an alternative rather than throwing a\n     * {@link NoViableAltException} in particular prediction scenarios where the\n     * {@link //ERROR} state was reached during ATN simulation.\n     *\n     * <p>\n     * The default implementation of this method uses the following\n     * algorithm to identify an ATN configuration which successfully parsed the\n     * decision entry rule. Choosing such an alternative ensures that the\n     * {@link ParserRuleContext} returned by the calling rule will be complete\n     * and valid, and the syntax error will be reported later at a more\n     * localized location.</p>\n     *\n     * <ul>\n     * <li>If a syntactically valid path or paths reach the end of the decision rule and\n     * they are semantically valid if predicated, return the min associated alt.</li>\n     * <li>Else, if a semantically invalid but syntactically valid path exist\n     * or paths exist, return the minimum associated alt.\n     * </li>\n     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n     * </ul>\n     *\n     * <p>\n     * In some scenarios, the algorithm described above could predict an\n     * alternative which will result in a {@link FailedPredicateException} in\n     * the parser. Specifically, this could occur if the <em>only</em> configuration\n     * capable of successfully parsing to the end of the decision rule is\n     * blocked by a semantic predicate. By choosing this alternative within\n     * {@link //adaptivePredict} instead of throwing a\n     * {@link NoViableAltException}, the resulting\n     * {@link FailedPredicateException} in the parser will identify the specific\n     * predicate which is preventing the parser from successfully parsing the\n     * decision rule, which helps developers identify and correct logic errors\n     * in semantic predicates.\n     * </p>\n     *\n     * @param configs The ATN configurations which were valid immediately before\n     * the {@link //ERROR} state was reached\n     * @param outerContext The is the \\gamma_0 initial parser context from the paper\n     * or the parser stack at the instant before prediction commences.\n     *\n     * @return The value to return from {@link //adaptivePredict}, or\n     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n     * identified and {@link //adaptivePredict} should report an error instead\n     */\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n        const semValidConfigs = cfgs[0];\n        const semInvalidConfigs = cfgs[1];\n        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n            return alt;\n        }\n        // Is there a syntactically valid path with a failed pred?\n        if (semInvalidConfigs.items.length>0) {\n            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n                return alt;\n            }\n        }\n        return ATN.INVALID_ALT_NUMBER;\n    }\n\n    getAltThatFinishedDecisionEntryRule(configs) {\n        const alts = [];\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n                if(alts.indexOf(c.alt)<0) {\n                    alts.push(c.alt);\n                }\n            }\n        }\n        if (alts.length===0) {\n            return ATN.INVALID_ALT_NUMBER;\n        } else {\n            return Math.min.apply(null, alts);\n        }\n    }\n\n    /**\n     * Walk the list of configurations and split them according to\n     * those that have preds evaluating to true/false.  If no pred, assume\n     * true pred and include in succeeded set.  Returns Pair of sets.\n     *\n     * Create a new set so as not to alter the incoming parameter.\n     *\n     * Assumption: the input stream has been restored to the starting point\n     * prediction, which is where predicates need to evaluate.*/\n    splitAccordingToSemanticValidity( configs, outerContext) {\n        const succeeded = new ATNConfigSet(configs.fullCtx);\n        const failed = new ATNConfigSet(configs.fullCtx);\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.semanticContext !== SemanticContext.NONE) {\n                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n                if (predicateEvaluationResult) {\n                    succeeded.add(c);\n                } else {\n                    failed.add(c);\n                }\n            } else {\n                succeeded.add(c);\n            }\n        }\n        return [succeeded, failed];\n    }\n\n    /**\n     * Look through a list of predicate/alt pairs, returning alts for the\n     * pairs that win. A {@code NONE} predicate indicates an alt containing an\n     * unpredicated config which behaves as \"always true.\" If !complete\n     * then we stop at the first predicate that evaluates to true. This\n     * includes pairs with null predicates.\n     */\n    evalSemanticContext(predPredictions, outerContext, complete) {\n        const predictions = new BitSet();\n        for(let i=0;i<predPredictions.length;i++) {\n            const pair = predPredictions[i];\n            if (pair.pred === SemanticContext.NONE) {\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n                continue;\n            }\n            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n            if (this.debug || this.dfa_debug) {\n                console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n            }\n            if (predicateEvaluationResult) {\n                if (this.debug || this.dfa_debug) {\n                    console.log(\"PREDICT \" + pair.alt);\n                }\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n            }\n        }\n        return predictions;\n    }\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n        const initialDepth = 0;\n        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        if (this.debug || this.debug_closure) {\n            console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n            // console.log(\"configs(\" + configs.toString() + \")\");\n            if(config.reachesIntoOuterContext>50) {\n                throw \"problem\";\n            }\n        }\n        if (config.state instanceof RuleStopState) {\n            // We hit rule end. If we have context info, use it\n            // run thru all possible stack tops in ctx\n            if (! config.context.isEmpty()) {\n                for (let i =0; i<config.context.length; i++) {\n                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                        if (fullCtx) {\n                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                            continue;\n                        } else {\n                            // we have no context info, just chase follow links (if greedy)\n                            if (this.debug) {\n                                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                            }\n                            this.closure_(config, configs, closureBusy, collectPredicates,\n                                     fullCtx, depth, treatEofAsEpsilon);\n                        }\n                        continue;\n                    }\n                    const returnState = this.atn.states[config.context.getReturnState(i)];\n                    const newContext = config.context.getParent(i); // \"pop\" return state\n                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                    const c = new ATNConfig(parms, null);\n                    // While we have context to pop back from, we may have\n                    // gotten that context AFTER having falling off a rule.\n                    // Make sure we track that we are now out of context.\n                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n                }\n                return;\n            } else if( fullCtx) {\n                // reached end of start rule\n                configs.add(config, this.mergeCache);\n                return;\n            } else {\n                // else if we have no context info, just chase follow links (if greedy)\n                if (this.debug) {\n                    console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n            }\n        }\n        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n\n    // Do the actual work of walking epsilon edges//\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        const p = config.state;\n        // optimization\n        if (! p.epsilonOnlyTransitions) {\n            configs.add(config, this.mergeCache);\n            // make sure to not return here, because EOF transitions can act as\n            // both epsilon transitions and non-epsilon transitions.\n        }\n        for(let i = 0;i<p.transitions.length; i++) {\n            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n                continue;\n\n            const t = p.transitions[i];\n            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n            if (c!==null) {\n                let newDepth = depth;\n                if ( config.state instanceof RuleStopState) {\n                    // target fell off end of rule; mark resulting c as having dipped into outer context\n                    // We can't get here if incoming config was rule stop and we had context\n                    // track how far we dip into outer context.  Might\n                    // come in handy and we avoid evaluating context dependent\n                    // preds if this is > 0.\n                    if (this._dfa !== null && this._dfa.precedenceDfa) {\n                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                            c.precedenceFilterSuppressed = true;\n                        }\n                    }\n\n                    c.reachesIntoOuterContext += 1;\n                    if (closureBusy.add(c)!==c) {\n                        // avoid infinite recursion for right-recursive rules\n                        continue;\n                    }\n                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                    newDepth -= 1;\n                    if (this.debug) {\n                        console.log(\"dips into outer ctx: \" + c);\n                    }\n                } else {\n                    if (!t.isEpsilon && closureBusy.add(c)!==c){\n                        // avoid infinite recursion for EOF* and EOF+\n                        continue;\n                    }\n                    if (t instanceof RuleTransition) {\n                        // latch when newDepth goes negative - once we step out of the entry context we can't return\n                        if (newDepth >= 0) {\n                            newDepth += 1;\n                        }\n                    }\n                }\n                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n            }\n        }\n    }\n\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n        // return False\n        const p = config.state;\n        // First check to see if we are in StarLoopEntryState generated during\n        // left-recursion elimination. For efficiency, also check if\n        // the context has an empty stack case. If so, it would mean\n        // global FOLLOW so we can't perform optimization\n        // Are we the special loop entry/exit state? or SLL wildcard\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY)\n            return false;\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n               config.context.isEmpty() || config.context.hasEmptyPath())\n            return false;\n\n        // Require all return states to return back to the same rule that p is in.\n        const numCtxs = config.context.length;\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            if (returnState.ruleIndex !== p.ruleIndex)\n                return false;\n        }\n\n        const decisionStartState = p.transitions[0].target;\n        const blockEndStateNum = decisionStartState.endState.stateNumber;\n        const blockEndState = this.atn.states[blockEndStateNum];\n\n        // Verify that the top of each stack context leads to loop entry/exit\n        // state through epsilon edges and w/o leaving rule.\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnStateNumber = config.context.getReturnState(i);\n            const returnState = this.atn.states[returnStateNumber];\n            // all states must have single outgoing epsilon edge\n            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)\n                return false;\n\n            // Look for prefix op case like 'not expr', (' type ')' expr\n            const returnStateTarget = returnState.transitions[0].target;\n            if ( returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p )\n                continue;\n\n            // Look for 'expr op expr' or case where expr's return state is block end\n            // of (...)* internal block; the block end points to loop back\n            // which points to p but we don't need to check that\n            if ( returnState === blockEndState )\n                continue;\n\n            // Look for ternary expr ? expr : expr. The return state points at block end,\n            // which points at loop entry state\n            if ( returnStateTarget === blockEndState )\n                continue;\n\n            // Look for complex prefix 'between expr and expr' case where 2nd expr's\n            // return state points at block end state of (...)* internal block\n            if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1\n                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)\n                continue;\n\n            // anything else ain't conforming\n            return false;\n        }\n        return true;\n    }\n\n    getRuleName(index) {\n        if (this.parser!==null && index>=0) {\n            return this.parser.ruleNames[index];\n        } else {\n            return \"<rule \" + index + \">\";\n        }\n    }\n\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n        switch(t.serializationType) {\n        case Transition.RULE:\n            return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n            return this.actionTransition(config, t);\n        case Transition.EPSILON:\n            return new ATNConfig({state:t.target}, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(Token.EOF, 0, 1)) {\n                    return new ATNConfig({state: t.target}, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n        }\n    }\n\n    actionTransition(config, t) {\n        if (this.debug) {\n            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;\n            console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n        }\n        return new ATNConfig({state:t.target}, config);\n    }\n\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                    pt.precedence + \">=_p, ctx dependent=true\");\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && inContext) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                    \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    ruleTransition(config, t) {\n        if (this.debug) {\n            console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n        }\n        const returnState = t.followState;\n        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n        return new ATNConfig({state:t.target, context:newContext}, config );\n    }\n\n    getConflictingAlts(configs) {\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.getAlts(altsets);\n    }\n\n    /**\n     * Sam pointed out a problem with the previous definition, v3, of\n     * ambiguous states. If we have another state associated with conflicting\n     * alternatives, we should keep going. For example, the following grammar\n     *\n     * s : (ID | ID ID?) ';' ;\n     *\n     * When the ATN simulation reaches the state before ';', it has a DFA\n     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n     * because alternative to has another way to continue, via [6|2|[]].\n     * The key is that we have a single state that has config's only associated\n     * with a single alternative, 2, and crucially the state transitions\n     * among the configurations are all non-epsilon transitions. That means\n     * we don't consider any conflicts that include alternative 2. So, we\n     * ignore the conflict between alts 1 and 2. We ignore a set of\n     * conflicting alts when there is an intersection with an alternative\n     * associated with a single alt state in the state&rarr;config-list map.\n     *\n     * It's also the case that we might have two conflicting configurations but\n     * also a 3rd nonconflicting configuration for a different alternative:\n     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n     *\n     * a : A | A | A B ;\n     *\n     * After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not\n     * stop working on this state. In the previous example, we're concerned\n     * with states associated with the conflicting alternatives. Here alt\n     * 3 is not associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, I don't declare the state done. We\n     * ignore a set of conflicting alts when we have an alternative\n     * that we still need to pursue\n     */\n    getConflictingAltsOrUniqueAlt(configs) {\n        let conflictingAlts = null;\n        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n            conflictingAlts = new BitSet();\n            conflictingAlts.add(configs.uniqueAlt);\n        } else {\n            conflictingAlts = configs.conflictingAlts;\n        }\n        return conflictingAlts;\n    }\n\n    getTokenName(t) {\n        if (t===Token.EOF) {\n            return \"EOF\";\n        }\n        if( this.parser!==null && this.parser.literalNames!==null) {\n            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n                console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n                console.log(\"\" + this.parser.getInputStream().getTokens());\n            } else {\n                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n                return name + \"<\" + t + \">\";\n            }\n        }\n        return \"\" + t;\n    }\n\n    getLookaheadName(input) {\n        return this.getTokenName(input.LA(1));\n    }\n\n    /**\n     * Used for debugging in adaptivePredict around execATN but I cut\n     * it out for clarity now that alg. works well. We can leave this\n     * \"dead\" code for a bit\n     */\n    dumpDeadEndConfigs(nvae) {\n        console.log(\"dead end configs: \");\n        const decs = nvae.getDeadEndConfigs();\n        for(let i=0; i<decs.length; i++) {\n            const c = decs[i];\n            let trans = \"no edges\";\n            if (c.state.transitions.length>0) {\n                const t = c.state.transitions[0];\n                if (t instanceof AtomTransition) {\n                    trans = \"Atom \"+ this.getTokenName(t.label);\n                } else if (t instanceof SetTransition) {\n                    const neg = (t instanceof NotSetTransition);\n                    trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n                }\n            }\n            console.error(c.toString(this.parser, true) + \":\" + trans);\n        }\n    }\n\n    noViableAlt(input, outerContext, configs, startIndex) {\n        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n\n    getUniqueAlt(configs) {\n        let alt = ATN.INVALID_ALT_NUMBER;\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (alt === ATN.INVALID_ALT_NUMBER) {\n                alt = c.alt // found first alt\n            } else if( c.alt!==alt) {\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return alt;\n    }\n\n    /**\n     * Add an edge to the DFA, if possible. This method calls\n     * {@link //addDFAState} to ensure the {@code to} state is present in the\n     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n     * range of edges that can be represented in the DFA tables, this method\n     * returns without adding the edge to the DFA.\n     *\n     * <p>If {@code to} is {@code null}, this method returns {@code null}.\n     * Otherwise, this method returns the {@link DFAState} returned by calling\n     * {@link //addDFAState} for the {@code to} state.</p>\n     *\n     * @param dfa The DFA\n     * @param from_ The source state for the edge\n     * @param t The input symbol\n     * @param to The target state for the edge\n     *\n     * @return If {@code to} is {@code null}, this method returns {@code null};\n     * otherwise this method returns the result of calling {@link //addDFAState}\n     * on {@code to}\n     */\n    addDFAEdge(dfa, from_, t, to) {\n        if( this.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n        }\n        if (to===null) {\n            return null;\n        }\n        to = this.addDFAState(dfa, to); // used existing if possible not incoming\n        if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n            return to;\n        }\n        if (from_.edges===null) {\n            from_.edges = [];\n        }\n        from_.edges[t+1] = to; // connect\n\n        if (this.debug) {\n            const literalNames = this.parser===null ? null : this.parser.literalNames;\n            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n            console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n        }\n        return to;\n    }\n\n    /**\n     * Add state {@code D} to the DFA if it is not already present, and return\n     * the actual instance stored in the DFA. If a state equivalent to {@code D}\n     * is already in the DFA, the existing state is returned. Otherwise this\n     * method returns {@code D} after adding it to the DFA.\n     *\n     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n     * does not change the DFA.</p>\n     *\n     * @param dfa The dfa\n     * @param D The DFA state to add\n     * @return The state stored in the DFA. This will be either the existing\n     * state if {@code D} is already in the DFA, or {@code D} itself if the\n     * state was not already present\n     */\n    addDFAState(dfa, D) {\n        if (D === ATNSimulator.ERROR) {\n            return D;\n        }\n        const existing = dfa.states.get(D);\n        if(existing!==null) {\n            return existing;\n        }\n        D.stateNumber = dfa.states.length;\n        if (! D.configs.readOnly) {\n            D.configs.optimizeConfigs(this);\n            D.configs.setReadonly(true);\n        }\n        dfa.states.add(D);\n        if (this.debug) {\n            console.log(\"adding new DFA state: \" + D);\n        }\n        return D;\n    }\n\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n        }\n    }\n\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n        }\n    }\n\n    // If context sensitive parsing, we know it's ambiguity not conflict//\n    reportAmbiguity(dfa, D, startIndex, stopIndex,\n                                   exact, ambigAlts, configs ) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n    }\n}\n\nmodule.exports = ParserATNSimulator;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Map, BitSet, AltDict, hashStuff} = require('./../Utils');\nconst ATN = require('./ATN');\nconst {RuleStopState} = require('./ATNState');\nconst {ATNConfigSet} = require('./ATNConfigSet');\nconst {ATNConfig} = require('./ATNConfig');\nconst {SemanticContext} = require('./SemanticContext');\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nconst PredictionMode = {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * <p>\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link //LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link //SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link //LL} prediction abilities to complete successfully.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    SLL: 0,\n\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * <p>\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for <em>exactly which</em> alternatives are\n     * ambiguous.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL: 1,\n\n    /**\n     *\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link //LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * <p>\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL_EXACT_AMBIG_DETECTION: 2,\n\n    /**\n     *\n     * Computes the SLL prediction termination condition.\n     *\n     * <p>\n     * This method computes the SLL prediction termination condition for both of\n     * the following cases.</p>\n     *\n     * <ul>\n     * <li>The usual SLL+LL fallback upon SLL conflict</li>\n     * <li>Pure SLL without LL fallback</li>\n     * </ul>\n     *\n     * <p><strong>COMBINED SLL+LL PARSING</strong></p>\n     *\n     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n     * ensured regardless of how the termination condition is computed by this\n     * method. Due to the substantially higher cost of LL prediction, the\n     * prediction should only fall back to LL when the additional lookahead\n     * cannot lead to a unique SLL prediction.</p>\n     *\n     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n     * conflicting subsets should fall back to full LL, even if the\n     * configuration sets don't resolve to the same alternative (e.g.\n     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n     * configuration, SLL could continue with the hopes that more lookahead will\n     * resolve via one of those non-conflicting configurations.</p>\n     *\n     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n     * stops when it sees only conflicting configuration subsets. In contrast,\n     * full LL keeps going when there is uncertainty.</p>\n     *\n     * <p><strong>HEURISTIC</strong></p>\n     *\n     * <p>As a heuristic, we stop prediction when we see any conflicting subset\n     * unless we see a state that only has one alternative associated with it.\n     * The single-alt-state thing lets prediction continue upon rules like\n     * (otherwise, it would admit defeat too soon):</p>\n     *\n     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n     *\n     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n     * processing this node because alternative to has another way to continue,\n     * via {@code [6|2|[]]}.</p>\n     *\n     * <p>It also let's us continue for this rule:</p>\n     *\n     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n     *\n     * <p>After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not stop\n     * working on this state. In the previous example, we're concerned with\n     * states associated with the conflicting alternatives. Here alt 3 is not\n     * associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, don't declare the state done.</p>\n     *\n     * <p><strong>PURE SLL PARSING</strong></p>\n     *\n     * <p>To handle pure SLL parsing, all we have to do is make sure that we\n     * combine stack contexts for configurations that differ only by semantic\n     * predicate. From there, we can do the usual SLL termination heuristic.</p>\n     *\n     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n     *\n     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n     * states because they need to create the DFA cache that works in all\n     * semantic situations. In contrast, full LL evaluates predicates collected\n     * during start state computation so it can ignore predicates thereafter.\n     * This means that SLL termination detection can totally ignore semantic\n     * predicates.</p>\n     *\n     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n     * semantic predicate contexts so we might see two configurations like the\n     * following.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n     *\n     * <p>Before testing these configurations against others, we have to merge\n     * {@code x} and {@code x'} (without modifying the existing configurations).\n     * For example, we test {@code (x+x')==x''} when looking for conflicts in\n     * the following configurations.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n     *\n     * <p>If the configuration set has predicates (as indicated by\n     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n     * the configurations to strip out all of the predicates so that a standard\n     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n     */\n    hasSLLConflictTerminatingPrediction: function( mode, configs) {\n        // Configs in rule stop states indicate reaching the end of the decision\n        // rule (local context) or end of start rule (full context). If all\n        // configs meet this condition, then none of the configurations is able\n        // to match additional input so we terminate prediction.\n        //\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return true;\n        }\n        // pure SLL mode parsing\n        if (mode === PredictionMode.SLL) {\n            // Don't bother with combining configs from different semantic\n            // contexts if we can fail over to full LL; costs more time\n            // since we'll often fail over anyway.\n            if (configs.hasSemanticContext) {\n                // dup configs, tossing out semantic predicates\n                const dup = new ATNConfigSet();\n                for(let i=0;i<configs.items.length;i++) {\n                    let c = configs.items[i];\n                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                    dup.add(c);\n                }\n                configs = dup;\n            }\n            // now we have combined contexts for configs with dissimilar preds\n        }\n        // pure SLL or combined SLL+LL mode parsing\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n\n    /**\n     * Checks if any configuration in {@code configs} is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if any configuration in {@code configs} is in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    hasConfigInRuleStopState: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (c.state instanceof RuleStopState) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if all configurations in {@code configs} are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if all configurations in {@code configs} are in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    allConfigsInRuleStopStates: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (!(c.state instanceof RuleStopState)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     *\n     * Full LL prediction termination.\n     *\n     * <p>Can we stop looking ahead during ATN simulation or is there some\n     * uncertainty as to which alternative we will ultimately pick, after\n     * consuming more input? Even if there are partial conflicts, we might know\n     * that everything is going to resolve to the same minimum alternative. That\n     * means we can stop since no more lookahead will change that fact. On the\n     * other hand, there might be multiple conflicts that resolve to different\n     * minimums. That means we need more look ahead to decide which of those\n     * alternatives we should predict.</p>\n     *\n     * <p>The basic idea is to split the set of configurations {@code C}, into\n     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n     * non-conflicting configurations. Two configurations conflict if they have\n     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n     *\n     * <p>Reduce these configuration subsets to the set of possible alternatives.\n     * You can compute the alternative subsets in one pass as follows:</p>\n     *\n     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n     * {@code C} holding {@code s} and {@code ctx} fixed.</p>\n     *\n     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     *\n     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n     *\n     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n     * {@code s} and {@code ctx}.</p>\n     *\n     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n     * the union of these alternative subsets is a singleton, then no amount of\n     * more lookahead will help us. We will always pick that alternative. If,\n     * however, there is more than one alternative, then we are uncertain which\n     * alternative to predict and must continue looking for resolution. We may\n     * or may not discover an ambiguity in the future, even if there are no\n     * conflicting subsets this round.</p>\n     *\n     * <p>The biggest sin is to terminate early because it means we've made a\n     * decision but were uncertain as to the eventual outcome. We haven't used\n     * enough lookahead. On the other hand, announcing a conflict too late is no\n     * big deal; you will still have the conflict. It's just inefficient. It\n     * might even look until the end of file.</p>\n     *\n     * <p>No special consideration for semantic predicates is required because\n     * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n     * no configuration contains a semantic context during the termination\n     * check.</p>\n     *\n     * <p><strong>CONFLICTING CONFIGS</strong></p>\n     *\n     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n     * when {@code i!=j} but {@code x=x'}. Because we merge all\n     * {@code (s, i, _)} configurations together, that means that there are at\n     * most {@code n} configurations associated with state {@code s} for\n     * {@code n} possible alternatives in the decision. The merged stacks\n     * complicate the comparison of configuration contexts {@code x} and\n     * {@code x'}. Sam checks to see if one is a subset of the other by calling\n     * merge and checking to see if the merged result is either {@code x} or\n     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n     * is the superset, then {@code i} is the only possible prediction since the\n     * others resolve to {@code min(i)} as well. However, if {@code x} is\n     * associated with {@code j>i} then at least one stack configuration for\n     * {@code j} is not in conflict with alternative {@code i}. The algorithm\n     * should keep going, looking for more lookahead due to the uncertainty.</p>\n     *\n     * <p>For simplicity, I'm doing a equality check between {@code x} and\n     * {@code x'} that lets the algorithm continue to consume lookahead longer\n     * than necessary. The reason I like the equality is of course the\n     * simplicity but also because that is the test you need to detect the\n     * alternatives that are actually in conflict.</p>\n     *\n     * <p><strong>CONTINUE/STOP RULE</strong></p>\n     *\n     * <p>Continue if union of resolved alternative sets from non-conflicting and\n     * conflicting alternative subsets has more than one alternative. We are\n     * uncertain about which alternative to predict.</p>\n     *\n     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n     * alternatives are still in the running for the amount of input we've\n     * consumed at this point. The conflicting sets let us to strip away\n     * configurations that won't lead to more states because we resolve\n     * conflicts to the configuration with a minimum alternate for the\n     * conflicting set.</p>\n     *\n     * <p><strong>CASES</strong></p>\n     *\n     * <ul>\n     *\n     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n     *\n     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1,3}} =&gt; continue\n     * </li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1}} =&gt; stop and predict 1</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n     * ambiguity {@code {1,2}}</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {2}} = {@code {1,2}} =&gt; continue</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {3}} = {@code {1,3}} =&gt; continue</li>\n     *\n     * </ul>\n     *\n     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n     *\n     * <p>If all states report the same conflicting set of alternatives, then we\n     * know we have the exact ambiguity set.</p>\n     *\n     * <p><code>|A_<em>i</em>|&gt;1</code> and\n     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n     *\n     * <p>In other words, we continue examining lookahead until all {@code A_i}\n     * have more than one alternative and all {@code A_i} are the same. If\n     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n     * because the resolved set is {@code {1}}. To determine what the real\n     * ambiguity is, we have to know whether the ambiguity is between one and\n     * two or one and three so we keep going. We can only stop prediction when\n     * we need exact ambiguity detection when the sets look like\n     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n     */\n    resolvesToJustOneViableAlt: function(altsets) {\n        return PredictionMode.getSingleViableAlt(altsets);\n    },\n\n    /**\n     * Determines if every alternative subset in {@code altsets} contains more\n     * than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every {@link BitSet} in {@code altsets} has\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    allSubsetsConflict: function(altsets) {\n        return ! PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * exactly one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n     */\n    hasNonConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * more than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    hasConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length>1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if every alternative subset in {@code altsets} is equivalent.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every member of {@code altsets} is equal to the\n     * others, otherwise {@code false}\n     */\n    allSubsetsEqual: function(altsets) {\n        let first = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (first === null) {\n                first = alts;\n            } else if (alts!==first) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n\n    /**\n     * Returns the unique alternative predicted by all alternative subsets in\n     * {@code altsets}. If no such alternative exists, this method returns\n     * {@link ATN//INVALID_ALT_NUMBER}.\n     *\n     * @param altsets a collection of alternative subsets\n     */\n    getUniqueAlt: function(altsets) {\n        const all = PredictionMode.getAlts(altsets);\n        if (all.length===1) {\n            return all.minValue();\n        } else {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    },\n\n    /**\n     * Gets the complete set of represented alternatives for a collection of\n     * alternative subsets. This method returns the union of each {@link BitSet}\n     * in {@code altsets}.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return the set of represented alternatives in {@code altsets}\n     */\n    getAlts: function(altsets) {\n        const all = new BitSet();\n        altsets.map( function(alts) { all.or(alts); });\n        return all;\n    },\n\n    /**\n     * This function gets the conflicting alt subsets from a configuration set.\n     * For each configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     */\n    getConflictingAltSubsets: function(configs) {\n        const configToAlts = new Map();\n        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };\n        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};\n        configs.items.map(function(cfg) {\n            let alts = configToAlts.get(cfg);\n            if (alts === null) {\n                alts = new BitSet();\n                configToAlts.put(cfg, alts);\n            }\n            alts.add(cfg.alt);\n        });\n        return configToAlts.getValues();\n    },\n\n    /**\n     * Get a map from state to alt subset from a configuration set. For each\n     * configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n     * </pre>\n     */\n    getStateToAltMap: function(configs) {\n        const m = new AltDict();\n        configs.items.map(function(c) {\n            let alts = m.get(c.state);\n            if (alts === null) {\n                alts = new BitSet();\n                m.put(c.state, alts);\n            }\n            alts.add(c.alt);\n        });\n        return m;\n    },\n\n    hasStateAssociatedWithOneAlt: function(configs) {\n        const values = PredictionMode.getStateToAltMap(configs).values();\n        for(let i=0;i<values.length;i++) {\n            if (values[i].length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    getSingleViableAlt: function(altsets) {\n        let result = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            const minAlt = alts.minValue();\n            if(result===null) {\n                result = minAlt;\n            } else if(result!==minAlt) { // more than 1 viable alt\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return result;\n    }\n};\n\nmodule.exports = PredictionMode;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst { Set, Hash, equalArrays } = require('./../Utils');\n\n/**\n * A tree structure used to record the semantic context in which\n * an ATN configuration is valid.  It's either a single predicate,\n * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n *\n * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n * {@link SemanticContext} within the scope of this outer class.</p>\n */\nclass SemanticContext {\n\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t}\n\n\t/**\n\t * For context independent predicates, we evaluate them without a local\n\t * context (i.e., null context). That way, we can evaluate them without\n\t * having to create proper rule-specific context during prediction (as\n\t * opposed to the parser, which creates them naturally). In a practical\n\t * sense, this avoids a cast exception from RuleContext to myruleContext.\n\t *\n\t * <p>For context dependent predicates, we must pass in a local context so that\n\t * references such as $arg evaluate properly as _localctx.arg. We only\n\t * capture context dependent predicates in the context in which we begin\n\t * prediction, so we passed in the outer context here in case of context\n\t * dependent predicate evaluation.</p>\n\t */\n\tevaluate(parser, outerContext) {}\n\n\t/**\n\t * Evaluate the precedence predicates for the context and reduce the result.\n\t *\n\t * @param parser The parser instance.\n\t * @param outerContext The current parser context object.\n\t * @return The simplified semantic context after precedence predicates are\n\t * evaluated, which will be one of the following values.\n\t * <ul>\n\t * <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code null}: if the predicate simplifies to {@code false} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code this}: if the semantic context is not changed as a result of\n\t * precedence predicate evaluation.</li>\n\t * <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t * semantic context after precedence predicates are evaluated.</li>\n\t * </ul>\n\t */\n\tevalPrecedence(parser, outerContext) {\n\t\treturn this;\n\t}\n\n\tstatic andContext(a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tconst result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tstatic orContext(a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tconst result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n\nclass Predicate extends SemanticContext {\n\n\tconstructor(ruleIndex, predIndex, isCtxDependent) {\n\t\tsuper();\n\t\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\t\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\t\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\tconst localctx = this.isCtxDependent ? outerContext : null;\n\t\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof Predicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.ruleIndex === other.ruleIndex &&\n\t\t\t\t\tthis.predIndex === other.predIndex &&\n\t\t\t\t\tthis.isCtxDependent === other.isCtxDependent;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n\t}\n}\n\n/**\n * The default {@link SemanticContext}, which is semantically equivalent to\n * a predicate of the form {@code {true}?}\n */\nSemanticContext.NONE = new Predicate();\n\n\nclass PrecedencePredicate extends SemanticContext {\n\n\tconstructor(precedence) {\n\t\tsuper();\n\t\tthis.precedence = precedence === undefined ? 0 : precedence;\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\treturn parser.precpred(outerContext, this.precedence);\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tif (parser.precpred(outerContext, this.precedence)) {\n\t\t\treturn SemanticContext.NONE;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcompareTo(other) {\n\t\treturn this.precedence - other.precedence;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.precedence);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.precedence === other.precedence;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\" + this.precedence + \">=prec}?\";\n\t}\n\n\tstatic filterPrecedencePredicates(set) {\n\t\tconst result = [];\n\t\tset.values().map( function(context) {\n\t\t\tif (context instanceof PrecedencePredicate) {\n\t\t\t\tresult.push(context);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass AND extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever none of the contained contexts\n\t * is false\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tlet reduced = null;\n\t\t\tprecedencePredicates.map( function(p) {\n\t\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tlet result = null;\n\t\toperands.map(function(o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n\t}\n}\n\n\nclass OR extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever at least one of the contained\n\t * contexts is true\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tconst s = precedencePredicates.sort(function(a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tconst reduced = s[s.length-1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t}\n\n\t/**\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tconst result = null;\n\t\toperands.map(function(o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"||\");\n\t}\n}\n\nmodule.exports = {\n\tSemanticContext,\n\tPrecedencePredicate,\n\tPredicate\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./../Token');\nconst {IntervalSet} = require('./../IntervalSet');\nconst {Predicate, PrecedencePredicate} = require('./SemanticContext');\n\n/**\n * An ATN transition between any two ATN states.  Subclasses define\n * atom, set, epsilon, action, predicate, rule transitions.\n *\n * <p>This is a one way link.  It emanates from a state (usually via a list of\n * transitions) and has a target state.</p>\n *\n * <p>Since we never have to change the ATN transitions once we construct it,\n * we can fix these transitions as specific classes. The DFA transitions\n * on the other hand need to update the labels as it adds transitions to\n * the states. We'll use the term Edge for the DFA to distinguish them from\n * ATN transitions.</p>\n */\nclass Transition {\n    constructor(target) {\n        // The target of this transition.\n        if (target===undefined || target===null) {\n            throw \"target cannot be null.\";\n        }\n        this.target = target;\n        // Are we epsilon, action, sempred?\n        this.isEpsilon = false;\n        this.label = null;\n    }\n}\n\n// constants for serialization\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\n// e.g., {isType(input.LT(1))}?\nTransition.PREDICATE = 4;\nTransition.ATOM = 5;\nTransition.ACTION = 6;\n// ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.SET = 7;\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n// TODO: make all transitions sets? no, should remove set edges\n\nclass AtomTransition extends Transition {\n    constructor(target, label) {\n        super(target);\n        // The token type or character value; or, signifies special label.\n        this.label_ = label;\n        this.label = this.makeLabel();\n        this.serializationType = Transition.ATOM;\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addOne(this.label_);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label_ === symbol;\n    }\n\n    toString() {\n        return this.label_;\n    }\n}\n\n\nclass RuleTransition extends Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n        super(ruleStart);\n        // ptr to the rule definition object for this rule ref\n        this.ruleIndex = ruleIndex;\n        this.precedence = precedence;\n        // what node to begin computations following ref to rule\n        this.followState = followState;\n        this.serializationType = Transition.RULE;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n}\n\nclass EpsilonTransition extends Transition {\n    constructor(target, outermostPrecedenceReturn) {\n        super(target);\n        this.serializationType = Transition.EPSILON;\n        this.isEpsilon = true;\n        this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"epsilon\";\n    }\n}\n\n\nclass RangeTransition extends Transition {\n    constructor(target, start, stop) {\n        super(target);\n        this.serializationType = Transition.RANGE;\n        this.start = start;\n        this.stop = stop;\n        this.label = this.makeLabel();\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addRange(this.start, this.stop);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= this.start && symbol <= this.stop;\n    }\n\n    toString() {\n        return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n}\n\n\nclass AbstractPredicateTransition extends Transition {\n    constructor(target) {\n        super(target);\n    }\n}\n\nclass PredicateTransition extends AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.PREDICATE;\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n}\n\n\nclass ActionTransition extends Transition {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.ACTION;\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n}\n\n\n// A transition containing a set of values.\nclass SetTransition extends Transition {\n    constructor(target, set) {\n        super(target);\n        this.serializationType = Transition.SET;\n        if (set !==undefined && set !==null) {\n            this.label = set;\n        } else {\n            this.label = new IntervalSet();\n            this.label.addOne(Token.INVALID_TYPE);\n        }\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label.contains(symbol);\n    }\n\n    toString() {\n        return this.label.toString();\n    }\n}\n\nclass NotSetTransition extends SetTransition {\n    constructor(target, set) {\n        super(target, set);\n        this.serializationType = Transition.NOT_SET;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n\n    toString() {\n        return '~' + super.toString();\n    }\n}\n\nclass WildcardTransition extends Transition {\n    constructor(target) {\n        super(target);\n        this.serializationType = Transition.WILDCARD;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n\n    toString() {\n        return \".\";\n    }\n}\n\nclass PrecedencePredicateTransition extends AbstractPredicateTransition {\n    constructor(target, precedence) {\n        super(target);\n        this.serializationType = Transition.PRECEDENCE;\n        this.precedence = precedence;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new PrecedencePredicate(this.precedence);\n    }\n\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n}\n\nmodule.exports = {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    ActionTransition,\n    EpsilonTransition,\n    RangeTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition,\n    AbstractPredicateTransition\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = require('./ATN');\nexports.ATNDeserializer = require('./ATNDeserializer');\nexports.LexerATNSimulator = require('./LexerATNSimulator');\nexports.ParserATNSimulator = require('./ParserATNSimulator');\nexports.PredictionMode = require('./PredictionMode');\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set} = require(\"../Utils\");\nconst {DFAState} = require('./DFAState');\nconst {StarLoopEntryState} = require('../atn/ATNState');\nconst {ATNConfigSet} = require('./../atn/ATNConfigSet');\nconst {DFASerializer} = require('./DFASerializer');\nconst {LexerDFASerializer} = require('./DFASerializer');\n\nclass DFA {\n\tconstructor(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t/**\n\t\t * From which ATN state did we create this DFA?\n\t\t */\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t/**\n\t\t * A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t * ({@link Set} only allows you to see if it's there).\n\t\t */\n\t\tthis._states = new Set();\n\t\tthis.s0 = null;\n\t\t/**\n\t\t * {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t * {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t * {@link //setPrecedenceDfa}\n\t\t */\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof StarLoopEntryState)\n\t\t{\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @return The start state corresponding to the specified precedence, or\n\t * {@code null} if no start state exists for the specified precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tgetPrecedenceStartState(precedence) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t}\n\n\t/**\n\t * Set the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @param startState The start state corresponding to the specified\n\t * precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tsetPrecedenceStartState(precedence, startState) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * synchronization on s0 here is ok. when the DFA is turned into a\n\t\t * precedence DFA, s0 will be initialized once and not updated again\n\t\t * s0.edges is never null for a precedence DFA\n\t\t */\n\t\tthis.s0.edges[precedence] = startState;\n\t}\n\n\t/**\n\t * Sets whether this is a precedence DFA. If the specified value differs\n\t * from the current DFA configuration, the following actions are taken;\n\t * otherwise no changes are made to the current DFA.\n\t *\n\t * <ul>\n\t * <li>The {@link //states} map is cleared</li>\n\t * <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t * store the start states for individual precedence values.</li>\n\t * <li>The {@link //precedenceDfa} field is updated</li>\n\t * </ul>\n\t *\n\t * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t * {@code false}\n\t */\n\tsetPrecedenceDfa(precedenceDfa) {\n\t\tif (this.precedenceDfa!==precedenceDfa) {\n\t\t\tthis._states = new Set();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all states in this DFA, ordered by state number.\n\t */\n\tsortedStates() {\n\t\tconst list = this._states.values();\n\t\treturn list.sort(function(a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t}\n\n\ttoString(literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new DFASerializer(this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t}\n\n\ttoLexerString() {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new LexerDFASerializer(this);\n\t\treturn serializer.toString();\n\t}\n\n\tget states(){\n\t\treturn this._states;\n\t}\n}\n\n\nmodule.exports = DFA;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A DFA walker that knows how to dump them to serialized strings.\n */\nclass DFASerializer {\n    constructor(dfa, literalNames, symbolicNames) {\n        this.dfa = dfa;\n        this.literalNames = literalNames || [];\n        this.symbolicNames = symbolicNames || [];\n    }\n\n    toString() {\n       if(this.dfa.s0 === null) {\n           return null;\n       }\n       let buf = \"\";\n       const states = this.dfa.sortedStates();\n       for(let i=0; i<states.length; i++) {\n           const s = states[i];\n           if(s.edges!==null) {\n                const n = s.edges.length;\n                for(let j=0;j<n;j++) {\n                    const t = s.edges[j] || null;\n                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                        buf = buf.concat(this.getStateString(s));\n                        buf = buf.concat(\"-\");\n                        buf = buf.concat(this.getEdgeLabel(j));\n                        buf = buf.concat(\"->\");\n                        buf = buf.concat(this.getStateString(t));\n                        buf = buf.concat('\\n');\n                    }\n                }\n           }\n       }\n       return buf.length===0 ? null : buf;\n    }\n\n    getEdgeLabel(i) {\n        if (i===0) {\n            return \"EOF\";\n        } else if(this.literalNames !==null || this.symbolicNames!==null) {\n            return this.literalNames[i-1] || this.symbolicNames[i-1];\n        } else {\n            return String.fromCharCode(i-1);\n        }\n    }\n\n    getStateString(s) {\n        const baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n        if(s.isAcceptState) {\n            if (s.predicates !== null) {\n                return baseStateStr + \"=>\" + s.predicates.toString();\n            } else {\n                return baseStateStr + \"=>\" + s.prediction.toString();\n            }\n        } else {\n            return baseStateStr;\n        }\n    }\n}\n\nclass LexerDFASerializer extends DFASerializer {\n    constructor(dfa) {\n        super(dfa, null);\n    }\n\n    getEdgeLabel(i) {\n        return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n}\n\nmodule.exports = { DFASerializer , LexerDFASerializer };\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {ATNConfigSet} = require('./../atn/ATNConfigSet');\nconst {Hash, Set} = require('./../Utils');\n\n/**\n * Map a predicate to a predicted alternative.\n */\nclass PredPrediction {\n\tconstructor(pred, alt) {\n\t\tthis.alt = alt;\n\t\tthis.pred = pred;\n\t}\n\n\ttoString() {\n\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t}\n}\n\n/**\n * A DFA state represents a set of possible ATN configurations.\n * As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n * to keep track of all possible states the ATN can be in after\n * reading each input symbol. That is to say, after reading\n * input a1a2..an, the DFA is in a state that represents the\n * subset T of the states of the ATN that are reachable from the\n * ATN's start state along some path labeled a1a2..an.\"\n * In conventional NFA&rarr;DFA conversion, therefore, the subset T\n * would be a bitset representing the set of states the\n * ATN could be in. We need to track the alt predicted by each\n * state as well, however. More importantly, we need to maintain\n * a stack of states, tracking the closure operations as they\n * jump from rule to rule, emulating rule invocations (method calls).\n * I have to add a stack to simulate the proper lookahead sequences for\n * the underlying LL grammar from which the ATN was derived.\n *\n * <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n * is both a state (ala normal conversion) and a RuleContext describing\n * the chain of rules (if any) followed to arrive at that state.</p>\n *\n * <p>A DFA state may have multiple references to a particular state,\n * but with different ATN contexts (with same or different alts)\n * meaning that state was reached via a different set of rule invocations.</p>\n */\nclass DFAState {\n\tconstructor(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new ATNConfigSet();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t/**\n\t\t * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t * {@link Token//EOF} maps to {@code edges[0]}.\n\t\t */\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t/**\n\t\t * if accept state, what ttype do we match or alt do we predict?\n\t\t * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}\n\t\t * {@code !=null} or {@link //requiresFullContext}.\n\t\t */\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t/**\n\t\t * Indicates that this state was created during SLL prediction that\n\t\t * discovered a conflict between the configurations in the state. Future\n\t\t * {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t * full context prediction if this field is true.\n\t\t */\n\t\tthis.requiresFullContext = false;\n\t\t/**\n\t\t * During SLL parsing, this is a list of predicates associated with the\n\t\t * ATN configurations of the DFA state. When we have predicates,\n\t\t * {@link //requiresFullContext} is {@code false} since full context\n\t\t * prediction evaluates predicates\n\t\t * on-the-fly. If this is not null, then {@link //prediction} is\n\t\t * {@link ATN//INVALID_ALT_NUMBER}.\n\t\t *\n\t\t * <p>We only use these for non-{@link //requiresFullContext} but\n\t\t * conflicting states. That\n\t\t * means we know from the context (it's $ or we don't dip into outer\n\t\t * context) that it's an ambiguity not a conflict.</p>\n\t\t *\n\t\t * <p>This list is computed by {@link\n\t\t * ParserATNSimulator//predicateDFAState}.</p>\n\t\t */\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the set of all alts mentioned by all ATN configurations in this\n\t * DFA state.\n\t */\n\tgetAltSet() {\n\t\tconst alts = new Set();\n\t\tif (this.configs !== null) {\n\t\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\t\tconst c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * <p>Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.</p>\n\t *\n\t * <p>Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link //stateNumber} is irrelevant.</p>\n\t */\n\tequals(other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other ||\n\t\t\t\t(other instanceof DFAState &&\n\t\t\t\t\tthis.configs.equals(other.configs));\n\t}\n\n\ttoString() {\n\t\tlet s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif(this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null)\n\t\t\t\ts = s + this.predicates;\n\t\t\telse\n\t\t\t\ts = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t}\n\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n}\n\nmodule.exports = { DFAState, PredPrediction };\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = require('./DFA');\nexports.DFASerializer = require('./DFASerializer').DFASerializer;\nexports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\nexports.PredPrediction = require('./DFAState').PredPrediction;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {BitSet} = require('./../Utils');\nconst {ErrorListener} = require('./ErrorListener')\nconst {Interval} = require('./../IntervalSet')\n\n\n/**\n * This implementation of {@link ANTLRErrorListener} can be used to identify\n *  certain potential correctness and performance problems in grammars. \"Reports\"\n *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n *  message.\n *\n *  <ul>\n *  <li><b>Ambiguities</b>: These are cases where more than one path through the\n *  grammar can match the input.</li>\n *  <li><b>Weak context sensitivity</b>: These are cases where full-context\n *  prediction resolved an SLL conflict to a unique alternative which equaled the\n *  minimum alternative of the SLL conflict.</li>\n *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n *  full-context prediction resolved an SLL conflict to a unique alternative,\n *  <em>and</em> the minimum alternative of the SLL conflict was found to not be\n *  a truly viable alternative. Two-stage parsing cannot be used for inputs where\n *  this situation occurs.</li>\n *  </ul>\n */\nclass DiagnosticErrorListener extends ErrorListener {\n\tconstructor(exactOnly) {\n\t\tsuper();\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t}\n\n\treportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tconst msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tconst msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\tgetDecisionDescription(recognizer, dfa) {\n\t\tconst decision = dfa.decision\n\t\tconst ruleIndex = dfa.atnStartState.ruleIndex\n\n\t\tconst ruleNames = recognizer.ruleNames\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tconst ruleName = ruleNames[ruleIndex] || null\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn `${decision} (${ruleName})`;\n\t}\n\n\t/**\n\t * Computes the set of conflicting or ambiguous alternatives from a\n\t * configuration set, if that information was not already provided by the\n\t * parser.\n\t *\n\t * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t * reported by the parser.\n\t * @param configs The conflicting or ambiguous configuration set.\n\t * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t * returns the set of alternatives represented in {@code configs}.\n     */\n\tgetConflictingAlts(reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tconst result = new BitSet()\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn `{${result.values().join(\", \")}}`;\n\t}\n}\n\nmodule.exports = DiagnosticErrorListener\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nclass ConsoleErrorListener extends ErrorListener {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\nclass ProxyErrorListener extends ErrorListener {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n\nmodule.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}\n\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./../Token')\nconst {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = require('./Errors')\nconst {ATNState} = require('./../atn/ATNState')\nconst {Interval, IntervalSet} = require('./../IntervalSet')\n\nclass ErrorStrategy {\n\n    reset(recognizer) {\n    }\n\n    recoverInline(recognizer) {\n    }\n\n    recover(recognizer, e) {\n    }\n\n    sync(recognizer) {\n    }\n\n    inErrorRecoveryMode(recognizer) {\n    }\n\n    reportError(recognizer) {\n    }\n}\n\n\n/**\n * This is the default implementation of {@link ANTLRErrorStrategy} used for\n * error reporting and recovery in ANTLR parsers.\n*/\nclass DefaultErrorStrategy extends ErrorStrategy {\n    constructor() {\n        super();\n        /**\n         * Indicates whether the error strategy is currently \"recovering from an\n         * error\". This is used to suppress reporting multiple error messages while\n         * attempting to recover from a detected syntax error.\n         *\n         * @see //inErrorRecoveryMode\n         */\n        this.errorRecoveryMode = false;\n\n        /**\n         * The index into the input stream where the last error occurred.\n         * This is used to prevent infinite loops where an error is found\n         * but no token is consumed during recovery...another error is found,\n         * ad nauseum. This is a failsafe mechanism to guarantee that at least\n         * one token/tree node is consumed for two errors.\n         */\n        this.lastErrorIndex = -1;\n        this.lastErrorStates = null;\n        this.nextTokensContext = null;\n        this.nextTokenState = 0;\n    }\n\n    /**\n     * <p>The default implementation simply calls {@link //endErrorCondition} to\n     * ensure that the handler is not in error recovery mode.</p>\n    */\n    reset(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * This method is called to enter error recovery mode when a recognition\n     * exception is reported.\n     *\n     * @param recognizer the parser instance\n    */\n    beginErrorCondition(recognizer) {\n        this.errorRecoveryMode = true;\n    }\n\n    inErrorRecoveryMode(recognizer) {\n        return this.errorRecoveryMode;\n    }\n\n    /**\n     * This method is called to leave error recovery mode after recovering from\n     * a recognition exception.\n     * @param recognizer\n     */\n    endErrorCondition(recognizer) {\n        this.errorRecoveryMode = false;\n        this.lastErrorStates = null;\n        this.lastErrorIndex = -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n     */\n    reportMatch(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>The default implementation returns immediately if the handler is already\n     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n     * and dispatches the reporting task based on the runtime type of {@code e}\n     * according to the following table.</p>\n     *\n     * <ul>\n     * <li>{@link NoViableAltException}: Dispatches the call to\n     * {@link //reportNoViableAlternative}</li>\n     * <li>{@link InputMismatchException}: Dispatches the call to\n     * {@link //reportInputMismatch}</li>\n     * <li>{@link FailedPredicateException}: Dispatches the call to\n     * {@link //reportFailedPredicate}</li>\n     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n     * the exception</li>\n     * </ul>\n     */\n    reportError(recognizer, e) {\n       // if we've already reported an error and have not matched a token\n       // yet successfully, don't report any errors.\n        if(this.inErrorRecoveryMode(recognizer)) {\n            return; // don't report spurious errors\n        }\n        this.beginErrorCondition(recognizer);\n        if ( e instanceof NoViableAltException ) {\n            this.reportNoViableAlternative(recognizer, e);\n        } else if ( e instanceof InputMismatchException ) {\n            this.reportInputMismatch(recognizer, e);\n        } else if ( e instanceof FailedPredicateException ) {\n            this.reportFailedPredicate(recognizer, e);\n        } else {\n            console.log(\"unknown recognition error type: \" + e.constructor.name);\n            console.log(e.stack);\n            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n        }\n    }\n\n    /**\n     *\n     * {@inheritDoc}\n     *\n     * <p>The default implementation resynchronizes the parser by consuming tokens\n     * until we find one in the resynchronization set--loosely the set of tokens\n     * that can follow the current rule.</p>\n     *\n     */\n    recover(recognizer, e) {\n        if (this.lastErrorIndex===recognizer.getInputStream().index &&\n            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n            // uh oh, another error at same token index and previously-visited\n            // state in ATN; must be a case where LT(1) is in the recovery\n            // token set so nothing got consumed. Consume a single token\n            // at least to prevent an infinite loop; this is a failsafe.\n            recognizer.consume();\n        }\n        this.lastErrorIndex = recognizer._input.index;\n        if (this.lastErrorStates === null) {\n            this.lastErrorStates = [];\n        }\n        this.lastErrorStates.push(recognizer.state);\n        const followSet = this.getErrorRecoverySet(recognizer)\n        this.consumeUntil(recognizer, followSet);\n    }\n\n    /**\n     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n     * that the current lookahead symbol is consistent with what were expecting\n     * at this point in the ATN. You can call this anytime but ANTLR only\n     * generates code to check before subrules/loops and each iteration.\n     *\n     * <p>Implements Jim Idle's magic sync mechanism in closures and optional\n     * subrules. E.g.,</p>\n     *\n     * <pre>\n     * a : sync ( stuff sync )* ;\n     * sync : {consume to what can follow sync} ;\n     * </pre>\n     *\n     * At the start of a sub rule upon error, {@link //sync} performs single\n     * token deletion, if possible. If it can't do that, it bails on the current\n     * rule and uses the default error recovery, which consumes until the\n     * resynchronization set of the current rule.\n     *\n     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n     * with an empty alternative), then the expected set includes what follows\n     * the subrule.</p>\n     *\n     * <p>During loop iteration, it consumes until it sees a token that can start a\n     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n     * stay in the loop as long as possible.</p>\n     *\n     * <p><strong>ORIGINS</strong></p>\n     *\n     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n     * A single mismatch token or missing token would force the parser to bail\n     * out of the entire rules surrounding the loop. So, for rule</p>\n     *\n     * <pre>\n     * classDef : 'class' ID '{' member* '}'\n     * </pre>\n     *\n     * input with an extra token between members would force the parser to\n     * consume until it found the next class definition rather than the next\n     * member definition of the current class.\n     *\n     * <p>This functionality cost a little bit of effort because the parser has to\n     * compare token set at the start of the loop and at each iteration. If for\n     * some reason speed is suffering for you, you can turn off this\n     * functionality by simply overriding this method as a blank { }.</p>\n     *\n     */\n    sync(recognizer) {\n        // If already recovering, don't try to sync\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        const s = recognizer._interp.atn.states[recognizer.state];\n        const la = recognizer.getTokenStream().LA(1);\n        // try cheaper subset first; might get lucky. seems to shave a wee bit off\n        const nextTokens = recognizer.atn.nextTokens(s);\n        if(nextTokens.contains(la)) {\n            this.nextTokensContext = null;\n            this.nextTokenState = ATNState.INVALID_STATE_NUMBER;\n            return;\n        } else if (nextTokens.contains(Token.EPSILON)) {\n            if(this.nextTokensContext === null) {\n                // It's possible the next token won't match information tracked\n                // by sync is restricted for performance.\n                this.nextTokensContext = recognizer._ctx;\n                this.nextTokensState = recognizer._stateNumber;\n            }\n            return;\n        }\n        switch (s.stateType) {\n        case ATNState.BLOCK_START:\n        case ATNState.STAR_BLOCK_START:\n        case ATNState.PLUS_BLOCK_START:\n        case ATNState.STAR_LOOP_ENTRY:\n           // report error and recover if possible\n            if( this.singleTokenDeletion(recognizer) !== null) {\n                return;\n            } else {\n                throw new InputMismatchException(recognizer);\n            }\n        case ATNState.PLUS_LOOP_BACK:\n        case ATNState.STAR_LOOP_BACK:\n            this.reportUnwantedToken(recognizer);\n            const expecting = new IntervalSet()\n            expecting.addSet(recognizer.getExpectedTokens());\n            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))\n            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n            break;\n        default:\n            // do nothing if we can't identify the exact kind of ATN state\n        }\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link NoViableAltException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportNoViableAlternative(recognizer, e) {\n        const tokens = recognizer.getTokenStream()\n        let input\n        if(tokens !== null) {\n            if (e.startToken.type===Token.EOF) {\n                input = \"<EOF>\";\n            } else {\n                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n            }\n        } else {\n            input = \"<unknown input>\";\n        }\n        const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is an\n     * {@link InputMismatchException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportInputMismatch(recognizer, e) {\n        const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n            \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link FailedPredicateException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportFailedPredicate(recognizer, e) {\n        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]\n        const msg = \"rule \" + ruleName + \" \" + e.message\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the removal\n     * of a token from the input stream. At the time this method is called, the\n     * erroneous symbol is current {@code LT(1)} symbol and has not yet been\n     * removed from the input stream. When this method returns,\n     * {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenDeletion} identifies\n     * single-token deletion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     *\n     */\n    reportUnwantedToken(recognizer) {\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const tokenName = this.getTokenErrorDisplay(t)\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"extraneous input \" + tokenName + \" expecting \" +\n            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the\n     * insertion of a missing token into the input stream. At the time this\n     * method is called, the missing token has not yet been inserted. When this\n     * method returns, {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenInsertion} identifies\n     * single-token insertion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     */\n    reportMissingToken(recognizer) {\n        if ( this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n            \" at \" + this.getTokenErrorDisplay(t)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * <p>The default implementation attempts to recover from the mismatched input\n     * by using single token insertion and deletion as described below. If the\n     * recovery attempt fails, this method throws an\n     * {@link InputMismatchException}.</p>\n     *\n     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n     *\n     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n     * right token, however, then assume {@code LA(1)} is some extra spurious\n     * token and delete it. Then consume and return the next token (which was\n     * the {@code LA(2)} token) as the successful result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenDeletion}.</p>\n     *\n     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n     *\n     * <p>If current token (at {@code LA(1)}) is consistent with what could come\n     * after the expected {@code LA(1)} token, then assume the token is missing\n     * and use the parser's {@link TokenFactory} to create it on the fly. The\n     * \"insertion\" is performed by returning the created token as the successful\n     * result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenInsertion}.</p>\n     *\n     * <p><strong>EXAMPLE</strong></p>\n     *\n     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n     * the parser returns from the nested call to {@code expr}, it will have\n     * call chain:</p>\n     *\n     * <pre>\n     * stat &rarr; expr &rarr; atom\n     * </pre>\n     *\n     * and it will be trying to match the {@code ')'} at this point in the\n     * derivation:\n     *\n     * <pre>\n     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n     * ^\n     * </pre>\n     *\n     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n     * is in the set of tokens that can follow the {@code ')'} token reference\n     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n     */\n    recoverInline(recognizer) {\n        // SINGLE TOKEN DELETION\n        const matchedSymbol = this.singleTokenDeletion(recognizer)\n        if (matchedSymbol !== null) {\n            // we have deleted the extra token.\n            // now, move past ttype token as if all were ok\n            recognizer.consume();\n            return matchedSymbol;\n        }\n        // SINGLE TOKEN INSERTION\n        if (this.singleTokenInsertion(recognizer)) {\n            return this.getMissingSymbol(recognizer);\n        }\n        // even that didn't work; must throw the exception\n        throw new InputMismatchException(recognizer);\n    }\n\n    /**\n     * This method implements the single-token insertion inline error recovery\n     * strategy. It is called by {@link //recoverInline} if the single-token\n     * deletion strategy fails to recover from the mismatched input. If this\n     * method returns {@code true}, {@code recognizer} will be in error recovery\n     * mode.\n     *\n     * <p>This method determines whether or not single-token insertion is viable by\n     * checking if the {@code LA(1)} input symbol could be successfully matched\n     * if it were instead the {@code LA(2)} symbol. If this method returns\n     * {@code true}, the caller is responsible for creating and inserting a\n     * token with the correct type to produce this behavior.</p>\n     *\n     * @param recognizer the parser instance\n     * @return {@code true} if single-token insertion is a viable recovery\n     * strategy for the current mismatched input, otherwise {@code false}\n     */\n    singleTokenInsertion(recognizer) {\n        const currentSymbolType = recognizer.getTokenStream().LA(1)\n        // if current token is consistent with what could come after current\n        // ATN state, then we know we're missing a token; error recovery\n        // is free to conjure up and insert the missing token\n        const atn = recognizer._interp.atn\n        const currentState = atn.states[recognizer.state]\n        const next = currentState.transitions[0].target\n        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)\n        if (expectingAtLL2.contains(currentSymbolType) ){\n            this.reportMissingToken(recognizer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * This method implements the single-token deletion inline error recovery\n     * strategy. It is called by {@link //recoverInline} to attempt to recover\n     * from mismatched input. If this method returns null, the parser and error\n     * handler state will not have changed. If this method returns non-null,\n     * {@code recognizer} will <em>not</em> be in error recovery mode since the\n     * returned token was a successful match.\n     *\n     * <p>If the single-token deletion is successful, this method calls\n     * {@link //reportUnwantedToken} to report the error, followed by\n     * {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n     * before returning {@link //reportMatch} is called to signal a successful\n     * match.</p>\n     *\n     * @param recognizer the parser instance\n     * @return the successfully matched {@link Token} instance if single-token\n     * deletion successfully recovers from the mismatched input, otherwise\n     * {@code null}\n     */\n    singleTokenDeletion(recognizer) {\n        const nextTokenType = recognizer.getTokenStream().LA(2)\n        const expecting = this.getExpectedTokens(recognizer)\n        if (expecting.contains(nextTokenType)) {\n            this.reportUnwantedToken(recognizer);\n            // print(\"recoverFromMismatchedToken deleting \" \\\n            // + str(recognizer.getTokenStream().LT(1)) \\\n            // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n            // + \" is what we want\", file=sys.stderr)\n            recognizer.consume(); // simply delete extra token\n            // we want to return the token we're actually matching\n            const matchedSymbol = recognizer.getCurrentToken()\n            this.reportMatch(recognizer); // we know current token is correct\n            return matchedSymbol;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Conjure up a missing token during error recovery.\n     *\n     * The recognizer attempts to recover from single missing\n     * symbols. But, actions might refer to that missing symbol.\n     * For example, x=ID {f($x);}. The action clearly assumes\n     * that there has been an identifier matched previously and that\n     * $x points at that token. If that token is missing, but\n     * the next token in the stream is what we want we assume that\n     * this token is missing and we keep going. Because we\n     * have to return some token to replace the missing token,\n     * we have to conjure one up. This method gives the user control\n     * over the tokens returned for missing tokens. Mostly,\n     * you will want to create something special for identifier\n     * tokens. For literals such as '{' and ',', the default\n     * action in the parser or tree parser works. It simply creates\n     * a CommonToken of the appropriate type. The text will be the token.\n     * If you change what tokens must be created by the lexer,\n     * override this method to create the appropriate tokens.\n     *\n     */\n    getMissingSymbol(recognizer) {\n        const currentSymbol = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const expectedTokenType = expecting.first() // get any element\n        let tokenText\n        if (expectedTokenType===Token.EOF) {\n            tokenText = \"<missing EOF>\";\n        } else {\n            tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n        }\n        let current = currentSymbol\n        const lookback = recognizer.getTokenStream().LT(-1)\n        if (current.type===Token.EOF && lookback !== null) {\n            current = lookback;\n        }\n        return recognizer.getTokenFactory().create(current.source,\n            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n            -1, -1, current.line, current.column);\n    }\n\n    getExpectedTokens(recognizer) {\n        return recognizer.getExpectedTokens();\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out. Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     */\n    getTokenErrorDisplay(t) {\n        if (t === null) {\n            return \"<no token>\";\n        }\n        let s = t.text\n        if (s === null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        return this.escapeWSAndQuote(s);\n    }\n\n    escapeWSAndQuote(s) {\n        s = s.replace(/\\n/g,\"\\\\n\");\n        s = s.replace(/\\r/g,\"\\\\r\");\n        s = s.replace(/\\t/g,\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    /**\n     * Compute the error recovery set for the current rule. During\n     * rule invocation, the parser pushes the set of tokens that can\n     * follow that rule reference on the stack; this amounts to\n     * computing FIRST of what follows the rule reference in the\n     * enclosing rule. See LinearApproximator.FIRST().\n     * This local follow set only includes tokens\n     * from within the rule; i.e., the FIRST computation done by\n     * ANTLR stops at the end of a rule.\n     *\n     * EXAMPLE\n     *\n     * When you find a \"no viable alt exception\", the input is not\n     * consistent with any of the alternatives for rule r. The best\n     * thing to do is to consume tokens until you see something that\n     * can legally follow a call to r//or* any rule that called r.\n     * You don't want the exact set of viable next tokens because the\n     * input might just be missing a token--you might consume the\n     * rest of the input looking for one of the missing tokens.\n     *\n     * Consider grammar:\n     *\n     * a : '[' b ']'\n     * | '(' b ')'\n     * ;\n     * b : c '^' INT ;\n     * c : ID\n     * | INT\n     * ;\n     *\n     * At each rule invocation, the set of tokens that could follow\n     * that rule is pushed on a stack. Here are the various\n     * context-sensitive follow sets:\n     *\n     * FOLLOW(b1_in_a) = FIRST(']') = ']'\n     * FOLLOW(b2_in_a) = FIRST(')') = ')'\n     * FOLLOW(c_in_b) = FIRST('^') = '^'\n     *\n     * Upon erroneous input \"[]\", the call chain is\n     *\n     * a -> b -> c\n     *\n     * and, hence, the follow context stack is:\n     *\n     * depth follow set start of rule execution\n     * 0 <EOF> a (from main())\n     * 1 ']' b\n     * 2 '^' c\n     *\n     * Notice that ')' is not included, because b would have to have\n     * been called from a different context in rule a for ')' to be\n     * included.\n     *\n     * For error recovery, we cannot consider FOLLOW(c)\n     * (context-sensitive or otherwise). We need the combined set of\n     * all context-sensitive FOLLOW sets--the set of all tokens that\n     * could follow any reference in the call chain. We need to\n     * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n     * we resync'd to that token, we'd consume until EOF. We need to\n     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n     * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n     * not consume anything. After printing an error, rule c would\n     * return normally. Rule b would not find the required '^' though.\n     * At this point, it gets a mismatched token error and throws an\n     * exception (since LA(1) is not in the viable following token\n     * set). The rule exception handler tries to recover, but finds\n     * the same recovery set and doesn't consume anything. Rule b\n     * exits normally returning to rule a. Now it finds the ']' (and\n     * with the successful match exits errorRecovery mode).\n     *\n     * So, you can see that the parser walks up the call chain looking\n     * for the token that was a member of the recovery set.\n     *\n     * Errors are not generated in errorRecovery mode.\n     *\n     * ANTLR's error recovery mechanism is based upon original ideas:\n     *\n     * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n     *\n     * and\n     *\n     * \"A note on error recovery in recursive descent parsers\":\n     * http://portal.acm.org/citation.cfm?id=947902.947905\n     *\n     * Later, Josef Grosch had some good ideas:\n     *\n     * \"Efficient and Comfortable Error Recovery in Recursive Descent\n     * Parsers\":\n     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n     *\n     * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n     * at run-time upon error to avoid overhead during parsing.\n     */\n    getErrorRecoverySet(recognizer) {\n        const atn = recognizer._interp.atn\n        let ctx = recognizer._ctx\n        const recoverSet = new IntervalSet()\n        while (ctx !== null && ctx.invokingState>=0) {\n            // compute what follows who invoked us\n            const invokingState = atn.states[ctx.invokingState]\n            const rt = invokingState.transitions[0]\n            const follow = atn.nextTokens(rt.followState)\n            recoverSet.addSet(follow);\n            ctx = ctx.parentCtx;\n        }\n        recoverSet.removeOne(Token.EPSILON);\n        return recoverSet;\n    }\n\n// Consume tokens until one matches the given token set.//\n    consumeUntil(recognizer, set) {\n        let ttype = recognizer.getTokenStream().LA(1)\n        while( ttype !== Token.EOF && !set.contains(ttype)) {\n            recognizer.consume();\n            ttype = recognizer.getTokenStream().LA(1);\n        }\n    }\n}\n\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext//exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * <p>\n * This error strategy is useful in the following scenarios.</p>\n *\n * <ul>\n * <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n * stage of two-stage parsing to immediately terminate if an error is\n * encountered, and immediately fall back to the second stage. In addition to\n * avoiding wasted work by attempting to recover from errors here, the empty\n * implementation of {@link BailErrorStrategy//sync} improves the performance of\n * the first stage.</li>\n * <li><strong>Silent validation:</strong> When syntax errors are not being\n * reported or logged, and the parse result is simply ignored if errors occur,\n * the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n * when the result will be ignored either way.</li>\n * </ul>\n *\n * <p>\n * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n *\n * @see Parser//setErrorHandler(ANTLRErrorStrategy)\n * */\nclass BailErrorStrategy extends DefaultErrorStrategy {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Instead of recovering from exception {@code e}, re-throw it wrapped\n     * in a {@link ParseCancellationException} so it is not caught by the\n     * rule function catches. Use {@link Exception//getCause()} to get the\n     * original {@link RecognitionException}.\n     */\n    recover(recognizer, e) {\n        let context = recognizer._ctx\n        while (context !== null) {\n            context.exception = e;\n            context = context.parentCtx;\n        }\n        throw new ParseCancellationException(e);\n    }\n\n    /**\n     * Make sure we don't attempt to recover inline; if the parser\n     * successfully recovers, it won't throw an exception.\n     */\n    recoverInline(recognizer) {\n        this.recover(recognizer, new InputMismatchException(recognizer));\n    }\n\n// Make sure we don't attempt to recover from problems in subrules.//\n    sync(recognizer) {\n        // pass\n    }\n}\n\n\nmodule.exports = {BailErrorStrategy, DefaultErrorStrategy};\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n *  3 kinds of errors: prediction errors, failed predicate errors, and\n *  mismatched input errors. In each case, the parser knows where it is\n *  in the input, where it is in the ATN, the rule invocation stack,\n *  and what kind of problem occurred.\n */\n\nconst {PredicateTransition} = require('./../atn/Transition');\nconst {Interval} = require('../IntervalSet').Interval;\n\nclass RecognitionException extends Error {\n    constructor(params) {\n        super(params.message);\n        if (!!Error.captureStackTrace) {\n            Error.captureStackTrace(this, RecognitionException);\n        } else {\n            var stack = new Error().stack;\n        }\n        this.message = params.message;\n        this.recognizer = params.recognizer;\n        this.input = params.input;\n        this.ctx = params.ctx;\n        /**\n         * The current {@link Token} when an error occurred. Since not all streams\n         * support accessing symbols by index, we have to track the {@link Token}\n         * instance itself\n        */\n        this.offendingToken = null;\n        /**\n         * Get the ATN state number the parser was in at the time the error\n         * occurred. For {@link NoViableAltException} and\n         * {@link LexerNoViableAltException} exceptions, this is the\n         * {@link DecisionState} number. For others, it is the state whose outgoing\n         * edge we couldn't match.\n         */\n        this.offendingState = -1;\n        if (this.recognizer!==null) {\n            this.offendingState = this.recognizer.state;\n        }\n    }\n\n    /**\n     * Gets the set of input symbols which could potentially follow the\n     * previously matched symbol at the time this exception was thrown.\n     *\n     * <p>If the set of expected tokens is not known and could not be computed,\n     * this method returns {@code null}.</p>\n     *\n     * @return The set of token types that could potentially follow the current\n     * state in the ATN, or {@code null} if the information is not available.\n     */\n    getExpectedTokens() {\n        if (this.recognizer!==null) {\n            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n        } else {\n            return null;\n        }\n    }\n\n    // <p>If the state number is not known, this method returns -1.</p>\n    toString() {\n        return this.message;\n    }\n}\n\nclass LexerNoViableAltException extends RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super({message: \"\", recognizer: lexer, input: input, ctx: null});\n        this.startIndex = startIndex;\n        this.deadEndConfigs = deadEndConfigs;\n    }\n\n    toString() {\n        let symbol = \"\";\n        if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n            symbol = this.input.getText(new Interval(this.startIndex,this.startIndex));\n        }\n        return \"LexerNoViableAltException\" + symbol;\n    }\n}\n\n\n/**\n * Indicates that the parser could not decide which of two or more paths\n * to take based upon the remaining input. It tracks the starting token\n * of the offending input and also knows where the parser was\n * in the various paths when the error. Reported by reportNoViableAlternative()\n */\nclass NoViableAltException extends RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        ctx = ctx || recognizer._ctx;\n        offendingToken = offendingToken || recognizer.getCurrentToken();\n        startToken = startToken || recognizer.getCurrentToken();\n        input = input || recognizer.getInputStream();\n        super({message: \"\", recognizer: recognizer, input: input, ctx: ctx});\n        // Which configurations did we try at input.index() that couldn't match\n        // input.LT(1)?//\n        this.deadEndConfigs = deadEndConfigs;\n        // The token object at the start index; the input stream might\n        // not be buffering tokens so get a reference to it. (At the\n        // time the error occurred, of course the stream needs to keep a\n        // buffer all of the tokens but later we might not have access to those.)\n        this.startToken = startToken;\n        this.offendingToken = offendingToken;\n    }\n}\n\n/**\n * This signifies any kind of mismatched input exceptions such as\n * when the current input does not match the expected token.\n*/\nclass InputMismatchException extends RecognitionException {\n    constructor(recognizer) {\n        super({message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\nfunction formatMessage(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n}\n\n/**\n * A semantic predicate failed during validation. Validation of predicates\n * occurs when normally parsing the alternative just like matching a token.\n * Disambiguating predicate evaluation occurs when we test a predicate during\n * prediction.\n*/\nclass FailedPredicateException extends RecognitionException {\n    constructor(recognizer, predicate, message) {\n        super({\n            message: formatMessage(predicate, message || null), recognizer: recognizer,\n            input: recognizer.getInputStream(), ctx: recognizer._ctx\n        });\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const trans = s.transitions[0]\n        if (trans instanceof PredicateTransition) {\n            this.ruleIndex = trans.ruleIndex;\n            this.predicateIndex = trans.predIndex;\n        } else {\n            this.ruleIndex = 0;\n            this.predicateIndex = 0;\n        }\n        this.predicate = predicate;\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\nclass ParseCancellationException extends Error{\n    constructor() {\n        super()\n        Error.captureStackTrace(this, ParseCancellationException);\n    }\n}\n\nmodule.exports = {\n    RecognitionException,\n    NoViableAltException,\n    LexerNoViableAltException,\n    InputMismatchException,\n    FailedPredicateException,\n    ParseCancellationException\n};\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nmodule.exports.RecognitionException = require('./Errors').RecognitionException;\nmodule.exports.NoViableAltException = require('./Errors').NoViableAltException;\nmodule.exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;\nmodule.exports.InputMismatchException = require('./Errors').InputMismatchException;\nmodule.exports.FailedPredicateException = require('./Errors').FailedPredicateException;\nmodule.exports.DiagnosticErrorListener = require('./DiagnosticErrorListener');\nmodule.exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;\nmodule.exports.DefaultErrorStrategy = require('./ErrorStrategy').DefaultErrorStrategy;\nmodule.exports.ErrorListener = require('./ErrorListener').ErrorListener;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = require('./atn/index');\nexports.codepointat = require('./polyfills/codepointat');\nexports.dfa = require('./dfa/index');\nexports.fromcodepoint = require('./polyfills/fromcodepoint');\nexports.tree = require('./tree/index');\nexports.error = require('./error/index');\nexports.Token = require('./Token').Token;\nexports.CharStreams = require('./CharStreams');\nexports.CommonToken = require('./Token').CommonToken;\nexports.InputStream = require('./InputStream');\nexports.FileStream = require('./FileStream');\nexports.CommonTokenStream = require('./CommonTokenStream');\nexports.Lexer = require('./Lexer');\nexports.Parser = require('./Parser');\nvar pc = require('./PredictionContext');\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = require('./ParserRuleContext');\nexports.Interval = require('./IntervalSet').Interval;\nexports.IntervalSet = require('./IntervalSet').IntervalSet;\nexports.Utils = require('./Utils');\nexports.LL1Analyzer = require('./LL1Analyzer').LL1Analyzer;\n","/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tconst string = String(this);\n\t\t\tconst size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tlet index = position ? Number(position) : 0;\n\t\t\tif (index !== index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tlet second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n","/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tconst defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tconst stringFromCharCode = String.fromCharCode;\n\t\tconst floor = Math.floor;\n\t\tconst fromCodePoint = function(_) {\n\t\t\tconst MAX_SIZE = 0x4000;\n\t\t\tconst codeUnits = [];\n\t\t\tlet highSurrogate;\n\t\t\tlet lowSurrogate;\n\t\t\tlet index = -1;\n\t\t\tconst length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tlet codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) !== codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = require('./../Token');\nconst {Interval} = require('./../IntervalSet');\nconst INVALID_INTERVAL = new Interval(-1, -2);\n\n/**\n * The basic notion of a tree has a parent, a payload, and a list of children.\n * It is the most abstract interface for all the trees used by ANTLR.\n */\nclass Tree {}\n\nclass SyntaxTree extends Tree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTree extends SyntaxTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass RuleNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetRuleContext(){\n\t\tthrow new Error(\"missing interface implementation\")\n\t}\n}\n\nclass TerminalNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ErrorNode extends TerminalNode {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTreeVisitor {\n\tvisit(ctx) {\n\t\t if (Array.isArray(ctx)) {\n\t\t\treturn ctx.map(function(child) {\n\t\t\t\treturn child.accept(this);\n\t\t\t}, this);\n\t\t} else {\n\t\t\treturn ctx.accept(this);\n\t\t}\n\t}\n\n\tvisitChildren(ctx) {\n\t\tif (ctx.children) {\n\t\t\treturn this.visit(ctx.children);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n}\n\nclass ParseTreeListener {\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n\n\tenterEveryRule(node) {\n\t}\n\n\texitEveryRule(node) {\n\t}\n}\n\nclass TerminalNodeImpl extends TerminalNode {\n\tconstructor(symbol) {\n\t\tsuper();\n\t\tthis.parentCtx = null;\n\t\tthis.symbol = symbol;\n\t}\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetSymbol() {\n\t\treturn this.symbol;\n\t}\n\n\tgetParent() {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetPayload() {\n\t\treturn this.symbol;\n\t}\n\n\tgetSourceInterval() {\n\t\tif (this.symbol === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t}\n\t\tconst tokenIndex = this.symbol.tokenIndex;\n\t\treturn new Interval(tokenIndex, tokenIndex);\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitTerminal(this);\n\t}\n\n\tgetText() {\n\t\treturn this.symbol.text;\n\t}\n\n\ttoString() {\n\t\tif (this.symbol.type === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else {\n\t\t\treturn this.symbol.text;\n\t\t}\n\t}\n}\n\n\n/**\n * Represents a token that was consumed during resynchronization\n * rather than during a valid match operation. For example,\n * we will create this kind of a node during single token insertion\n * and deletion as well as during \"consume until error recovery set\"\n * upon no viable alternative exceptions.\n */\nclass ErrorNodeImpl extends TerminalNodeImpl {\n\tconstructor(token) {\n\t\tsuper(token);\n\t}\n\n\tisErrorNode() {\n\t\treturn true;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitErrorNode(this);\n\t}\n}\n\nclass ParseTreeWalker {\n\n\t/**\n\t * Performs a walk on the given parse tree starting at the root and going down recursively\n\t * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before\n\t * recursively walking down into child nodes, then\n\t * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.\n\t * @param listener The listener used by the walker to process grammar rules\n\t * @param t The parse tree to be walked on\n\t */\n\twalk(listener, t) {\n\t\tconst errorNode = t instanceof ErrorNode ||\n\t\t\t\t(t.isErrorNode !== undefined && t.isErrorNode());\n\t\tif (errorNode) {\n\t\t\tlistener.visitErrorNode(t);\n\t\t} else if (t instanceof TerminalNode) {\n\t\t\tlistener.visitTerminal(t);\n\t\t} else {\n\t\t\tthis.enterRule(listener, t);\n\t\t\tfor (let i = 0; i < t.getChildCount(); i++) {\n\t\t\t\tconst child = t.getChild(i);\n\t\t\t\tthis.walk(listener, child);\n\t\t\t}\n\t\t\tthis.exitRule(listener, t);\n\t\t}\n\t}\n\n\t/**\n\t * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}\n\t * then by triggering the event specific to the given parse tree node\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\tenterRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tlistener.enterEveryRule(ctx);\n\t\tctx.enterRule(listener);\n\t}\n\n\t/**\n\t * Exits a grammar rule by first triggering the event specific to the given parse tree node\n\t * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\texitRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tctx.exitRule(listener);\n\t\tlistener.exitEveryRule(ctx);\n\t}\n}\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nmodule.exports = {\n\tRuleNode,\n\tErrorNode,\n\tTerminalNode,\n\tErrorNodeImpl,\n\tTerminalNodeImpl,\n\tParseTreeListener,\n\tParseTreeVisitor,\n\tParseTreeWalker,\n\tINVALID_INTERVAL\n}\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = require('./../Utils');\nconst {Token} = require('./../Token');\nconst {ErrorNode, TerminalNode, RuleNode} = require('./Tree');\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nconst Trees = {\n    /**\n     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n     *  node payloads to get the text for the nodes.  Detect\n     *  parse trees and extract data appropriately.\n     */\n    toStringTree: function(tree, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        let s = Trees.getNodeText(tree, ruleNames);\n        s = Utils.escapeWhitespace(s, false);\n        const c = tree.getChildCount();\n        if(c===0) {\n            return s;\n        }\n        let res = \"(\" + s + ' ';\n        if(c>0) {\n            s = Trees.toStringTree(tree.getChild(0), ruleNames);\n            res = res.concat(s);\n        }\n        for(let i=1;i<c;i++) {\n            s = Trees.toStringTree(tree.getChild(i), ruleNames);\n            res = res.concat(' ' + s);\n        }\n        res = res.concat(\")\");\n        return res;\n    },\n\n    getNodeText: function(t, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        if(ruleNames!==null) {\n            if (t instanceof RuleNode) {\n                const context = t.getRuleContext()\n                const altNumber = context.getAltNumber();\n                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n                if ( altNumber != 0 ) {\n                    return ruleNames[t.ruleIndex]+\":\"+altNumber;\n                }\n                return ruleNames[t.ruleIndex];\n            } else if ( t instanceof ErrorNode) {\n                return t.toString();\n            } else if(t instanceof TerminalNode) {\n                if(t.symbol!==null) {\n                    return t.symbol.text;\n                }\n            }\n        }\n        // no recog for rule names\n        const payload = t.getPayload();\n        if (payload instanceof Token ) {\n            return payload.text;\n        }\n        return t.getPayload().toString();\n    },\n\n    /**\n     * Return ordered list of all children of this node\n     */\n    getChildren: function(t) {\n        const list = [];\n        for(let i=0;i<t.getChildCount();i++) {\n            list.push(t.getChild(i));\n        }\n        return list;\n    },\n\n    /**\n     * Return a list of all ancestors of this node.  The first node of\n     * list is the root and the last is the parent of this node.\n     */\n    getAncestors: function(t) {\n        let ancestors = [];\n        t = t.getParent();\n        while(t!==null) {\n            ancestors = [t].concat(ancestors);\n            t = t.getParent();\n        }\n        return ancestors;\n    },\n\n    findAllTokenNodes: function(t, ttype) {\n        return Trees.findAllNodes(t, ttype, true);\n    },\n\n    findAllRuleNodes: function(t, ruleIndex) {\n        return Trees.findAllNodes(t, ruleIndex, false);\n    },\n\n    findAllNodes: function(t, index, findTokens) {\n        const nodes = [];\n        Trees._findAllNodes(t, index, findTokens, nodes);\n        return nodes;\n    },\n\n    _findAllNodes: function(t, index, findTokens, nodes) {\n        // check this node (the root) first\n        if(findTokens && (t instanceof TerminalNode)) {\n            if(t.symbol.type===index) {\n                nodes.push(t);\n            }\n        } else if(!findTokens && (t instanceof RuleNode)) {\n            if(t.ruleIndex===index) {\n                nodes.push(t);\n            }\n        }\n        // check children\n        for(let i=0;i<t.getChildCount();i++) {\n            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n        }\n    },\n\n    descendants: function(t) {\n        let nodes = [t];\n        for(let i=0;i<t.getChildCount();i++) {\n            nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n        }\n        return nodes;\n    }\n}\n\nmodule.exports = Trees;\n","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Tree = require('./Tree');\nconst Trees = require('./Trees');\nmodule.exports = {...Tree, Trees}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Generated from ./production/lgmscript/LgmScript.g4 by ANTLR 4.9.2\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n\n\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\n    \"\\u5964\\u0002\\u001a\\u008f\\b\\u0001\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\",\n    \"\\u0004\\u0004\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\",\n    \"\\t\\u0007\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\",\n    \"\\f\\t\\f\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\",\n    \"\\t\\u0010\\u0004\\u0011\\t\\u0011\\u0004\\u0012\\t\\u0012\\u0004\\u0013\\t\\u0013\",\n    \"\\u0004\\u0014\\t\\u0014\\u0004\\u0015\\t\\u0015\\u0004\\u0016\\t\\u0016\\u0004\\u0017\",\n    \"\\t\\u0017\\u0004\\u0018\\t\\u0018\\u0004\\u0019\\t\\u0019\\u0003\\u0002\\u0003\\u0002\",\n    \"\\u0003\\u0002\\u0003\\u0002\\u0005\\u00028\\n\\u0002\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\",\n    \"\\u0003\\u0004\\u0003\\u0005\\u0006\\u0005D\\n\\u0005\\r\\u0005\\u000e\\u0005E\\u0003\",\n    \"\\u0006\\u0003\\u0006\\u0007\\u0006J\\n\\u0006\\f\\u0006\\u000e\\u0006M\\u000b\\u0006\",\n    \"\\u0003\\u0006\\u0003\\u0006\\u0003\\u0007\\u0003\\u0007\\u0003\\b\\u0003\\b\\u0003\",\n    \"\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0003\\b\\u0005\\b[\\n\\b\\u0003\\t\\u0003\",\n    \"\\t\\u0003\\n\\u0003\\n\\u0003\\u000b\\u0003\\u000b\\u0003\\f\\u0003\\f\\u0003\\r\\u0003\",\n    \"\\r\\u0003\\u000e\\u0003\\u000e\\u0003\\u000f\\u0003\\u000f\\u0003\\u0010\\u0003\",\n    \"\\u0010\\u0003\\u0011\\u0003\\u0011\\u0003\\u0012\\u0003\\u0012\\u0003\\u0013\\u0003\",\n    \"\\u0013\\u0003\\u0014\\u0003\\u0014\\u0003\\u0015\\u0003\\u0015\\u0003\\u0016\\u0003\",\n    \"\\u0016\\u0003\\u0017\\u0003\\u0017\\u0007\\u0017{\\n\\u0017\\f\\u0017\\u000e\\u0017\",\n    \"~\\u000b\\u0017\\u0003\\u0018\\u0006\\u0018\\u0081\\n\\u0018\\r\\u0018\\u000e\\u0018\",\n    \"\\u0082\\u0003\\u0018\\u0003\\u0018\\u0003\\u0019\\u0003\\u0019\\u0005\\u0019\\u0089\",\n    \"\\n\\u0019\\u0003\\u0019\\u0005\\u0019\\u008c\\n\\u0019\\u0003\\u0019\\u0003\\u0019\",\n    \"\\u0003K\\u0002\\u001a\\u0003\\u0003\\u0005\\u0004\\u0007\\u0005\\t\\u0006\\u000b\",\n    \"\\u0007\\r\\b\\u000f\\t\\u0011\\n\\u0013\\u000b\\u0015\\f\\u0017\\r\\u0019\\u000e\\u001b\",\n    \"\\u000f\\u001d\\u0010\\u001f\\u0011!\\u0012#\\u0013%\\u0014\\'\\u0015)\\u0016+\",\n    \"\\u0017-\\u0018/\\u00191\\u001a\\u0003\\u0002\\u0006\\u0003\\u00022;\\u0005\\u0002\",\n    \"C\\\\aac|\\u0006\\u00022;C\\\\aac|\\u0004\\u0002\\u000b\\u000b\\\"\\\"\\u0002\\u0099\",\n    \"\\u0002\\u0003\\u0003\\u0002\\u0002\\u0002\\u0002\\u0005\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0007\\u0003\\u0002\\u0002\\u0002\\u0002\\t\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u000b\\u0003\\u0002\\u0002\\u0002\\u0002\\r\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u000f\\u0003\\u0002\\u0002\\u0002\\u0002\\u0011\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0013\\u0003\\u0002\\u0002\\u0002\\u0002\\u0015\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0017\\u0003\\u0002\\u0002\\u0002\\u0002\\u0019\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u001b\\u0003\\u0002\\u0002\\u0002\\u0002\\u001d\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u001f\\u0003\\u0002\\u0002\\u0002\\u0002!\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002#\\u0003\\u0002\\u0002\\u0002\\u0002%\\u0003\\u0002\\u0002\\u0002\\u0002\",\n    \"\\'\\u0003\\u0002\\u0002\\u0002\\u0002)\\u0003\\u0002\\u0002\\u0002\\u0002+\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0002-\\u0003\\u0002\\u0002\\u0002\\u0002/\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u00021\\u0003\\u0002\\u0002\\u0002\\u00037\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u00059\\u0003\\u0002\\u0002\\u0002\\u0007>\\u0003\\u0002\\u0002\\u0002\",\n    \"\\tC\\u0003\\u0002\\u0002\\u0002\\u000bG\\u0003\\u0002\\u0002\\u0002\\rP\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u000fZ\\u0003\\u0002\\u0002\\u0002\\u0011\\\\\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u0013^\\u0003\\u0002\\u0002\\u0002\\u0015`\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0017b\\u0003\\u0002\\u0002\\u0002\\u0019d\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u001bf\\u0003\\u0002\\u0002\\u0002\\u001dh\\u0003\\u0002\\u0002\\u0002\\u001f\",\n    \"j\\u0003\\u0002\\u0002\\u0002!l\\u0003\\u0002\\u0002\\u0002#n\\u0003\\u0002\\u0002\",\n    \"\\u0002%p\\u0003\\u0002\\u0002\\u0002\\'r\\u0003\\u0002\\u0002\\u0002)t\\u0003\",\n    \"\\u0002\\u0002\\u0002+v\\u0003\\u0002\\u0002\\u0002-x\\u0003\\u0002\\u0002\\u0002\",\n    \"/\\u0080\\u0003\\u0002\\u0002\\u00021\\u008b\\u0003\\u0002\\u0002\\u000234\\u0007\",\n    \"k\\u0002\\u000248\\u0007h\\u0002\\u000256\\u0007\\u5984\\u0002\\u000268\\u0007\",\n    \"\\u679e\\u0002\\u000273\\u0003\\u0002\\u0002\\u000275\\u0003\\u0002\\u0002\\u0002\",\n    \"8\\u0004\\u0003\\u0002\\u0002\\u00029:\\u0007g\\u0002\\u0002:;\\u0007n\\u0002\",\n    \"\\u0002;<\\u0007u\\u0002\\u0002<=\\u0007g\\u0002\\u0002=\\u0006\\u0003\\u0002\",\n    \"\\u0002\\u0002>?\\u0007k\\u0002\\u0002?@\\u0007p\\u0002\\u0002@A\\u0007v\\u0002\",\n    \"\\u0002A\\b\\u0003\\u0002\\u0002\\u0002BD\\t\\u0002\\u0002\\u0002CB\\u0003\\u0002\",\n    \"\\u0002\\u0002DE\\u0003\\u0002\\u0002\\u0002EC\\u0003\\u0002\\u0002\\u0002EF\\u0003\",\n    \"\\u0002\\u0002\\u0002F\\n\\u0003\\u0002\\u0002\\u0002GK\\u0007$\\u0002\\u0002H\",\n    \"J\\u000b\\u0002\\u0002\\u0002IH\\u0003\\u0002\\u0002\\u0002JM\\u0003\\u0002\\u0002\",\n    \"\\u0002KL\\u0003\\u0002\\u0002\\u0002KI\\u0003\\u0002\\u0002\\u0002LN\\u0003\\u0002\",\n    \"\\u0002\\u0002MK\\u0003\\u0002\\u0002\\u0002NO\\u0007$\\u0002\\u0002O\\f\\u0003\",\n    \"\\u0002\\u0002\\u0002PQ\\u0007?\\u0002\\u0002Q\\u000e\\u0003\\u0002\\u0002\\u0002\",\n    \"RS\\u0007?\\u0002\\u0002S[\\u0007?\\u0002\\u0002T[\\u0007@\\u0002\\u0002UV\\u0007\",\n    \"@\\u0002\\u0002V[\\u0007?\\u0002\\u0002W[\\u0007>\\u0002\\u0002XY\\u0007>\\u0002\",\n    \"\\u0002Y[\\u0007?\\u0002\\u0002ZR\\u0003\\u0002\\u0002\\u0002ZT\\u0003\\u0002\",\n    \"\\u0002\\u0002ZU\\u0003\\u0002\\u0002\\u0002ZW\\u0003\\u0002\\u0002\\u0002ZX\\u0003\",\n    \"\\u0002\\u0002\\u0002[\\u0010\\u0003\\u0002\\u0002\\u0002\\\\]\\u0007-\\u0002\\u0002\",\n    \"]\\u0012\\u0003\\u0002\\u0002\\u0002^_\\u0007/\\u0002\\u0002_\\u0014\\u0003\\u0002\",\n    \"\\u0002\\u0002`a\\u0007,\\u0002\\u0002a\\u0016\\u0003\\u0002\\u0002\\u0002bc\\u0007\",\n    \"1\\u0002\\u0002c\\u0018\\u0003\\u0002\\u0002\\u0002de\\u0007%\\u0002\\u0002e\\u001a\",\n    \"\\u0003\\u0002\\u0002\\u0002fg\\u0007=\\u0002\\u0002g\\u001c\\u0003\\u0002\\u0002\",\n    \"\\u0002hi\\u00070\\u0002\\u0002i\\u001e\\u0003\\u0002\\u0002\\u0002jk\\u0007.\",\n    \"\\u0002\\u0002k \\u0003\\u0002\\u0002\\u0002lm\\u0007]\\u0002\\u0002m\\\"\\u0003\",\n    \"\\u0002\\u0002\\u0002no\\u0007_\\u0002\\u0002o$\\u0003\\u0002\\u0002\\u0002pq\",\n    \"\\u0007}\\u0002\\u0002q&\\u0003\\u0002\\u0002\\u0002rs\\u0007\\u007f\\u0002\\u0002\",\n    \"s(\\u0003\\u0002\\u0002\\u0002tu\\u0007*\\u0002\\u0002u*\\u0003\\u0002\\u0002\",\n    \"\\u0002vw\\u0007+\\u0002\\u0002w,\\u0003\\u0002\\u0002\\u0002x|\\t\\u0003\\u0002\",\n    \"\\u0002y{\\t\\u0004\\u0002\\u0002zy\\u0003\\u0002\\u0002\\u0002{~\\u0003\\u0002\",\n    \"\\u0002\\u0002|z\\u0003\\u0002\\u0002\\u0002|}\\u0003\\u0002\\u0002\\u0002}.\\u0003\",\n    \"\\u0002\\u0002\\u0002~|\\u0003\\u0002\\u0002\\u0002\\u007f\\u0081\\t\\u0005\\u0002\",\n    \"\\u0002\\u0080\\u007f\\u0003\\u0002\\u0002\\u0002\\u0081\\u0082\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0082\\u0080\\u0003\\u0002\\u0002\\u0002\\u0082\\u0083\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0083\\u0084\\u0003\\u0002\\u0002\\u0002\\u0084\\u0085\\b\\u0018\\u0002\",\n    \"\\u0002\\u00850\\u0003\\u0002\\u0002\\u0002\\u0086\\u0088\\u0007\\u000f\\u0002\",\n    \"\\u0002\\u0087\\u0089\\u0007\\f\\u0002\\u0002\\u0088\\u0087\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0088\\u0089\\u0003\\u0002\\u0002\\u0002\\u0089\\u008c\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u008a\\u008c\\u0007\\f\\u0002\\u0002\\u008b\\u0086\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u008b\\u008a\\u0003\\u0002\\u0002\\u0002\\u008c\\u008d\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u008d\\u008e\\b\\u0019\\u0002\\u0002\\u008e2\\u0003\\u0002\\u0002\\u0002\",\n    \"\\f\\u00027EKZz|\\u0082\\u0088\\u008b\\u0003\\b\\u0002\\u0002\"].join(\"\");\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nexport default class LgmScriptLexer extends antlr4.Lexer {\n\n    static grammarFileName = \"LgmScript.g4\";\n    static channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\n\tstatic modeNames = [ \"DEFAULT_MODE\" ];\n\tstatic literalNames = [ null, null, \"'else'\", \"'int'\", null, null, \"'='\", \n                         null, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'#'\", \"';'\", \n                         \"'.'\", \"','\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"'('\", \n                         \"')'\" ];\n\tstatic symbolicNames = [ null, \"If\", \"Else\", \"Int\", \"IntLiteral\", \"StringLiteral\", \n                          \"AssignmentOP\", \"RelationalOP\", \"ADD\", \"SUB\", \n                          \"MUL\", \"DIV\", \"Sharp\", \"SemiColon\", \"Dot\", \"Comm\", \n                          \"LeftBracket\", \"RightBracket\", \"LeftBrace\", \"RightBrace\", \n                          \"LeftParen\", \"RightParen\", \"Id\", \"Whitespace\", \n                          \"Newline\" ];\n\tstatic ruleNames = [ \"If\", \"Else\", \"Int\", \"IntLiteral\", \"StringLiteral\", \n                      \"AssignmentOP\", \"RelationalOP\", \"ADD\", \"SUB\", \"MUL\", \n                      \"DIV\", \"Sharp\", \"SemiColon\", \"Dot\", \"Comm\", \"LeftBracket\", \n                      \"RightBracket\", \"LeftBrace\", \"RightBrace\", \"LeftParen\", \n                      \"RightParen\", \"Id\", \"Whitespace\", \"Newline\" ];\n\n    constructor(input) {\n        super(input)\n        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n    }\n\n    get atn() {\n        return atn;\n    }\n}\n\nLgmScriptLexer.EOF = antlr4.Token.EOF;\nLgmScriptLexer.If = 1;\nLgmScriptLexer.Else = 2;\nLgmScriptLexer.Int = 3;\nLgmScriptLexer.IntLiteral = 4;\nLgmScriptLexer.StringLiteral = 5;\nLgmScriptLexer.AssignmentOP = 6;\nLgmScriptLexer.RelationalOP = 7;\nLgmScriptLexer.ADD = 8;\nLgmScriptLexer.SUB = 9;\nLgmScriptLexer.MUL = 10;\nLgmScriptLexer.DIV = 11;\nLgmScriptLexer.Sharp = 12;\nLgmScriptLexer.SemiColon = 13;\nLgmScriptLexer.Dot = 14;\nLgmScriptLexer.Comm = 15;\nLgmScriptLexer.LeftBracket = 16;\nLgmScriptLexer.RightBracket = 17;\nLgmScriptLexer.LeftBrace = 18;\nLgmScriptLexer.RightBrace = 19;\nLgmScriptLexer.LeftParen = 20;\nLgmScriptLexer.RightParen = 21;\nLgmScriptLexer.Id = 22;\nLgmScriptLexer.Whitespace = 23;\nLgmScriptLexer.Newline = 24;\n\n\n\n","// Generated from ./production/lgmscript/LgmScript.g4 by ANTLR 4.9.2\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n// This class defines a complete listener for a parse tree produced by LgmScriptParser.\nexport default class LgmScriptListener extends antlr4.tree.ParseTreeListener {\n\n\t// Enter a parse tree produced by LgmScriptParser#program.\n\tenterProgram(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#program.\n\texitProgram(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#intDeclare.\n\tenterIntDeclare(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#intDeclare.\n\texitIntDeclare(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#additive.\n\tenterAdditive(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#additive.\n\texitAdditive(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#multiplicative.\n\tenterMultiplicative(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#multiplicative.\n\texitMultiplicative(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#primary.\n\tenterPrimary(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#primary.\n\texitPrimary(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#expressionStatement.\n\tenterExpressionStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#expressionStatement.\n\texitExpressionStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#expression.\n\tenterExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#expression.\n\texitExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#assignmentStatement.\n\tenterAssignmentStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#assignmentStatement.\n\texitAssignmentStatement(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by LgmScriptParser#ifStatement.\n\tenterIfStatement(ctx) {\n\t}\n\n\t// Exit a parse tree produced by LgmScriptParser#ifStatement.\n\texitIfStatement(ctx) {\n\t}\n\n\n\n}","// Generated from ./production/lgmscript/LgmScript.g4 by ANTLR 4.9.2\n// jshint ignore: start\nimport antlr4 from 'antlr4';\n\n// This class defines a complete generic visitor for a parse tree produced by LgmScriptParser.\n\nexport default class LgmScriptVisitor extends antlr4.tree.ParseTreeVisitor {\n\n\t// Visit a parse tree produced by LgmScriptParser#program.\n\tvisitProgram(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#intDeclare.\n\tvisitIntDeclare(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#additive.\n\tvisitAdditive(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#multiplicative.\n\tvisitMultiplicative(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#primary.\n\tvisitPrimary(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#expressionStatement.\n\tvisitExpressionStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#expression.\n\tvisitExpression(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#assignmentStatement.\n\tvisitAssignmentStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\t// Visit a parse tree produced by LgmScriptParser#ifStatement.\n\tvisitIfStatement(ctx) {\n\t  return this.visitChildren(ctx);\n\t}\n\n\n\n}","// Generated from ./production/lgmscript/LgmScript.g4 by ANTLR 4.9.2\n// jshint ignore: start\nimport antlr4 from 'antlr4';\nimport LgmScriptListener from './LgmScriptListener.js';\nimport LgmScriptVisitor from './LgmScriptVisitor.js';\n\n\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\n    \"\\u5964\\u0003\\u001aS\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\",\n    \"\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\\t\\u0007\",\n    \"\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\",\n    \"\\u0003\\u0002\\u0007\\u0002\\u0019\\n\\u0002\\f\\u0002\\u000e\\u0002\\u001c\\u000b\",\n    \"\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0005\\u0003\\\"\",\n    \"\\n\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\",\n    \"\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0007\\u0004,\\n\\u0004\\f\\u0004\\u000e\",\n    \"\\u0004/\\u000b\\u0004\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\",\n    \"\\u0003\\u0005\\u0003\\u0005\\u0007\\u00057\\n\\u0005\\f\\u0005\\u000e\\u0005:\\u000b\",\n    \"\\u0005\\u0003\\u0006\\u0003\\u0006\\u0003\\u0007\\u0005\\u0007?\\n\\u0007\\u0003\",\n    \"\\u0007\\u0003\\u0007\\u0003\\b\\u0003\\b\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\",\n    \"\\t\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\\n\\u0005\\nQ\",\n    \"\\n\\n\\u0003\\n\\u0002\\u0004\\u0006\\b\\u000b\\u0002\\u0004\\u0006\\b\\n\\f\\u000e\",\n    \"\\u0010\\u0012\\u0002\\u0005\\u0003\\u0002\\n\\u000b\\u0003\\u0002\\f\\r\\u0004\\u0002\",\n    \"\\u0006\\u0006\\u0018\\u0018\\u0002R\\u0002\\u001a\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0004\\u001d\\u0003\\u0002\\u0002\\u0002\\u0006%\\u0003\\u0002\\u0002\\u0002\",\n    \"\\b0\\u0003\\u0002\\u0002\\u0002\\n;\\u0003\\u0002\\u0002\\u0002\\f>\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u000eB\\u0003\\u0002\\u0002\\u0002\\u0010D\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0012I\\u0003\\u0002\\u0002\\u0002\\u0014\\u0019\\u0005\\u0004\\u0003\",\n    \"\\u0002\\u0015\\u0019\\u0005\\f\\u0007\\u0002\\u0016\\u0019\\u0005\\u0010\\t\\u0002\",\n    \"\\u0017\\u0019\\u0005\\u0012\\n\\u0002\\u0018\\u0014\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0018\\u0015\\u0003\\u0002\\u0002\\u0002\\u0018\\u0016\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0018\\u0017\\u0003\\u0002\\u0002\\u0002\\u0019\\u001c\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u001a\\u0018\\u0003\\u0002\\u0002\\u0002\\u001a\\u001b\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u001b\\u0003\\u0003\\u0002\\u0002\\u0002\\u001c\\u001a\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u001d\\u001e\\u0007\\u0005\\u0002\\u0002\\u001e!\\u0007\\u0018\\u0002\\u0002\",\n    \"\\u001f \\u0007\\b\\u0002\\u0002 \\\"\\u0005\\u0006\\u0004\\u0002!\\u001f\\u0003\",\n    \"\\u0002\\u0002\\u0002!\\\"\\u0003\\u0002\\u0002\\u0002\\\"#\\u0003\\u0002\\u0002\\u0002\",\n    \"#$\\u0007\\u000f\\u0002\\u0002$\\u0005\\u0003\\u0002\\u0002\\u0002%&\\b\\u0004\",\n    \"\\u0001\\u0002&\\'\\u0005\\b\\u0005\\u0002\\'-\\u0003\\u0002\\u0002\\u0002()\\f\\u0003\",\n    \"\\u0002\\u0002)*\\t\\u0002\\u0002\\u0002*,\\u0005\\b\\u0005\\u0002+(\\u0003\\u0002\",\n    \"\\u0002\\u0002,/\\u0003\\u0002\\u0002\\u0002-+\\u0003\\u0002\\u0002\\u0002-.\\u0003\",\n    \"\\u0002\\u0002\\u0002.\\u0007\\u0003\\u0002\\u0002\\u0002/-\\u0003\\u0002\\u0002\",\n    \"\\u000201\\b\\u0005\\u0001\\u000212\\u0005\\n\\u0006\\u000228\\u0003\\u0002\\u0002\",\n    \"\\u000234\\f\\u0003\\u0002\\u000245\\t\\u0003\\u0002\\u000257\\u0005\\n\\u0006\\u0002\",\n    \"63\\u0003\\u0002\\u0002\\u00027:\\u0003\\u0002\\u0002\\u000286\\u0003\\u0002\\u0002\",\n    \"\\u000289\\u0003\\u0002\\u0002\\u00029\\t\\u0003\\u0002\\u0002\\u0002:8\\u0003\",\n    \"\\u0002\\u0002\\u0002;<\\t\\u0004\\u0002\\u0002<\\u000b\\u0003\\u0002\\u0002\\u0002\",\n    \"=?\\u0005\\u000e\\b\\u0002>=\\u0003\\u0002\\u0002\\u0002>?\\u0003\\u0002\\u0002\",\n    \"\\u0002?@\\u0003\\u0002\\u0002\\u0002@A\\u0007\\u000f\\u0002\\u0002A\\r\\u0003\",\n    \"\\u0002\\u0002\\u0002BC\\u0005\\u0006\\u0004\\u0002C\\u000f\\u0003\\u0002\\u0002\",\n    \"\\u0002DE\\u0007\\u0018\\u0002\\u0002EF\\u0007\\b\\u0002\\u0002FG\\u0005\\u0006\",\n    \"\\u0004\\u0002GH\\u0007\\u000f\\u0002\\u0002H\\u0011\\u0003\\u0002\\u0002\\u0002\",\n    \"IJ\\u0007\\u0003\\u0002\\u0002JK\\u0007\\u0016\\u0002\\u0002KL\\u0005\\u000e\\b\",\n    \"\\u0002LM\\u0007\\u0017\\u0002\\u0002MP\\u0005\\u000e\\b\\u0002NO\\u0007\\u0004\",\n    \"\\u0002\\u0002OQ\\u0005\\u000e\\b\\u0002PN\\u0003\\u0002\\u0002\\u0002PQ\\u0003\",\n    \"\\u0002\\u0002\\u0002Q\\u0013\\u0003\\u0002\\u0002\\u0002\\t\\u0018\\u001a!-8>\",\n    \"P\"].join(\"\");\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nconst sharedContextCache = new antlr4.PredictionContextCache();\n\nexport default class LgmScriptParser extends antlr4.Parser {\n\n    static grammarFileName = \"LgmScript.g4\";\n    static literalNames = [ null, null, \"'else'\", \"'int'\", null, null, \"'='\", \n                            null, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'#'\", \"';'\", \n                            \"'.'\", \"','\", \"'['\", \"']'\", \"'{'\", \"'}'\", \"'('\", \n                            \"')'\" ];\n    static symbolicNames = [ null, \"If\", \"Else\", \"Int\", \"IntLiteral\", \"StringLiteral\", \n                             \"AssignmentOP\", \"RelationalOP\", \"ADD\", \"SUB\", \n                             \"MUL\", \"DIV\", \"Sharp\", \"SemiColon\", \"Dot\", \n                             \"Comm\", \"LeftBracket\", \"RightBracket\", \"LeftBrace\", \n                             \"RightBrace\", \"LeftParen\", \"RightParen\", \"Id\", \n                             \"Whitespace\", \"Newline\" ];\n    static ruleNames = [ \"program\", \"intDeclare\", \"additive\", \"multiplicative\", \n                         \"primary\", \"expressionStatement\", \"expression\", \n                         \"assignmentStatement\", \"ifStatement\" ];\n\n    constructor(input) {\n        super(input);\n        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\n        this.ruleNames = LgmScriptParser.ruleNames;\n        this.literalNames = LgmScriptParser.literalNames;\n        this.symbolicNames = LgmScriptParser.symbolicNames;\n\n        LgmScriptParser.prototype.start = function() {\n            console.log(\"Started...\")\n        }\n\n    }\n\n    get atn() {\n        return atn;\n    }\n\n    sempred(localctx, ruleIndex, predIndex) {\n    \tswitch(ruleIndex) {\n    \tcase 2:\n    \t    \t\treturn this.additive_sempred(localctx, predIndex);\n    \tcase 3:\n    \t    \t\treturn this.multiplicative_sempred(localctx, predIndex);\n        default:\n            throw \"No predicate with index:\" + ruleIndex;\n       }\n    }\n\n    additive_sempred(localctx, predIndex) {\n    \tswitch(predIndex) {\n    \t\tcase 0:\n    \t\t\treturn this.precpred(this._ctx, 1);\n    \t\tdefault:\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\n    \t}\n    };\n\n    multiplicative_sempred(localctx, predIndex) {\n    \tswitch(predIndex) {\n    \t\tcase 1:\n    \t\t\treturn this.precpred(this._ctx, 1);\n    \t\tdefault:\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\n    \t}\n    };\n\n\n\n\n\tprogram() {\n\t    let localctx = new ProgramContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 0, LgmScriptParser.RULE_program);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 24;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << LgmScriptParser.If) | (1 << LgmScriptParser.Int) | (1 << LgmScriptParser.IntLiteral) | (1 << LgmScriptParser.SemiColon) | (1 << LgmScriptParser.Id))) !== 0)) {\n\t            this.state = 22;\n\t            this._errHandler.sync(this);\n\t            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);\n\t            switch(la_) {\n\t            case 1:\n\t                this.state = 18;\n\t                this.intDeclare();\n\t                break;\n\n\t            case 2:\n\t                this.state = 19;\n\t                this.expressionStatement();\n\t                break;\n\n\t            case 3:\n\t                this.state = 20;\n\t                this.assignmentStatement();\n\t                break;\n\n\t            case 4:\n\t                this.state = 21;\n\t                this.ifStatement();\n\t                break;\n\n\t            }\n\t            this.state = 26;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tintDeclare() {\n\t    let localctx = new IntDeclareContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 2, LgmScriptParser.RULE_intDeclare);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 27;\n\t        this.match(LgmScriptParser.Int);\n\t        this.state = 28;\n\t        this.match(LgmScriptParser.Id);\n\t        this.state = 31;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===LgmScriptParser.AssignmentOP) {\n\t            this.state = 29;\n\t            this.match(LgmScriptParser.AssignmentOP);\n\t            this.state = 30;\n\t            this.additive(0);\n\t        }\n\n\t        this.state = 33;\n\t        this.match(LgmScriptParser.SemiColon);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\tadditive(_p) {\n\t\tif(_p===undefined) {\n\t\t    _p = 0;\n\t\t}\n\t    const _parentctx = this._ctx;\n\t    const _parentState = this.state;\n\t    let localctx = new AdditiveContext(this, this._ctx, _parentState);\n\t    let _prevctx = localctx;\n\t    const _startState = 4;\n\t    this.enterRecursionRule(localctx, 4, LgmScriptParser.RULE_additive, _p);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 36;\n\t        this.multiplicative(0);\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 43;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if(_alt===1) {\n\t                if(this._parseListeners!==null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                localctx = new AdditiveContext(this, _parentctx, _parentState);\n\t                this.pushNewRecursionContext(localctx, _startState, LgmScriptParser.RULE_additive);\n\t                this.state = 38;\n\t                if (!( this.precpred(this._ctx, 1))) {\n\t                    throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 1)\");\n\t                }\n\t                this.state = 39;\n\t                localctx.bop = this._input.LT(1);\n\t                _la = this._input.LA(1);\n\t                if(!(_la===LgmScriptParser.ADD || _la===LgmScriptParser.SUB)) {\n\t                    localctx.bop = this._errHandler.recoverInline(this);\n\t                }\n\t                else {\n\t                \tthis._errHandler.reportMatch(this);\n\t                    this.consume();\n\t                }\n\t                this.state = 40;\n\t                this.multiplicative(0); \n\t            }\n\t            this.state = 45;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);\n\t        }\n\n\t    } catch( error) {\n\t        if(error instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = error;\n\t\t        this._errHandler.reportError(this, error);\n\t\t        this._errHandler.recover(this, error);\n\t\t    } else {\n\t\t    \tthrow error;\n\t\t    }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx)\n\t    }\n\t    return localctx;\n\t}\n\n\n\tmultiplicative(_p) {\n\t\tif(_p===undefined) {\n\t\t    _p = 0;\n\t\t}\n\t    const _parentctx = this._ctx;\n\t    const _parentState = this.state;\n\t    let localctx = new MultiplicativeContext(this, this._ctx, _parentState);\n\t    let _prevctx = localctx;\n\t    const _startState = 6;\n\t    this.enterRecursionRule(localctx, 6, LgmScriptParser.RULE_multiplicative, _p);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 47;\n\t        this.primary();\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 54;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if(_alt===1) {\n\t                if(this._parseListeners!==null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                localctx = new MultiplicativeContext(this, _parentctx, _parentState);\n\t                this.pushNewRecursionContext(localctx, _startState, LgmScriptParser.RULE_multiplicative);\n\t                this.state = 49;\n\t                if (!( this.precpred(this._ctx, 1))) {\n\t                    throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 1)\");\n\t                }\n\t                this.state = 50;\n\t                localctx.bop = this._input.LT(1);\n\t                _la = this._input.LA(1);\n\t                if(!(_la===LgmScriptParser.MUL || _la===LgmScriptParser.DIV)) {\n\t                    localctx.bop = this._errHandler.recoverInline(this);\n\t                }\n\t                else {\n\t                \tthis._errHandler.reportMatch(this);\n\t                    this.consume();\n\t                }\n\t                this.state = 51;\n\t                this.primary(); \n\t            }\n\t            this.state = 56;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);\n\t        }\n\n\t    } catch( error) {\n\t        if(error instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = error;\n\t\t        this._errHandler.reportError(this, error);\n\t\t        this._errHandler.recover(this, error);\n\t\t    } else {\n\t\t    \tthrow error;\n\t\t    }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx)\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tprimary() {\n\t    let localctx = new PrimaryContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 8, LgmScriptParser.RULE_primary);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 57;\n\t        _la = this._input.LA(1);\n\t        if(!(_la===LgmScriptParser.IntLiteral || _la===LgmScriptParser.Id)) {\n\t        this._errHandler.recoverInline(this);\n\t        }\n\t        else {\n\t        \tthis._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\texpressionStatement() {\n\t    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 10, LgmScriptParser.RULE_expressionStatement);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 60;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===LgmScriptParser.IntLiteral || _la===LgmScriptParser.Id) {\n\t            this.state = 59;\n\t            this.expression();\n\t        }\n\n\t        this.state = 62;\n\t        this.match(LgmScriptParser.SemiColon);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\texpression() {\n\t    let localctx = new ExpressionContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 12, LgmScriptParser.RULE_expression);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 64;\n\t        this.additive(0);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tassignmentStatement() {\n\t    let localctx = new AssignmentStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 14, LgmScriptParser.RULE_assignmentStatement);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 66;\n\t        this.match(LgmScriptParser.Id);\n\t        this.state = 67;\n\t        this.match(LgmScriptParser.AssignmentOP);\n\t        this.state = 68;\n\t        this.additive(0);\n\t        this.state = 69;\n\t        this.match(LgmScriptParser.SemiColon);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tifStatement() {\n\t    let localctx = new IfStatementContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 16, LgmScriptParser.RULE_ifStatement);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 71;\n\t        this.match(LgmScriptParser.If);\n\t        this.state = 72;\n\t        this.match(LgmScriptParser.LeftParen);\n\t        this.state = 73;\n\t        this.expression();\n\t        this.state = 74;\n\t        this.match(LgmScriptParser.RightParen);\n\t        this.state = 75;\n\t        this.expression();\n\t        this.state = 78;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if(_la===LgmScriptParser.Else) {\n\t            this.state = 76;\n\t            this.match(LgmScriptParser.Else);\n\t            this.state = 77;\n\t            this.expression();\n\t        }\n\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n}\n\nLgmScriptParser.EOF = antlr4.Token.EOF;\nLgmScriptParser.If = 1;\nLgmScriptParser.Else = 2;\nLgmScriptParser.Int = 3;\nLgmScriptParser.IntLiteral = 4;\nLgmScriptParser.StringLiteral = 5;\nLgmScriptParser.AssignmentOP = 6;\nLgmScriptParser.RelationalOP = 7;\nLgmScriptParser.ADD = 8;\nLgmScriptParser.SUB = 9;\nLgmScriptParser.MUL = 10;\nLgmScriptParser.DIV = 11;\nLgmScriptParser.Sharp = 12;\nLgmScriptParser.SemiColon = 13;\nLgmScriptParser.Dot = 14;\nLgmScriptParser.Comm = 15;\nLgmScriptParser.LeftBracket = 16;\nLgmScriptParser.RightBracket = 17;\nLgmScriptParser.LeftBrace = 18;\nLgmScriptParser.RightBrace = 19;\nLgmScriptParser.LeftParen = 20;\nLgmScriptParser.RightParen = 21;\nLgmScriptParser.Id = 22;\nLgmScriptParser.Whitespace = 23;\nLgmScriptParser.Newline = 24;\n\nLgmScriptParser.RULE_program = 0;\nLgmScriptParser.RULE_intDeclare = 1;\nLgmScriptParser.RULE_additive = 2;\nLgmScriptParser.RULE_multiplicative = 3;\nLgmScriptParser.RULE_primary = 4;\nLgmScriptParser.RULE_expressionStatement = 5;\nLgmScriptParser.RULE_expression = 6;\nLgmScriptParser.RULE_assignmentStatement = 7;\nLgmScriptParser.RULE_ifStatement = 8;\n\nclass ProgramContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_program;\n    }\n\n\tintDeclare = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(IntDeclareContext);\n\t    } else {\n\t        return this.getTypedRuleContext(IntDeclareContext,i);\n\t    }\n\t};\n\n\texpressionStatement = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionStatementContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionStatementContext,i);\n\t    }\n\t};\n\n\tassignmentStatement = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(AssignmentStatementContext);\n\t    } else {\n\t        return this.getTypedRuleContext(AssignmentStatementContext,i);\n\t    }\n\t};\n\n\tifStatement = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(IfStatementContext);\n\t    } else {\n\t        return this.getTypedRuleContext(IfStatementContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterProgram(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitProgram(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitProgram(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass IntDeclareContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_intDeclare;\n    }\n\n\tInt() {\n\t    return this.getToken(LgmScriptParser.Int, 0);\n\t};\n\n\tId() {\n\t    return this.getToken(LgmScriptParser.Id, 0);\n\t};\n\n\tSemiColon() {\n\t    return this.getToken(LgmScriptParser.SemiColon, 0);\n\t};\n\n\tAssignmentOP() {\n\t    return this.getToken(LgmScriptParser.AssignmentOP, 0);\n\t};\n\n\tadditive() {\n\t    return this.getTypedRuleContext(AdditiveContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterIntDeclare(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitIntDeclare(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitIntDeclare(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass AdditiveContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_additive;\n        this.bop = null; // Token\n    }\n\n\tmultiplicative() {\n\t    return this.getTypedRuleContext(MultiplicativeContext,0);\n\t};\n\n\tadditive() {\n\t    return this.getTypedRuleContext(AdditiveContext,0);\n\t};\n\n\tADD() {\n\t    return this.getToken(LgmScriptParser.ADD, 0);\n\t};\n\n\tSUB() {\n\t    return this.getToken(LgmScriptParser.SUB, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterAdditive(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitAdditive(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitAdditive(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass MultiplicativeContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_multiplicative;\n        this.bop = null; // Token\n    }\n\n\tprimary() {\n\t    return this.getTypedRuleContext(PrimaryContext,0);\n\t};\n\n\tmultiplicative() {\n\t    return this.getTypedRuleContext(MultiplicativeContext,0);\n\t};\n\n\tMUL() {\n\t    return this.getToken(LgmScriptParser.MUL, 0);\n\t};\n\n\tDIV() {\n\t    return this.getToken(LgmScriptParser.DIV, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterMultiplicative(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitMultiplicative(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitMultiplicative(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass PrimaryContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_primary;\n    }\n\n\tIntLiteral() {\n\t    return this.getToken(LgmScriptParser.IntLiteral, 0);\n\t};\n\n\tId() {\n\t    return this.getToken(LgmScriptParser.Id, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterPrimary(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitPrimary(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitPrimary(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ExpressionStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_expressionStatement;\n    }\n\n\tSemiColon() {\n\t    return this.getToken(LgmScriptParser.SemiColon, 0);\n\t};\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterExpressionStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitExpressionStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitExpressionStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass ExpressionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_expression;\n    }\n\n\tadditive() {\n\t    return this.getTypedRuleContext(AdditiveContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitExpression(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitExpression(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass AssignmentStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_assignmentStatement;\n    }\n\n\tId() {\n\t    return this.getToken(LgmScriptParser.Id, 0);\n\t};\n\n\tAssignmentOP() {\n\t    return this.getToken(LgmScriptParser.AssignmentOP, 0);\n\t};\n\n\tadditive() {\n\t    return this.getTypedRuleContext(AdditiveContext,0);\n\t};\n\n\tSemiColon() {\n\t    return this.getToken(LgmScriptParser.SemiColon, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterAssignmentStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitAssignmentStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitAssignmentStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\nclass IfStatementContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = LgmScriptParser.RULE_ifStatement;\n    }\n\n\tIf() {\n\t    return this.getToken(LgmScriptParser.If, 0);\n\t};\n\n\tLeftParen() {\n\t    return this.getToken(LgmScriptParser.LeftParen, 0);\n\t};\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tRightParen() {\n\t    return this.getToken(LgmScriptParser.RightParen, 0);\n\t};\n\n\tElse() {\n\t    return this.getToken(LgmScriptParser.Else, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.enterIfStatement(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof LgmScriptListener ) {\n\t        listener.exitIfStatement(this);\n\t\t}\n\t}\n\n\taccept(visitor) {\n\t    if ( visitor instanceof LgmScriptVisitor ) {\n\t        return visitor.visitIfStatement(this);\n\t    } else {\n\t        return visitor.visitChildren(this);\n\t    }\n\t}\n\n\n}\n\n\n\n\nLgmScriptParser.ProgramContext = ProgramContext; \nLgmScriptParser.IntDeclareContext = IntDeclareContext; \nLgmScriptParser.AdditiveContext = AdditiveContext; \nLgmScriptParser.MultiplicativeContext = MultiplicativeContext; \nLgmScriptParser.PrimaryContext = PrimaryContext; \nLgmScriptParser.ExpressionStatementContext = ExpressionStatementContext; \nLgmScriptParser.ExpressionContext = ExpressionContext; \nLgmScriptParser.AssignmentStatementContext = AssignmentStatementContext; \nLgmScriptParser.IfStatementContext = IfStatementContext; \n","import antlr4 from \"antlr4\";\nimport LgmScriptLexer from \"../output/production/lgmscript/LgmScriptLexer.js\";\nimport LgmScriptParser from \"../output/production/lgmscript/LgmScriptParser.js\";\nimport JSVisitor from \"./main/JSVisitor.js\";\nimport JSListener from \"./main/JSListener.js\";\n\nconst input = `if(0) 1+3 else 4+3;`;\nconst chars = new antlr4.InputStream(input);\nconst lexer = new LgmScriptLexer(chars);\nconst tokens = new antlr4.CommonTokenStream(lexer);\nconst parser = new LgmScriptParser(tokens);\nparser.buildParseTrees = true;\nconst tree = parser.program();\nconsole.log(input)\n\nconst visitor = new JSVisitor();\nvisitor.visitProgram(tree);\n// console.log(tokens.tokens)\n\n// const extractor = new JSListener()\n// antlr4.tree.ParseTreeWalker.DEFAULT.walk(extractor, tree)","import LgmScriptParser from \"../../output/production/lgmscript/LgmScriptParser.js\";\nimport LgmScriptVisitor from \"../../output/production/lgmscript/LgmScriptVisitor.js\";\n\nexport default class JSVisitor extends LgmScriptVisitor {\n  constructor() {\n    super();\n  }\n\n  map = {};\n\n  visitProgram(ctx) {\n    console.log(\"进入程序\");\n    let value;\n\n    for (const item of ctx.children) {\n      value = this.visit(item);\n      console.log(\"程序结果\", value[0]);\n    }\n    return 0;\n  }\n\n  visitExpression(ctx) {\n    const value = this.visit(ctx.additive());\n    return value;\n  }\n\n  visitIfStatement(ctx) {\n    console.log(\"进入if语句\");\n    const condition = this.visit(ctx.expression(0));\n    let value;\n    if (condition) {\n      value = this.visit(ctx.expression(1));\n      console.log(value);\n    } else {\n      console.log(ctx.Else());\n      if (ctx.Else()) {\n        value = this.visit(ctx.expression(2));\n        console.log(value);\n      }\n    }\n    return value;\n  }\n\n  visitAdditive(ctx) {\n    // console.log(\"触发加法\");\n    let value;\n    if (ctx.bop) {\n      switch (ctx.bop.type) {\n        case LgmScriptParser.ADD:\n          value = this.visit(ctx.additive()) + this.visit(ctx.multiplicative());\n          break;\n        case LgmScriptParser.SUB:\n          value = this.visit(ctx.additive()) - this.visit(ctx.multiplicative());\n          break;\n      }\n    } else {\n      value = this.visit(ctx.multiplicative());\n    }\n    return value;\n  }\n\n  visitIntDeclare(ctx) {\n    const id = ctx.Id().getText();\n    let value = null;\n    if (ctx.additive()) value = this.visit(ctx.additive());\n    this.map[id] = value;\n    return value;\n  }\n\n  visitMultiplicative(ctx) {\n    let value;\n\n    if (ctx.bop) {\n      switch (ctx.bop.type) {\n        case LgmScriptParser.MUL:\n          value = this.visit(ctx.multiplicative()) * this.visit(ctx.primary());\n          break;\n        case LgmScriptParser.DIV:\n          value = this.visit(ctx.multiplicative()) / this.visit(ctx.primary());\n          break;\n      }\n    } else {\n      value = this.visit(ctx.primary());\n    }\n\n    return value;\n  }\n\n  visitPrimary(ctx) {\n    // console.log(\"触发常数\");\n    // console.log(ctx.IntLiteral());\n    // switch (){\n\n    // }\n    if (ctx.IntLiteral()) return Number(ctx.IntLiteral().getText());\n    if (ctx.Id()) return this.map[ctx.Id().getText()];\n  }\n}\n"],"names":["Token","Lexer","Interval","module","exports","constructor","tokenSource","super","this","tokens","index","fetchedEOF","mark","release","marker","reset","seek","lazyInit","adjustSeekIndex","get","consume","skipEofCheck","length","LA","EOF","sync","i","n","fetch","t","nextToken","tokenIndex","push","type","getTokens","start","stop","types","undefined","subset","contains","LT","LB","k","setup","setTokenSource","nextTokenOnChannel","channel","token","previousTokenOnChannel","getHiddenTokensToRight","nextOnChannel","DEFAULT_TOKEN_CHANNEL","from_","to","filterForChannel","getHiddenTokensToLeft","prevOnChannel","left","right","hidden","getSourceName","getText","interval","fill","s","text","InputStream","fs","CharStreams","fromString","str","fromBlob","blob","encoding","onLoad","onError","reader","window","FileReader","onload","e","is","target","result","onerror","readAsText","fromBuffer","buffer","toString","fromPath","path","callback","readFile","err","data","fromPathSync","readFileSync","CommonToken","CommonTokenFactory","copyText","create","source","line","column","createThin","DEFAULT","BufferedTokenStream","lexer","DEFAULT_CHANNEL","getNumberOfOnChannelTokens","fileName","decodeToUnicodeCodePoints","name","strdata","_index","codePoint","codePointAt","codeUnit","charCodeAt","_size","offset","pos","Math","min","String","fromCodePoint","slice","size","item","IntervalSet","intervals","readOnly","first","v","INVALID_TYPE","addOne","addInterval","addRange","l","h","toAdd","existing","splice","max","reduce","addSet","other","forEach","current","next","complement","toRemove","removeRange","removeOne","x","value","replace","literalNames","symbolicNames","elemsAreChar","toTokenString","toCharString","toIndexString","names","fromCharCode","join","j","elementName","EPSILON","map","acc","val","Set","BitSet","ATNConfig","RuleStopState","RuleTransition","NotSetTransition","WildcardTransition","AbstractPredicateTransition","predictionContextFromRuleContext","PredictionContext","SingletonPredictionContext","LL1Analyzer","atn","getDecisionLookahead","count","transitions","look","alt","lookBusy","seeThruPreds","_LOOK","transition","EMPTY","HIT_PRED","LOOK","stopState","ctx","r","lookContext","calledRuleStack","addEOF","c","state","context","add","isEmpty","removed","ruleIndex","remove","returnState","states","getReturnState","getParent","newContext","followState","stateNumber","isEpsilon","MIN_USER_TOKEN_TYPE","maxTokenType","set","label","Recognizer","RecognitionException","LexerNoViableAltException","input","_input","_factory","_tokenFactorySourcePair","_interp","_token","_tokenStartCharIndex","_tokenStartLine","_tokenStartColumn","_hitEOF","_channel","_type","_modeStack","_mode","DEFAULT_MODE","_text","tokenStartMarker","emitEOF","continueOuter","ttype","SKIP","match","console","log","stack","notifyListeners","recover","MORE","emit","skip","more","mode","m","pushMode","debug","popMode","pop","emitToken","getCharIndex","cpos","lpos","eof","getAllTokens","msg","getErrorDisplay","getErrorListenerDispatch","syntaxError","d","getErrorDisplayForChar","getCharErrorDisplay","re","inputStream","sourceName","HIDDEN","HIDDEN_CHANNEL","MIN_CHAR_VALUE","MAX_CHAR_VALUE","ParseTreeListener","TerminalNode","ErrorNode","DefaultErrorStrategy","ATNDeserializer","ATNDeserializationOptions","TraceListener","parser","enterEveryRule","ruleNames","visitTerminal","node","symbol","_ctx","exitEveryRule","Parser","_errHandler","_precedenceStack","buildParseTrees","_tracer","_parseListeners","_syntaxErrors","setInputStream","setTrace","getCurrentToken","reportMatch","recoverInline","addErrorNode","matchWildcard","_buildParseTrees","getParseListeners","addParseListener","listener","removeParseListener","idx","indexOf","removeParseListeners","triggerEnterRuleEvent","enterRule","triggerExitRuleEvent","reverse","exitRule","getTokenFactory","setTokenFactory","factory","getATNWithBypassAlts","serializedAtn","getSerializedATN","bypassAltsAtnCache","deserializationOptions","generateRuleBypassTransitions","deserialize","compileParseTreePattern","pattern","patternRuleIndex","getTokenStream","ParseTreePatternMatcher","compile","getInputStream","setTokenStream","notifyErrorListeners","offendingToken","o","hasListener","inErrorRecoveryMode","addTokenNode","invokingState","isErrorNode","visitErrorNode","addContextToParseTree","parentCtx","addChild","localctx","enterOuterAlt","altNum","setAltNumber","removeLastChild","getPrecedence","enterRecursionRule","precedence","pushNewRecursionContext","previous","unrollRecursionContexts","retCtx","getInvokingContext","precpred","inContext","isExpectedToken","following","nextTokens","rt","getExpectedTokens","getExpectedTokensWithinCurrentRule","getRuleIndex","ruleName","getRuleIndexMap","getRuleInvocationStack","p","getDFAStrings","decisionToDFA","dumpDFA","seenOne","dfa","printer","println","decision","print","trace","RuleContext","Tree","INVALID_INTERVAL","TerminalNodeImpl","ErrorNodeImpl","ParserRuleContext","parent","invokingStateNumber","children","exception","copyFrom","child","badToken","getChild","getToken","getTypedRuleContext","ctxType","getTypedRuleContexts","contexts","getChildCount","getSourceInterval","Hash","Map","equalArrays","cachedHashCode","hasEmptyPath","EMPTY_RETURN_STATE","hashCode","updateHashCode","hash","update","globalNodeCount","id","finish","equals","up","static","EmptyPredictionContext","ArrayPredictionContext","parents","returnStates","merge","a","b","rootIsWildcard","mergeCache","rootMerge","payloads","mergeRoot","spc","singleParent","apc","a_","mergeSingletons","mergedReturnStates","mergedParents","a_parent","b_parent","payload","ax_ax","M","uniqueParents","containsKey","put","q","combineCommonParents","mergeArrays","PredictionContextCache","cache","outerContext","getCachedPredictionContext","contextCache","visited","changed","updated","ConsoleErrorListener","ProxyErrorListener","_listeners","INSTANCE","_stateNumber","checkVersion","toolVersion","addErrorListener","removeErrorListeners","getTokenTypeMap","tokenNames","getTokenNames","tokenTypeMapCache","ruleIndexMapCache","getTokenType","tokenName","getErrorHeader","getOffendingToken","getTokenErrorDisplay","sempred","actionIndex","RuleNode","Trees","depth","getRuleContext","getPayload","getAltNumber","altNumber","accept","visitor","visitChildren","toStringTree","recog","ri","getTokenSource","EMPTY_SOURCE","clone","txt","arrayToString","Array","isArray","standardEqualsFunction","standardHashCodeFunction","prototype","seed","round","random","pow","key","h1b","k1","remainder","bytes","h1","c1","c2","or","bits","Object","keys","values","minValue","apply","hashFunction","equalsFunction","hashKey","entries","entry","oldValue","concat","getKeys","getValues","arguments","AltDict","DoubleDict","defaultMapCtor","cacheMap","hashStuff","escapeWhitespace","escapeSpaces","titleCase","charAt","toUpperCase","substr","ATN","grammarType","decisionToState","ruleToStartState","ruleToStopState","modeNameToStartState","ruleToTokenType","lexerActions","modeToStartState","nextTokensInContext","nextTokensNoContext","nextTokenWithinRule","addState","removeState","defineDecisionState","getDecisionState","expected","INVALID_ALT_NUMBER","DecisionState","SemanticContext","checkParams","params","isCfg","semanticContext","reachesIntoOuterContext","props","precedenceFilterSuppressed","config","checkContext","NONE","hashCodeForConfigSet","equalsForConfigSet","LexerATNConfig","lexerActionExecutor","passedThroughNonGreedyDecision","checkNonGreedyDecision","nonGreedy","Utils","hashATNConfig","equalATNConfigs","ATNConfigSet","fullCtx","configLookup","configs","uniqueAlt","conflictingAlts","hasSemanticContext","dipsIntoOuterContext","merged","getStates","getPredicates","preds","optimizeConfigs","interpreter","getCachedContext","addAll","coll","containsFast","clear","setReadonly","items","OrderedATNConfigSet","verifyATN","defaultOptions","ATNType","ATNState","BasicState","BlockStartState","BlockEndState","LoopEndState","RuleStartState","TokensStartState","PlusLoopbackState","StarLoopbackState","StarLoopEntryState","PlusBlockStartState","StarBlockStartState","BasicBlockStartState","Transition","AtomTransition","SetTransition","RangeTransition","ActionTransition","EpsilonTransition","PredicateTransition","PrecedencePredicateTransition","LexerActionType","LexerSkipAction","LexerChannelAction","LexerCustomAction","LexerMoreAction","LexerTypeAction","LexerPushModeAction","LexerPopModeAction","LexerModeAction","ADDED_UNICODE_SMP","SUPPORTED_UUIDS","initArray","tmp","byteToHex","bth","createByteToHex","options","stateFactories","actionFactories","isFeatureSupported","feature","actualUuid","idx1","checkUUID","readATN","readStates","readRules","readModes","sets","readSets","readInt","bind","uuid","readInt32","readEdges","readDecisions","readLexerActions","markPrecedenceDecisions","PARSER","temp","split","version","readUUID","pair","loopBackStateNumbers","endStateNumbers","nstates","stype","stateFactory","LOOP_END","loopBackStateNumber","endStateNumber","loopBackState","endState","numNonGreedyStates","numPrecedenceStates","isPrecedenceRule","nrules","LEXER","tokenType","nmodes","readUnicode","iset","i1","i2","trans","nedges","src","trg","arg1","arg2","arg3","edgeFactory","addTransition","outermostPrecedenceReturn","startState","ndecisions","decState","actionType","data1","data2","lexerActionFactory","generateRuleBypassTransition","bypassStart","bypassStop","excludeTransition","stateIsEndStateFor","matchState","maybeLoopEndState","epsilonOnlyTransitions","isPrecedenceDecision","checkCondition","condition","message","readLong","bb","int","RANGE","RULE","PREDICATE","PRECEDENCE","ATOM","ACTION","SET","NOT_SET","WILDCARD","sf","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","af","CHANNEL","CUSTOM","MODE","POP_MODE","PUSH_MODE","TYPE","DFAState","ATNSimulator","sharedContextCache","ERROR","INVALID_STATE_NUMBER","stateType","isNonGreedyExitState","serializationNames","LexerActionExecutor","resetSimState","sim","dfaState","SimState","LexerATNSimulator","startIndex","prevAccept","copyState","simulator","match_calls","s0","matchATN","execATN","old_mode","s0_closure","computeStartState","suppressEdge","addDFAState","predict","toLexerString","ds0","isAcceptState","captureSimState","getExistingTargetState","computeTargetState","failOrAccept","edges","MIN_DFA_EDGE","MAX_DFA_EDGE","reach","getReachableConfigSet","addDFAEdge","prediction","closure","skipAlt","cfg","currentAltReachedAcceptState","getTokenName","getReachableTarget","fixOffsetBeforeMatch","treatEofAsEpsilon","charPos","execute","matches","initialContext","speculative","getEpsilonTarget","serializationType","predIndex","evaluatePredicate","append","savedcolumn","savedLine","settings","tk","cfgs","proposed","firstConfigWithRuleStopState","newState","getDFA","tt","dfa_debug","LexerAction","action","isPositionDependent","LexerIndexedCustomAction","updatedLexerActions","requiresSeek","stopIndex","lexerAction","numActions","PredPrediction","PredictionMode","NoViableAltException","predictionMode","LL","_startIndex","_outerContext","_dfa","debug_closure","debug_add","debug_list_atn_decisions","retry_debug","adaptivePredict","getLookaheadName","precedenceDfa","getPrecedenceStartState","atnStartState","applyPrecedenceFilter","setPrecedenceStartState","previousD","D","noViableAlt","getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule","requiresFullContext","SLL","predicates","conflictIndex","evalSemanticContext","reportAttemptingFullContext","execATNWithFullContext","alts","reportAmbiguity","computeReachSet","predictedAlt","getUniqueAlt","altSubSets","getConflictingAltSubsets","allSubsetsConflict","getConflictingAlts","hasSLLConflictTerminatingPrediction","predicateDFAState","decisionState","nalts","altsToCollectPredsFrom","getConflictingAltsOrUniqueAlt","altToPred","getPredsForAmbigAlts","getPredicatePredictions","foundExactAmbig","resolvesToJustOneViableAlt","LL_EXACT_AMBIG_DETECTION","allSubsetsEqual","getSingleViableAlt","reportContextSensitivity","intermediate","skippedStopStates","closureBusy","removeAllConfigsNotInRuleStopState","hasConfigInRuleStopState","lookToEndOfRule","allConfigsInRuleStopStates","endOfRuleState","statesFromAlt1","configSet","updatedContext","evalPrecedence","ambigAlts","orContext","nPredAlts","pred","pairs","containsPredicate","splitAccordingToSemanticValidity","semValidConfigs","semInvalidConfigs","getAltThatFinishedDecisionEntryRule","succeeded","failed","evaluate","predPredictions","complete","predictions","predicateEvaluationResult","collectPredicates","closureCheckingStopState","getRuleName","closure_","parms","canDropLoopEntryEdgeInLeftRecursiveRule","continueCollecting","newDepth","numCtxs","blockEndStateNum","blockEndState","returnStateNumber","returnStateTarget","ruleTransition","precedenceTransition","predTransition","actionTransition","pt","currentPosition","predSucceeds","getPredicate","newSemCtx","andContext","isCtxDependent","altsets","getAlts","dumpDeadEndConfigs","nvae","decs","getDeadEndConfigs","error","exact","dup","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasNonConflictingAltSet","all","configToAlts","getStateToAltMap","minAlt","AND","opnds","OR","Predicate","PrecedencePredicate","compareTo","operands","precedencePredicates","filterPrecedencePredicates","reduced","from","differs","evaluated","sort","serializationTypes","minVocabSymbol","maxVocabSymbol","label_","makeLabel","ruleStart","ParserATNSimulator","DFASerializer","LexerDFASerializer","_states","precedenceState","setPrecedenceDfa","sortedStates","buf","getStateString","getEdgeLabel","baseStateStr","getAltSet","DFA","ErrorListener","exactOnly","recognizer","getDecisionDescription","reportedAlts","offendingSymbol","delegates","InputMismatchException","FailedPredicateException","ParseCancellationException","reportError","errorRecoveryMode","lastErrorIndex","lastErrorStates","nextTokensContext","nextTokenState","endErrorCondition","beginErrorCondition","reportNoViableAlternative","reportInputMismatch","reportFailedPredicate","getMessage","followSet","getErrorRecoverySet","consumeUntil","la","nextTokensState","singleTokenDeletion","reportUnwantedToken","expecting","whatFollowsLoopIterationOrRule","startToken","escapeWSAndQuote","reportMissingToken","matchedSymbol","singleTokenInsertion","getMissingSymbol","currentSymbolType","nextTokenType","currentSymbol","expectedTokenType","tokenText","lookback","recoverSet","follow","BailErrorStrategy","Error","captureStackTrace","offendingState","formatMessage","predicate","deadEndConfigs","predicateIndex","tree","CommonTokenStream","pc","defineProperty","object","$defineProperty","position","TypeError","string","Number","second","stringFromCharCode","floor","_","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","isFinite","RangeError","ParseTree","getSymbol","ParseTreeWalker","walk","ParseTreeVisitor","visit","getNodeText","res","getChildren","list","getAncestors","ancestors","findAllTokenNodes","findAllNodes","findAllRuleNodes","findTokens","nodes","_findAllNodes","descendants","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","serializedATN","antlr4","decisionsToDFA","ds","LgmScriptLexer","If","Else","Int","IntLiteral","StringLiteral","AssignmentOP","RelationalOP","ADD","SUB","MUL","DIV","Sharp","SemiColon","Dot","Comm","LeftBracket","RightBracket","LeftBrace","RightBrace","LeftParen","RightParen","Id","Whitespace","Newline","enterProgram","exitProgram","enterIntDeclare","exitIntDeclare","enterAdditive","exitAdditive","enterMultiplicative","exitMultiplicative","enterPrimary","exitPrimary","enterExpressionStatement","exitExpressionStatement","enterExpression","exitExpression","enterAssignmentStatement","exitAssignmentStatement","enterIfStatement","exitIfStatement","LgmScriptVisitor","visitProgram","visitIntDeclare","visitAdditive","visitMultiplicative","visitPrimary","visitExpressionStatement","visitExpression","visitAssignmentStatement","visitIfStatement","LgmScriptParser","additive_sempred","multiplicative_sempred","program","ProgramContext","RULE_program","_la","intDeclare","expressionStatement","assignmentStatement","ifStatement","IntDeclareContext","RULE_intDeclare","additive","_p","_parentctx","_parentState","AdditiveContext","_prevctx","RULE_additive","multiplicative","_alt","bop","MultiplicativeContext","RULE_multiplicative","primary","PrimaryContext","RULE_primary","ExpressionStatementContext","RULE_expressionStatement","expression","ExpressionContext","RULE_expression","AssignmentStatementContext","RULE_assignmentStatement","IfStatementContext","RULE_ifStatement"],"sourceRoot":""}